

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 23 17:22:44 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           	psect	idataBANK0
    67  00BE8B                     __pidataBANK0:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _grados
    71  00BE8B  00                 	db	0
    72  00BE8C  C0                 	db	192
    73  00BE8D  41                 	db	65
    74                           
    75                           ;initializer for _anio
    76  00BE8E  0015               	dw	21
    77                           
    78                           ;initializer for _dia
    79  00BE90  0008               	dw	8
    80                           
    81                           ;initializer for _diasem
    82  00BE92  0005               	dw	5
    83                           
    84                           ;initializer for _hora
    85  00BE94  0009               	dw	9
    86                           
    87                           ;initializer for _hora_vdr_a
    88  00BE96  0008               	dw	8
    89                           
    90                           ;initializer for _hora_vdr_c
    91  00BE98  0016               	dw	22
    92                           
    93                           ;initializer for _mes
    94  00BE9A  000A               	dw	10
    95                           
    96                           ;initializer for _minuto
    97  00BE9C  0023               	dw	35
    98                           
    99                           ;initializer for _minuto_vdr_a
   100  00BE9E  001E               	dw	30
   101                           
   102                           ;initializer for _temperatura
   103  00BEA0  0018               	dw	24
   104                           
   105                           	psect	mediumconst
   106  00FE28                     __pmediumconst:
   107                           	opt stack 0
   108  00FE28  00                 	db	0
   109  00FE29                     _dpowers:
   110                           	opt stack 0
   111  00FE29  0001               	dw	1
   112  00FE2B  0000               	dw	0
   113  00FE2D  000A               	dw	10
   114  00FE2F  0000               	dw	0
   115  00FE31  0064               	dw	100
   116  00FE33  0000               	dw	0
   117  00FE35  03E8               	dw	1000
   118  00FE37  0000               	dw	0
   119  00FE39  2710               	dw	10000
   120  00FE3B  0000               	dw	0
   121  00FE3D  86A0               	dw	34464
   122  00FE3F  0001               	dw	1
   123  00FE41  4240               	dw	16960
   124  00FE43  000F               	dw	15
   125  00FE45  9680               	dw	38528
   126  00FE47  0098               	dw	152
   127  00FE49  E100               	dw	57600
   128  00FE4B  05F5               	dw	1525
   129  00FE4D  CA00               	dw	51712
   130  00FE4F  3B9A               	dw	15258
   131  00FE51                     __end_of_dpowers:
   132                           	opt stack 0
   133  00FE51                     __npowers_:
   134                           	opt stack 0
   135  00FE51  00                 	db	0
   136  00FE52  80                 	db	128
   137  00FE53  3F                 	db	63
   138  00FE54  CD                 	db	205
   139  00FE55  CC                 	db	204
   140  00FE56  3D                 	db	61
   141  00FE57  D7                 	db	215
   142  00FE58  23                 	db	35
   143  00FE59  3C                 	db	60
   144  00FE5A  12                 	db	18
   145  00FE5B  83                 	db	131
   146  00FE5C  3A                 	db	58
   147  00FE5D  B7                 	db	183
   148  00FE5E  D1                 	db	209
   149  00FE5F  38                 	db	56
   150  00FE60  C6                 	db	198
   151  00FE61  27                 	db	39
   152  00FE62  37                 	db	55
   153  00FE63  38                 	db	56
   154  00FE64  86                 	db	134
   155  00FE65  35                 	db	53
   156  00FE66  C0                 	db	192
   157  00FE67  D6                 	db	214
   158  00FE68  33                 	db	51
   159  00FE69  CC                 	db	204
   160  00FE6A  2B                 	db	43
   161  00FE6B  32                 	db	50
   162  00FE6C  70                 	db	112
   163  00FE6D  89                 	db	137
   164  00FE6E  30                 	db	48
   165  00FE6F  E7                 	db	231
   166  00FE70  DB                 	db	219
   167  00FE71  2E                 	db	46
   168  00FE72  E5                 	db	229
   169  00FE73  3C                 	db	60
   170  00FE74  1E                 	db	30
   171  00FE75  42                 	db	66
   172  00FE76  A2                 	db	162
   173  00FE77  0D                 	db	13
   174  00FE78                     __end_of__npowers_:
   175                           	opt stack 0
   176  00FE78                     __powers_:
   177                           	opt stack 0
   178  00FE78  00                 	db	0
   179  00FE79  80                 	db	128
   180  00FE7A  3F                 	db	63
   181  00FE7B  00                 	db	0
   182  00FE7C  20                 	db	32
   183  00FE7D  41                 	db	65
   184  00FE7E  00                 	db	0
   185  00FE7F  C8                 	db	200
   186  00FE80  42                 	db	66
   187  00FE81  00                 	db	0
   188  00FE82  7A                 	db	122
   189  00FE83  44                 	db	68
   190  00FE84  40                 	db	64
   191  00FE85  1C                 	db	28
   192  00FE86  46                 	db	70
   193  00FE87  50                 	db	80
   194  00FE88  C3                 	db	195
   195  00FE89  47                 	db	71
   196  00FE8A  24                 	db	36
   197  00FE8B  74                 	db	116
   198  00FE8C  49                 	db	73
   199  00FE8D  97                 	db	151
   200  00FE8E  18                 	db	24
   201  00FE8F  4B                 	db	75
   202  00FE90  BC                 	db	188
   203  00FE91  BE                 	db	190
   204  00FE92  4C                 	db	76
   205  00FE93  6B                 	db	107
   206  00FE94  6E                 	db	110
   207  00FE95  4E                 	db	78
   208  00FE96  03                 	db	3
   209  00FE97  15                 	db	21
   210  00FE98  50                 	db	80
   211  00FE99  79                 	db	121
   212  00FE9A  AD                 	db	173
   213  00FE9B  60                 	db	96
   214  00FE9C  F3                 	db	243
   215  00FE9D  49                 	db	73
   216  00FE9E  71                 	db	113
   217  00FE9F                     __end_of__powers_:
   218                           	opt stack 0
   219  00FE9F                     STR_5:
   220  00FE9F  56                 	db	86	;'V'
   221  00FEA0  69                 	db	105	;'i'
   222  00FEA1  64                 	db	100	;'d'
   223  00FEA2  72                 	db	114	;'r'
   224  00FEA3  69                 	db	105	;'i'
   225  00FEA4  65                 	db	101	;'e'
   226  00FEA5  72                 	db	114	;'r'
   227  00FEA6  61                 	db	97	;'a'
   228  00FEA7  3A                 	db	58	;':'
   229  00FEA8  25                 	db	37
   230  00FEA9  30                 	db	48	;'0'
   231  00FEAA  32                 	db	50	;'2'
   232  00FEAB  75                 	db	117	;'u'
   233  00FEAC  3A                 	db	58	;':'
   234  00FEAD  25                 	db	37
   235  00FEAE  30                 	db	48	;'0'
   236  00FEAF  32                 	db	50	;'2'
   237  00FEB0  75                 	db	117	;'u'
   238  00FEB1  2D                 	db	45
   239  00FEB2  25                 	db	37
   240  00FEB3  30                 	db	48	;'0'
   241  00FEB4  32                 	db	50	;'2'
   242  00FEB5  75                 	db	117	;'u'
   243  00FEB6  3A                 	db	58	;':'
   244  00FEB7  25                 	db	37
   245  00FEB8  30                 	db	48	;'0'
   246  00FEB9  32                 	db	50	;'2'
   247  00FEBA  75                 	db	117	;'u'
   248  00FEBB  00                 	db	0
   249  00FEBC                     STR_9:
   250  00FEBC  4D                 	db	77	;'M'
   251  00FEBD  69                 	db	105	;'i'
   252  00FEBE  65                 	db	101	;'e'
   253  00FEBF  72                 	db	114	;'r'
   254  00FEC0  63                 	db	99	;'c'
   255  00FEC1  6F                 	db	111	;'o'
   256  00FEC2  6C                 	db	108	;'l'
   257  00FEC3  65                 	db	101	;'e'
   258  00FEC4  73                 	db	115	;'s'
   259  00FEC5  20                 	db	32
   260  00FEC6  25                 	db	37
   261  00FEC7  30                 	db	48	;'0'
   262  00FEC8  32                 	db	50	;'2'
   263  00FEC9  75                 	db	117	;'u'
   264  00FECA  2F                 	db	47
   265  00FECB  25                 	db	37
   266  00FECC  30                 	db	48	;'0'
   267  00FECD  32                 	db	50	;'2'
   268  00FECE  75                 	db	117	;'u'
   269  00FECF  2F                 	db	47
   270  00FED0  25                 	db	37
   271  00FED1  30                 	db	48	;'0'
   272  00FED2  32                 	db	50	;'2'
   273  00FED3  75                 	db	117	;'u'
   274  00FED4  00                 	db	0
   275  00FED5                     STR_6:
   276  00FED5  44                 	db	68	;'D'
   277  00FED6  6F                 	db	111	;'o'
   278  00FED7  6D                 	db	109	;'m'
   279  00FED8  69                 	db	105	;'i'
   280  00FED9  6E                 	db	110	;'n'
   281  00FEDA  67                 	db	103	;'g'
   282  00FEDB  6F                 	db	111	;'o'
   283  00FEDC  20                 	db	32
   284  00FEDD  25                 	db	37
   285  00FEDE  30                 	db	48	;'0'
   286  00FEDF  32                 	db	50	;'2'
   287  00FEE0  75                 	db	117	;'u'
   288  00FEE1  2F                 	db	47
   289  00FEE2  25                 	db	37
   290  00FEE3  30                 	db	48	;'0'
   291  00FEE4  32                 	db	50	;'2'
   292  00FEE5  75                 	db	117	;'u'
   293  00FEE6  2F                 	db	47
   294  00FEE7  25                 	db	37
   295  00FEE8  30                 	db	48	;'0'
   296  00FEE9  32                 	db	50	;'2'
   297  00FEEA  75                 	db	117	;'u'
   298  00FEEB  00                 	db	0
   299  00FEEC                     STR_11:
   300  00FEEC  56                 	db	86	;'V'
   301  00FEED  69                 	db	105	;'i'
   302  00FEEE  65                 	db	101	;'e'
   303  00FEEF  72                 	db	114	;'r'
   304  00FEF0  6E                 	db	110	;'n'
   305  00FEF1  65                 	db	101	;'e'
   306  00FEF2  73                 	db	115	;'s'
   307  00FEF3  20                 	db	32
   308  00FEF4  25                 	db	37
   309  00FEF5  30                 	db	48	;'0'
   310  00FEF6  32                 	db	50	;'2'
   311  00FEF7  75                 	db	117	;'u'
   312  00FEF8  2F                 	db	47
   313  00FEF9  25                 	db	37
   314  00FEFA  30                 	db	48	;'0'
   315  00FEFB  32                 	db	50	;'2'
   316  00FEFC  75                 	db	117	;'u'
   317  00FEFD  2F                 	db	47
   318  00FEFE  25                 	db	37
   319  00FEFF  30                 	db	48	;'0'
   320  00FF00  32                 	db	50	;'2'
   321  00FF01  75                 	db	117	;'u'
   322  00FF02  00                 	db	0
   323  00FF03                     STR_12:
   324  00FF03  53                 	db	83	;'S'
   325  00FF04  61                 	db	97	;'a'
   326  00FF05  62                 	db	98	;'b'
   327  00FF06  61                 	db	97	;'a'
   328  00FF07  64                 	db	100	;'d'
   329  00FF08  6F                 	db	111	;'o'
   330  00FF09  20                 	db	32
   331  00FF0A  25                 	db	37
   332  00FF0B  30                 	db	48	;'0'
   333  00FF0C  32                 	db	50	;'2'
   334  00FF0D  75                 	db	117	;'u'
   335  00FF0E  2F                 	db	47
   336  00FF0F  25                 	db	37
   337  00FF10  30                 	db	48	;'0'
   338  00FF11  32                 	db	50	;'2'
   339  00FF12  75                 	db	117	;'u'
   340  00FF13  2F                 	db	47
   341  00FF14  25                 	db	37
   342  00FF15  30                 	db	48	;'0'
   343  00FF16  32                 	db	50	;'2'
   344  00FF17  75                 	db	117	;'u'
   345  00FF18  00                 	db	0
   346  00FF19                     STR_8:
   347  00FF19  4D                 	db	77	;'M'
   348  00FF1A  61                 	db	97	;'a'
   349  00FF1B  72                 	db	114	;'r'
   350  00FF1C  74                 	db	116	;'t'
   351  00FF1D  65                 	db	101	;'e'
   352  00FF1E  73                 	db	115	;'s'
   353  00FF1F  20                 	db	32
   354  00FF20  25                 	db	37
   355  00FF21  30                 	db	48	;'0'
   356  00FF22  32                 	db	50	;'2'
   357  00FF23  75                 	db	117	;'u'
   358  00FF24  2F                 	db	47
   359  00FF25  25                 	db	37
   360  00FF26  30                 	db	48	;'0'
   361  00FF27  32                 	db	50	;'2'
   362  00FF28  75                 	db	117	;'u'
   363  00FF29  2F                 	db	47
   364  00FF2A  25                 	db	37
   365  00FF2B  30                 	db	48	;'0'
   366  00FF2C  32                 	db	50	;'2'
   367  00FF2D  75                 	db	117	;'u'
   368  00FF2E  00                 	db	0
   369  00FF2F                     STR_10:
   370  00FF2F  4A                 	db	74	;'J'
   371  00FF30  75                 	db	117	;'u'
   372  00FF31  65                 	db	101	;'e'
   373  00FF32  76                 	db	118	;'v'
   374  00FF33  65                 	db	101	;'e'
   375  00FF34  73                 	db	115	;'s'
   376  00FF35  20                 	db	32
   377  00FF36  25                 	db	37
   378  00FF37  30                 	db	48	;'0'
   379  00FF38  32                 	db	50	;'2'
   380  00FF39  75                 	db	117	;'u'
   381  00FF3A  2F                 	db	47
   382  00FF3B  25                 	db	37
   383  00FF3C  30                 	db	48	;'0'
   384  00FF3D  32                 	db	50	;'2'
   385  00FF3E  75                 	db	117	;'u'
   386  00FF3F  2F                 	db	47
   387  00FF40  25                 	db	37
   388  00FF41  30                 	db	48	;'0'
   389  00FF42  32                 	db	50	;'2'
   390  00FF43  75                 	db	117	;'u'
   391  00FF44  00                 	db	0
   392  00FF45                     STR_7:
   393  00FF45  4C                 	db	76	;'L'
   394  00FF46  75                 	db	117	;'u'
   395  00FF47  6E                 	db	110	;'n'
   396  00FF48  65                 	db	101	;'e'
   397  00FF49  73                 	db	115	;'s'
   398  00FF4A  20                 	db	32
   399  00FF4B  25                 	db	37
   400  00FF4C  30                 	db	48	;'0'
   401  00FF4D  32                 	db	50	;'2'
   402  00FF4E  75                 	db	117	;'u'
   403  00FF4F  2F                 	db	47
   404  00FF50  25                 	db	37
   405  00FF51  30                 	db	48	;'0'
   406  00FF52  32                 	db	50	;'2'
   407  00FF53  75                 	db	117	;'u'
   408  00FF54  2F                 	db	47
   409  00FF55  25                 	db	37
   410  00FF56  30                 	db	48	;'0'
   411  00FF57  32                 	db	50	;'2'
   412  00FF58  75                 	db	117	;'u'
   413  00FF59  00                 	db	0
   414  00FF5A                     STR_13:
   415  00FF5A  43                 	db	67	;'C'
   416  00FF5B  4F                 	db	79	;'O'
   417  00FF5C  4E                 	db	78	;'N'
   418  00FF5D  46                 	db	70	;'F'
   419  00FF5E  49                 	db	73	;'I'
   420  00FF5F  47                 	db	71	;'G'
   421  00FF60  55                 	db	85	;'U'
   422  00FF61  52                 	db	82	;'R'
   423  00FF62  41                 	db	65	;'A'
   424  00FF63  52                 	db	82	;'R'
   425  00FF64  20                 	db	32
   426  00FF65  53                 	db	83	;'S'
   427  00FF66  48                 	db	72	;'H'
   428  00FF67  4F                 	db	79	;'O'
   429  00FF68  50                 	db	80	;'P'
   430  00FF69  50                 	db	80	;'P'
   431  00FF6A  49                 	db	73	;'I'
   432  00FF6B  4E                 	db	78	;'N'
   433  00FF6C  47                 	db	71	;'G'
   434  00FF6D  00                 	db	0
   435  00FF6E                     STR_1:
   436  00FF6E  25                 	db	37
   437  00FF6F  30                 	db	48	;'0'
   438  00FF70  32                 	db	50	;'2'
   439  00FF71  75                 	db	117	;'u'
   440  00FF72  3A                 	db	58	;':'
   441  00FF73  25                 	db	37
   442  00FF74  30                 	db	48	;'0'
   443  00FF75  32                 	db	50	;'2'
   444  00FF76  75                 	db	117	;'u'
   445  00FF77  3A                 	db	58	;':'
   446  00FF78  25                 	db	37
   447  00FF79  30                 	db	48	;'0'
   448  00FF7A  32                 	db	50	;'2'
   449  00FF7B  75                 	db	117	;'u'
   450  00FF7C  20                 	db	32
   451  00FF7D  00                 	db	0
   452  00FF7E                     STR_3:
   453  00FF7E  54                 	db	84	;'T'
   454  00FF7F  65                 	db	101	;'e'
   455  00FF80  6D                 	db	109	;'m'
   456  00FF81  70                 	db	112	;'p'
   457  00FF82  50                 	db	80	;'P'
   458  00FF83  72                 	db	114	;'r'
   459  00FF84  6F                 	db	111	;'o'
   460  00FF85  3A                 	db	58	;':'
   461  00FF86  25                 	db	37
   462  00FF87  30                 	db	48	;'0'
   463  00FF88  32                 	db	50	;'2'
   464  00FF89  75                 	db	117	;'u'
   465  00FF8A  20                 	db	32
   466  00FF8B  00                 	db	0
   467  00FF8C                     STR_4:
   468  00FF8C  4D                 	db	77	;'M'
   469  00FF8D  65                 	db	101	;'e'
   470  00FF8E  64                 	db	100	;'d'
   471  00FF8F  3A                 	db	58	;':'
   472  00FF90  25                 	db	37
   473  00FF91  32                 	db	50	;'2'
   474  00FF92  2E                 	db	46
   475  00FF93  31                 	db	49	;'1'
   476  00FF94  66                 	db	102	;'f'
   477  00FF95  20                 	db	32
   478  00FF96  00                 	db	0
   479  00FF97                     STR_38:
   480  00FF97  53                 	db	83	;'S'
   481  00FF98  61                 	db	97	;'a'
   482  00FF99  62                 	db	98	;'b'
   483  00FF9A  61                 	db	97	;'a'
   484  00FF9B  64                 	db	100	;'d'
   485  00FF9C  6F                 	db	111	;'o'
   486  00FF9D  20                 	db	32
   487  00FF9E  20                 	db	32
   488  00FF9F  20                 	db	32
   489  00FFA0  00                 	db	0
   490  00FFA1                     STR_34:
   491  00FFA1  4D                 	db	77	;'M'
   492  00FFA2  61                 	db	97	;'a'
   493  00FFA3  72                 	db	114	;'r'
   494  00FFA4  74                 	db	116	;'t'
   495  00FFA5  65                 	db	101	;'e'
   496  00FFA6  73                 	db	115	;'s'
   497  00FFA7  20                 	db	32
   498  00FFA8  20                 	db	32
   499  00FFA9  20                 	db	32
   500  00FFAA  00                 	db	0
   501  00FFAB                     STR_36:
   502  00FFAB  4A                 	db	74	;'J'
   503  00FFAC  75                 	db	117	;'u'
   504  00FFAD  65                 	db	101	;'e'
   505  00FFAE  76                 	db	118	;'v'
   506  00FFAF  65                 	db	101	;'e'
   507  00FFB0  73                 	db	115	;'s'
   508  00FFB1  20                 	db	32
   509  00FFB2  20                 	db	32
   510  00FFB3  20                 	db	32
   511  00FFB4  00                 	db	0
   512  00FFB5                     STR_32:
   513  00FFB5  44                 	db	68	;'D'
   514  00FFB6  6F                 	db	111	;'o'
   515  00FFB7  6D                 	db	109	;'m'
   516  00FFB8  69                 	db	105	;'i'
   517  00FFB9  6E                 	db	110	;'n'
   518  00FFBA  67                 	db	103	;'g'
   519  00FFBB  6F                 	db	111	;'o'
   520  00FFBC  20                 	db	32
   521  00FFBD  20                 	db	32
   522  00FFBE  00                 	db	0
   523  00FFBF                     STR_37:
   524  00FFBF  56                 	db	86	;'V'
   525  00FFC0  69                 	db	105	;'i'
   526  00FFC1  65                 	db	101	;'e'
   527  00FFC2  72                 	db	114	;'r'
   528  00FFC3  6E                 	db	110	;'n'
   529  00FFC4  65                 	db	101	;'e'
   530  00FFC5  73                 	db	115	;'s'
   531  00FFC6  20                 	db	32
   532  00FFC7  20                 	db	32
   533  00FFC8  00                 	db	0
   534  00FFC9                     STR_35:
   535  00FFC9  4D                 	db	77	;'M'
   536  00FFCA  69                 	db	105	;'i'
   537  00FFCB  65                 	db	101	;'e'
   538  00FFCC  72                 	db	114	;'r'
   539  00FFCD  63                 	db	99	;'c'
   540  00FFCE  6F                 	db	111	;'o'
   541  00FFCF  6C                 	db	108	;'l'
   542  00FFD0  65                 	db	101	;'e'
   543  00FFD1  73                 	db	115	;'s'
   544  00FFD2  00                 	db	0
   545  00FFD3                     STR_33:
   546  00FFD3  4C                 	db	76	;'L'
   547  00FFD4  75                 	db	117	;'u'
   548  00FFD5  6E                 	db	110	;'n'
   549  00FFD6  65                 	db	101	;'e'
   550  00FFD7  73                 	db	115	;'s'
   551  00FFD8  20                 	db	32
   552  00FFD9  20                 	db	32
   553  00FFDA  20                 	db	32
   554  00FFDB  00                 	db	0
   555  00FFDC                     STR_42:
   556  00FFDC  49                 	db	73	;'I'
   557  00FFDD  6E                 	db	110	;'n'
   558  00FFDE  76                 	db	118	;'v'
   559  00FFDF  69                 	db	105	;'i'
   560  00FFE0  65                 	db	101	;'e'
   561  00FFE1  72                 	db	114	;'r'
   562  00FFE2  6E                 	db	110	;'n'
   563  00FFE3  6F                 	db	111	;'o'
   564  00FFE4  00                 	db	0
   565  00FFE5                     STR_47:
   566  00FFE5  28                 	db	40
   567  00FFE6  6E                 	db	110	;'n'
   568  00FFE7  75                 	db	117	;'u'
   569  00FFE8  6C                 	db	108	;'l'
   570  00FFE9  6C                 	db	108	;'l'
   571  00FFEA  29                 	db	41
   572  00FFEB  00                 	db	0
   573  00FFEC                     STR_39:
   574  00FFEC  56                 	db	86	;'V'
   575  00FFED  65                 	db	101	;'e'
   576  00FFEE  72                 	db	114	;'r'
   577  00FFEF  61                 	db	97	;'a'
   578  00FFF0  6E                 	db	110	;'n'
   579  00FFF1  6F                 	db	111	;'o'
   580  00FFF2  00                 	db	0
   581  00FFF3                     STR_2:
   582  00FFF3  25                 	db	37
   583  00FFF4  73                 	db	115	;'s'
   584  00FFF5  20                 	db	32
   585  00FFF6  00                 	db	0
   586  0000                     
   587                           ; #config settings
   588  00FFF7  00                 	db	0	; dummy byte at the end
   589  0000                     
   590                           	psect	nvBANK0
   591  0000ED                     __pnvBANK0:
   592                           	opt stack 0
   593  0000ED                     _anio_d:
   594                           	opt stack 0
   595  0000ED                     	ds	1
   596  0000EE                     _anio_u:
   597                           	opt stack 0
   598  0000EE                     	ds	1
   599  0000EF                     _dia_semana:
   600                           	opt stack 0
   601  0000EF                     	ds	1
   602  0000F0                     _fecha_d:
   603                           	opt stack 0
   604  0000F0                     	ds	1
   605  0000F1                     _fecha_u:
   606                           	opt stack 0
   607  0000F1                     	ds	1
   608  0000F2                     _hora_d:
   609                           	opt stack 0
   610  0000F2                     	ds	1
   611  0000F3                     _hora_u:
   612                           	opt stack 0
   613  0000F3                     	ds	1
   614  0000F4                     _mes_d:
   615                           	opt stack 0
   616  0000F4                     	ds	1
   617  0000F5                     _mes_u:
   618                           	opt stack 0
   619  0000F5                     	ds	1
   620  0000F6                     _minuto_d:
   621                           	opt stack 0
   622  0000F6                     	ds	1
   623  0000F7                     _minuto_u:
   624                           	opt stack 0
   625  0000F7                     	ds	1
   626  0000F8                     _segundo_d:
   627                           	opt stack 0
   628  0000F8                     	ds	1
   629  0000F9                     _segundo_u:
   630                           	opt stack 0
   631  0000F9                     	ds	1
   632  0000                     _ANCON0	set	3912
   633  0000                     _ANCON1	set	3913
   634  0000                     _RTCCFG	set	3903
   635  0000                     _RTCCFGbits	set	3903
   636  0000                     _ADCON0	set	4034
   637  0000                     _ADCON0bits	set	4034
   638  0000                     _ADCON1	set	4033
   639  0000                     _ADRESH	set	4036
   640  0000                     _ALRMCFGbits	set	3985
   641  0000                     _EECON2	set	4007
   642  0000                     _INTCONbits	set	4082
   643  0000                     _LATAbits	set	3977
   644  0000                     _LATBbits	set	3978
   645  0000                     _LATCbits	set	3979
   646  0000                     _OSCCONbits	set	4051
   647  0000                     _OSCTUNEbits	set	3995
   648  0000                     _PIE3bits	set	4003
   649  0000                     _PORTAbits	set	3968
   650  0000                     _PORTCbits	set	3970
   651  0000                     _RTCVALH	set	3993
   652  0000                     _RTCVALL	set	3992
   653  0000                     _T1CONbits	set	4045
   654  0000                     _TRISA	set	3986
   655  0000                     _TRISB	set	3987
   656  0000                     _TRISBbits	set	3987
   657  0000                     _TRISC	set	3988
   658                           
   659                           	psect	cinit
   660  00BFB8                     __pcinit:
   661                           	opt stack 0
   662  00BFB8                     start_initialization:
   663                           	opt stack 0
   664  00BFB8                     __initialization:
   665                           	opt stack 0
   666                           
   667                           ; Clear objects allocated to BANK1 (16 bytes)
   668  00BFB8  EE01  F000         	lfsr	0,__pbssBANK1
   669  00BFBC  0E10               	movlw	16
   670  00BFBE                     clear_0:
   671  00BFBE  6AEE               	clrf	postinc0,c
   672  00BFC0  06E8               	decf	wreg,f,c
   673  00BFC2  E1FD               	bnz	clear_0
   674                           
   675                           ; Clear objects allocated to BANK0 (58 bytes)
   676  00BFC4  EE00  F09C         	lfsr	0,__pbssBANK0
   677  00BFC8  0E3A               	movlw	58
   678  00BFCA                     clear_1:
   679  00BFCA  6AEE               	clrf	postinc0,c
   680  00BFCC  06E8               	decf	wreg,f,c
   681  00BFCE  E1FD               	bnz	clear_1
   682                           
   683                           ; Initialize objects allocated to BANK0 (23 bytes)
   684                           ; load TBLPTR registers with __pidataBANK0
   685  00BFD0  0E8B               	movlw	low __pidataBANK0
   686  00BFD2  6EF6               	movwf	tblptrl,c
   687  00BFD4  0EBE               	movlw	high __pidataBANK0
   688  00BFD6  6EF7               	movwf	tblptrh,c
   689  00BFD8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   690  00BFDA  6EF8               	movwf	tblptru,c
   691  00BFDC  EE00  F0D6         	lfsr	0,__pdataBANK0
   692  00BFE0  EE10 F017          	lfsr	1,23
   693  00BFE4                     copy_data0:
   694  00BFE4  0009               	tblrd		*+
   695  00BFE6  CFF5 FFEE          	movff	tablat,postinc0
   696  00BFEA  50E5               	movf	postdec1,w,c
   697  00BFEC  50E1               	movf	fsr1l,w,c
   698  00BFEE  E1FA               	bnz	copy_data0
   699  00BFF0                     end_of_initialization:
   700                           	opt stack 0
   701  00BFF0                     __end_of__initialization:
   702                           	opt stack 0
   703  00BFF0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   704  00BFF2  6EF8               	movwf	tblptru,c
   705  00BFF4  0100               	movlb	0
   706  00BFF6  EFBE  F060         	goto	_main	;jump to C main() function
   707                           tblptru	equ	0xFF8
   708                           tblptrh	equ	0xFF7
   709                           tblptrl	equ	0xFF6
   710                           tablat	equ	0xFF5
   711                           postinc0	equ	0xFEE
   712                           wreg	equ	0xFE8
   713                           postdec1	equ	0xFE5
   714                           fsr1l	equ	0xFE1
   715                           
   716                           	psect	bssBANK0
   717  00009C                     __pbssBANK0:
   718                           	opt stack 0
   719  00009C                     _RtccTimeDate:
   720                           	opt stack 0
   721  00009C                     	ds	8
   722  0000A4                     _RtccTimeVal:
   723                           	opt stack 0
   724  0000A4                     	ds	4
   725  0000A8                     _aux_fecha:
   726                           	opt stack 0
   727  0000A8                     	ds	2
   728  0000AA                     _aux_hora:
   729                           	opt stack 0
   730  0000AA                     	ds	2
   731  0000AC                     _columna:
   732                           	opt stack 0
   733  0000AC                     	ds	2
   734  0000AE                     _config:
   735                           	opt stack 0
   736  0000AE                     	ds	2
   737  0000B0                     _estacion:
   738                           	opt stack 0
   739  0000B0                     	ds	2
   740  0000B2                     _fila:
   741                           	opt stack 0
   742  0000B2                     	ds	2
   743  0000B4                     _minuto_vdr_c:
   744                           	opt stack 0
   745  0000B4                     	ds	2
   746  0000B6                     _segundo:
   747                           	opt stack 0
   748  0000B6                     	ds	2
   749  0000B8                     _lectura:
   750                           	opt stack 0
   751  0000B8                     	ds	1
   752  0000B9                     _buffer1:
   753                           	opt stack 0
   754  0000B9                     	ds	20
   755  0000CD                     _RtccDate:
   756                           	opt stack 0
   757  0000CD                     	ds	4
   758  0000D1                     _RtccTime:
   759                           	opt stack 0
   760  0000D1                     	ds	4
   761  0000D5                     _lectura_temp:
   762                           	opt stack 0
   763  0000D5                     	ds	1
   764                           tblptru	equ	0xFF8
   765                           tblptrh	equ	0xFF7
   766                           tblptrl	equ	0xFF6
   767                           tablat	equ	0xFF5
   768                           postinc0	equ	0xFEE
   769                           wreg	equ	0xFE8
   770                           postdec1	equ	0xFE5
   771                           fsr1l	equ	0xFE1
   772                           
   773                           	psect	dataBANK0
   774  0000D6                     __pdataBANK0:
   775                           	opt stack 0
   776  0000D6                     _grados:
   777                           	opt stack 0
   778  0000D6                     	ds	3
   779  0000D9                     _anio:
   780                           	opt stack 0
   781  0000D9                     	ds	2
   782  0000DB                     _dia:
   783                           	opt stack 0
   784  0000DB                     	ds	2
   785  0000DD                     _diasem:
   786                           	opt stack 0
   787  0000DD                     	ds	2
   788  0000DF                     _hora:
   789                           	opt stack 0
   790  0000DF                     	ds	2
   791  0000E1                     _hora_vdr_a:
   792                           	opt stack 0
   793  0000E1                     	ds	2
   794  0000E3                     _hora_vdr_c:
   795                           	opt stack 0
   796  0000E3                     	ds	2
   797  0000E5                     _mes:
   798                           	opt stack 0
   799  0000E5                     	ds	2
   800  0000E7                     _minuto:
   801                           	opt stack 0
   802  0000E7                     	ds	2
   803  0000E9                     _minuto_vdr_a:
   804                           	opt stack 0
   805  0000E9                     	ds	2
   806  0000EB                     _temperatura:
   807                           	opt stack 0
   808  0000EB                     	ds	2
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           postdec1	equ	0xFE5
   816                           fsr1l	equ	0xFE1
   817                           
   818                           	psect	bssBANK1
   819  000100                     __pbssBANK1:
   820                           	opt stack 0
   821  000100                     _RtccAlrmTimeDate:
   822                           	opt stack 0
   823  000100                     	ds	8
   824  000108                     _Rtcc_read_TimeDate:
   825                           	opt stack 0
   826  000108                     	ds	8
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           postdec1	equ	0xFE5
   834                           fsr1l	equ	0xFE1
   835                           
   836                           	psect	cstackBANK0
   837  000060                     __pcstackBANK0:
   838                           	opt stack 0
   839  000060                     _sprintf$2567:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x0
   843  000060                     	ds	3
   844  000063                     sprintf@cp:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x3
   848  000063                     	ds	2
   849  000065                     sprintf@ap:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x5
   853  000065                     	ds	2
   854  000067                     sprintf@len:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x7
   858  000067                     	ds	2
   859  000069                     sprintf@val:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x9
   863  000069                     	ds	4
   864  00006D                     sprintf@tmpval:
   865                           	opt stack 0
   866                           
   867                           ; 4 bytes @ 0xD
   868  00006D                     	ds	4
   869  000071                     sprintf@exp:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x11
   873  000071                     	ds	2
   874  000073                     sprintf@flag:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x13
   878  000073                     	ds	2
   879  000075                     sprintf@fval:
   880                           	opt stack 0
   881                           
   882                           ; 3 bytes @ 0x15
   883  000075                     	ds	3
   884  000078                     sprintf@width:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x18
   888  000078                     	ds	2
   889  00007A                     sprintf@prec:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x1A
   893  00007A                     	ds	2
   894  00007C                     sprintf@c:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x1C
   898  00007C                     	ds	1
   899  00007D                     Seleccionar_Dato@dato:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x1D
   903  00007D                     	ds	2
   904  00007F                     Configurar_Fecha@opcion:
   905                           	opt stack 0
   906  00007F                     Configurar_Hora@opcion:
   907                           	opt stack 0
   908  00007F                     Programar_Temperatura@estado:
   909                           	opt stack 0
   910  00007F                     Configurar_Hora_Grl@opcion:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x1F
   914  00007F                     	ds	2
   915  000081                     Configurar_Fecha@aux_fecha:
   916                           	opt stack 0
   917  000081                     Configurar_Hora@aux_hora:
   918                           	opt stack 0
   919  000081                     Configurar_Hora_Grl@aux_hora:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x21
   923  000081                     	ds	2
   924  000083                     Configurar_Fecha@inicio:
   925                           	opt stack 0
   926  000083                     Configurar_Hora@inicio:
   927                           	opt stack 0
   928  000083                     Configurar_Hora_Grl@fila_i:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x23
   932  000083                     	ds	2
   933  000085                     Configurar_Fecha@limite:
   934                           	opt stack 0
   935  000085                     Configurar_Hora@limite:
   936                           	opt stack 0
   937  000085                     Configurar_Hora_Grl@columna_i:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x25
   941  000085                     	ds	2
   942  000087                     Configurar_Fecha@inicio_1188:
   943                           	opt stack 0
   944  000087                     Configurar_Hora@inicio_1204:
   945                           	opt stack 0
   946  000087                     Configurar_Hora_Grl@tipo_hora:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x27
   950  000087                     	ds	2
   951  000089                     Configurar_Fecha@limite_1189:
   952                           	opt stack 0
   953  000089                     Configurar_Hora@limite_1205:
   954                           	opt stack 0
   955  000089                     Configurar_Hora_Grl@estado:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x29
   959  000089                     	ds	2
   960  00008B                     Configurar_Fecha@inicio_1192:
   961                           	opt stack 0
   962  00008B                     Configurar_Hora@estado:
   963                           	opt stack 0
   964  00008B                     Configurar_Hora_Grl@config_hora:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x2B
   968  00008B                     	ds	2
   969  00008D                     Configurar_Fecha@limite_1193:
   970                           	opt stack 0
   971  00008D                     Configurar_Hora@estado_1203:
   972                           	opt stack 0
   973  00008D                     Configurar_Hora_Grl@estado_1256:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x2D
   977  00008D                     	ds	2
   978  00008F                     Configurar_Fecha@estado:
   979                           	opt stack 0
   980  00008F                     Configurar_Hora@config_hora:
   981                           	opt stack 0
   982  00008F                     Configurar_Hora_Grl@inicio:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x2F
   986  00008F                     	ds	2
   987  000091                     Configurar_Fecha@estado_1191:
   988                           	opt stack 0
   989  000091                     Configurar_Hora_Grl@limite:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x31
   993  000091                     	ds	2
   994  000093                     Configurar_Fecha@estado_1187:
   995                           	opt stack 0
   996  000093                     Configurar_Hora_Grl@inicio_1257:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x33
  1000  000093                     	ds	2
  1001  000095                     Configurar_Fecha@config_fecha:
  1002                           	opt stack 0
  1003  000095                     Configurar_Hora_Grl@limite_1258:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x35
  1007  000095                     	ds	2
  1008  000097                     Configurar_Pantalla@tipo_hora:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x37
  1012  000097                     	ds	2
  1013  000099                     Configurar_Pantalla@tipo_hora_1171:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x39
  1017  000099                     	ds	2
  1018  00009B                     ??_main:
  1019                           
  1020                           ; 0 bytes @ 0x3B
  1021  00009B                     	ds	1
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           
  1031                           	psect	cstackCOMRAM
  1032  000001                     __pcstackCOMRAM:
  1033                           	opt stack 0
  1034  000001                     ??_Lcd_Cmd:
  1035  000001                     ??_Lcd_Chr_CP:
  1036  000001                     ??_Encender_vidriera:
  1037  000001                     ??_isdigit:
  1038  000001                     ?___awmod:
  1039                           	opt stack 0
  1040  000001                     ?___ftpack:
  1041                           	opt stack 0
  1042  000001                     ?___ftneg:
  1043                           	opt stack 0
  1044  000001                     ?__tdiv_to_l_:
  1045                           	opt stack 0
  1046  000001                     ?__div_to_l_:
  1047                           	opt stack 0
  1048  000001                     ?___lldiv:
  1049                           	opt stack 0
  1050  000001                     RtccReadDate@pDt:
  1051                           	opt stack 0
  1052  000001                     RtccReadTime@pTm:
  1053                           	opt stack 0
  1054  000001                     RtccWriteDate@pDt:
  1055                           	opt stack 0
  1056  000001                     RtccWriteTime@pTm:
  1057                           	opt stack 0
  1058  000001                     ___awmod@dividend:
  1059                           	opt stack 0
  1060  000001                     __div_to_l_@f1:
  1061                           	opt stack 0
  1062  000001                     ___ftpack@arg:
  1063                           	opt stack 0
  1064  000001                     __tdiv_to_l_@f1:
  1065                           	opt stack 0
  1066  000001                     ___ftneg@f1:
  1067                           	opt stack 0
  1068  000001                     ___lldiv@dividend:
  1069                           	opt stack 0
  1070                           
  1071                           ; 4 bytes @ 0x0
  1072  000001                     	ds	1
  1073  000002                     _isdigit$2330:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x1
  1077  000002                     	ds	1
  1078  000003                     Lcd_Chr_CP@data:
  1079                           	opt stack 0
  1080  000003                     Lcd_Cmd@data:
  1081                           	opt stack 0
  1082  000003                     RtccWriteDate@di:
  1083                           	opt stack 0
  1084  000003                     RtccWriteTime@di:
  1085                           	opt stack 0
  1086  000003                     isdigit@c:
  1087                           	opt stack 0
  1088  000003                     ___awmod@divisor:
  1089                           	opt stack 0
  1090  000003                     RtccReadDate@rTD1:
  1091                           	opt stack 0
  1092  000003                     RtccReadTime@rTD1:
  1093                           	opt stack 0
  1094                           
  1095                           ; 8 bytes @ 0x2
  1096  000003                     	ds	1
  1097  000004                     ??_Lcd_Init:
  1098  000004                     Lcd_Out@x:
  1099                           	opt stack 0
  1100  000004                     ___ftpack@exp:
  1101                           	opt stack 0
  1102  000004                     __div_to_l_@f2:
  1103                           	opt stack 0
  1104  000004                     __tdiv_to_l_@f2:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x3
  1108  000004                     	ds	1
  1109  000005                     Lcd_Init@data:
  1110                           	opt stack 0
  1111  000005                     RtccWriteDate@wasOn:
  1112                           	opt stack 0
  1113  000005                     RtccWriteTime@wasOn:
  1114                           	opt stack 0
  1115  000005                     ___awmod@counter:
  1116                           	opt stack 0
  1117  000005                     ___ftpack@sign:
  1118                           	opt stack 0
  1119  000005                     Lcd_Out@buffer:
  1120                           	opt stack 0
  1121  000005                     ___lldiv@divisor:
  1122                           	opt stack 0
  1123                           
  1124                           ; 4 bytes @ 0x4
  1125  000005                     	ds	1
  1126  000006                     ??___ftpack:
  1127  000006                     RtccWriteDate@wasAlrm:
  1128                           	opt stack 0
  1129  000006                     RtccWriteTime@wasAlrm:
  1130                           	opt stack 0
  1131  000006                     ___awmod@sign:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x5
  1135  000006                     	ds	1
  1136  000007                     ??__tdiv_to_l_:
  1137  000007                     ?___awdiv:
  1138                           	opt stack 0
  1139  000007                     Lcd_Out@y:
  1140                           	opt stack 0
  1141  000007                     RtccWriteTime@wasWrEn:
  1142                           	opt stack 0
  1143  000007                     RtccWriteDate@tempYear:
  1144                           	opt stack 0
  1145  000007                     ___awdiv@dividend:
  1146                           	opt stack 0
  1147  000007                     __div_to_l_@quot:
  1148                           	opt stack 0
  1149                           
  1150                           ; 4 bytes @ 0x6
  1151  000007                     	ds	1
  1152  000008                     Lcd_Out@data:
  1153                           	opt stack 0
  1154  000008                     RtccWriteTime@tempMinSec:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x7
  1158  000008                     	ds	1
  1159  000009                     ?___awtoft:
  1160                           	opt stack 0
  1161  000009                     ?___lbtoft:
  1162                           	opt stack 0
  1163  000009                     ?___lltoft:
  1164                           	opt stack 0
  1165  000009                     RtccWriteDate@wasWrEn:
  1166                           	opt stack 0
  1167  000009                     ___awdiv@divisor:
  1168                           	opt stack 0
  1169  000009                     ___awtoft@c:
  1170                           	opt stack 0
  1171  000009                     ___lldiv@quotient:
  1172                           	opt stack 0
  1173  000009                     ___lltoft@c:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x8
  1177  000009                     	ds	1
  1178  00000A                     RtccWriteDate@tempDayMonth:
  1179                           	opt stack 0
  1180  00000A                     RtccWriteTime@tempHourWDay:
  1181                           	opt stack 0
  1182  00000A                     __tdiv_to_l_@quot:
  1183                           	opt stack 0
  1184                           
  1185                           ; 4 bytes @ 0x9
  1186  00000A                     	ds	1
  1187  00000B                     ___awdiv@counter:
  1188                           	opt stack 0
  1189  00000B                     __div_to_l_@cntr:
  1190                           	opt stack 0
  1191  00000B                     RtccReadDate@rTD0:
  1192                           	opt stack 0
  1193  00000B                     RtccReadTime@rTD0:
  1194                           	opt stack 0
  1195                           
  1196                           ; 8 bytes @ 0xA
  1197  00000B                     	ds	1
  1198  00000C                     ___awdiv@sign:
  1199                           	opt stack 0
  1200  00000C                     ___awtoft@sign:
  1201                           	opt stack 0
  1202  00000C                     __div_to_l_@exp1:
  1203                           	opt stack 0
  1204  00000C                     ___lbtoft@c:
  1205                           	opt stack 0
  1206  00000C                     RtccWriteDate@tempHourWDay:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0xB
  1210  00000C                     	ds	1
  1211  00000D                     ??___lltoft:
  1212  00000D                     ___lldiv@counter:
  1213                           	opt stack 0
  1214  00000D                     ___awdiv@quotient:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0xC
  1218  00000D                     	ds	1
  1219  00000E                     ?___llmod:
  1220                           	opt stack 0
  1221  00000E                     __tdiv_to_l_@cntr:
  1222                           	opt stack 0
  1223  00000E                     ___llmod@dividend:
  1224                           	opt stack 0
  1225                           
  1226                           ; 4 bytes @ 0xD
  1227  00000E                     	ds	1
  1228  00000F                     ?___wmul:
  1229                           	opt stack 0
  1230  00000F                     __tdiv_to_l_@exp1:
  1231                           	opt stack 0
  1232  00000F                     ___wmul@multiplier:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0xE
  1236  00000F                     	ds	2
  1237  000011                     ___lltoft@exp:
  1238                           	opt stack 0
  1239  000011                     ___wmul@multiplicand:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x10
  1243  000011                     	ds	1
  1244  000012                     ___llmod@divisor:
  1245                           	opt stack 0
  1246                           
  1247                           ; 4 bytes @ 0x11
  1248  000012                     	ds	1
  1249  000013                     ___wmul@product:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x12
  1253  000013                     	ds	2
  1254  000015                     ?___ftmul:
  1255                           	opt stack 0
  1256  000015                     ___ftmul@f1:
  1257                           	opt stack 0
  1258                           
  1259                           ; 3 bytes @ 0x14
  1260  000015                     	ds	1
  1261  000016                     ___llmod@counter:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x15
  1265  000016                     	ds	2
  1266  000018                     ___ftmul@f2:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0x17
  1270  000018                     	ds	3
  1271  00001B                     ??___ftmul:
  1272                           
  1273                           ; 0 bytes @ 0x1A
  1274  00001B                     	ds	3
  1275  00001E                     ___ftmul@exp:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0x1D
  1279  00001E                     	ds	1
  1280  00001F                     ___ftmul@f3_as_product:
  1281                           	opt stack 0
  1282                           
  1283                           ; 3 bytes @ 0x1E
  1284  00001F                     	ds	3
  1285  000022                     ___ftmul@cntr:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x21
  1289  000022                     	ds	1
  1290  000023                     ___ftmul@sign:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x22
  1294  000023                     	ds	1
  1295  000024                     ?_fround:
  1296                           	opt stack 0
  1297  000024                     ?_scale:
  1298                           	opt stack 0
  1299                           
  1300                           ; 3 bytes @ 0x23
  1301  000024                     	ds	3
  1302  000027                     _fround$2565:
  1303                           	opt stack 0
  1304  000027                     _scale$2566:
  1305                           	opt stack 0
  1306                           
  1307                           ; 3 bytes @ 0x26
  1308  000027                     	ds	3
  1309  00002A                     scale@scl:
  1310                           	opt stack 0
  1311  00002A                     _fround$2564:
  1312                           	opt stack 0
  1313                           
  1314                           ; 3 bytes @ 0x29
  1315  00002A                     	ds	1
  1316  00002B                     ?___fttol:
  1317                           	opt stack 0
  1318  00002B                     ___fttol@f1:
  1319                           	opt stack 0
  1320                           
  1321                           ; 3 bytes @ 0x2A
  1322  00002B                     	ds	2
  1323  00002D                     fround@prec:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x2C
  1327  00002D                     	ds	1
  1328  00002E                     ?___ftadd:
  1329                           	opt stack 0
  1330  00002E                     ___ftadd@f1:
  1331                           	opt stack 0
  1332                           
  1333                           ; 3 bytes @ 0x2D
  1334  00002E                     	ds	1
  1335  00002F                     ??___fttol:
  1336                           
  1337                           ; 0 bytes @ 0x2E
  1338  00002F                     	ds	2
  1339  000031                     ___ftadd@f2:
  1340                           	opt stack 0
  1341                           
  1342                           ; 3 bytes @ 0x30
  1343  000031                     	ds	3
  1344  000034                     ??___ftadd:
  1345  000034                     ___fttol@sign1:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x33
  1349  000034                     	ds	1
  1350  000035                     ___fttol@lval:
  1351                           	opt stack 0
  1352                           
  1353                           ; 4 bytes @ 0x34
  1354  000035                     	ds	2
  1355  000037                     ___ftadd@sign:
  1356                           	opt stack 0
  1357                           
  1358                           ; 1 bytes @ 0x36
  1359  000037                     	ds	1
  1360  000038                     ___ftadd@exp2:
  1361                           	opt stack 0
  1362                           
  1363                           ; 1 bytes @ 0x37
  1364  000038                     	ds	1
  1365  000039                     ___ftadd@exp1:
  1366                           	opt stack 0
  1367  000039                     ___fttol@exp1:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x38
  1371  000039                     	ds	1
  1372  00003A                     ?___ftsub:
  1373                           	opt stack 0
  1374  00003A                     ___ftge@ff1:
  1375                           	opt stack 0
  1376  00003A                     ___ftsub@f1:
  1377                           	opt stack 0
  1378                           
  1379                           ; 3 bytes @ 0x39
  1380  00003A                     	ds	3
  1381  00003D                     ___ftge@ff2:
  1382                           	opt stack 0
  1383  00003D                     ___ftsub@f2:
  1384                           	opt stack 0
  1385                           
  1386                           ; 3 bytes @ 0x3C
  1387  00003D                     	ds	3
  1388  000040                     ??___ftge:
  1389                           
  1390                           ; 0 bytes @ 0x3F
  1391  000040                     	ds	3
  1392  000043                     ?_sprintf:
  1393                           	opt stack 0
  1394  000043                     sprintf@sp:
  1395                           	opt stack 0
  1396  000043                     Encender_Aire_Calefaccion@aux_temp:
  1397                           	opt stack 0
  1398                           
  1399                           ; 3 bytes @ 0x42
  1400  000043                     	ds	2
  1401  000045                     sprintf@f:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x44
  1405  000045                     	ds	1
  1406  000046                     Actualiza_datos@i:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x45
  1410  000046                     	ds	9
  1411  00004F                     ??_sprintf:
  1412                           
  1413                           ; 0 bytes @ 0x4E
  1414  00004F                     	ds	6
  1415  000055                     ??_Conseguir_Dia:
  1416  000055                     ?_Seleccionar_Dato:
  1417                           	opt stack 0
  1418  000055                     Mostrar_DiaYfecha@fila:
  1419                           	opt stack 0
  1420  000055                     Seleccionar_Dato@datos:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x54
  1424  000055                     	ds	2
  1425  000057                     Mostrar_DiaYfecha@columna:
  1426                           	opt stack 0
  1427  000057                     Configurar_Dia@estado:
  1428                           	opt stack 0
  1429  000057                     Seleccionar_Dato@fila:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x56
  1433  000057                     	ds	2
  1434  000059                     ??_Mostrar_DiaYfecha:
  1435  000059                     Seleccionar_Dato@columna:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x58
  1439  000059                     	ds	2
  1440  00005B                     Seleccionar_Dato@inicio:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x5A
  1444  00005B                     	ds	2
  1445  00005D                     Seleccionar_Dato@limite:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x5C
  1449  00005D                     	ds	2
  1450  00005F                     ??_Seleccionar_Dato:
  1451                           
  1452                           ; 0 bytes @ 0x5E
  1453  00005F                     	ds	1
  1454  000060                     tblptru	equ	0xFF8
  1455                           tblptrh	equ	0xFF7
  1456                           tblptrl	equ	0xFF6
  1457                           tablat	equ	0xFF5
  1458                           postinc0	equ	0xFEE
  1459                           wreg	equ	0xFE8
  1460                           postdec1	equ	0xFE5
  1461                           fsr1l	equ	0xFE1
  1462                           
  1463                           ; 0 bytes @ 0x5F
  1464 ;;
  1465 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1466 ;;
  1467 ;; *************** function _main *****************
  1468 ;; Defined at:
  1469 ;;		line 142 in file "../monografia_main.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;		None               void
  1476 ;; Registers used:
  1477 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels required when called:    7
  1489 ;; This function calls:
  1490 ;;		_Configurar_Pantalla
  1491 ;;		_Iniciar_Display
  1492 ;;		_Lcd_Cmd
  1493 ;;		_Lcd_Init
  1494 ;;		_Write_RTC
  1495 ;; This function is called by:
  1496 ;;		Startup code after reset
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text0
  1501  00C17C                     __ptext0:
  1502                           	opt stack 0
  1503  00C17C                     _main:
  1504                           	opt stack 24
  1505                           
  1506                           ;monografia_main.c: 144: OSCTUNEbits.INTSRC=1;
  1507                           
  1508                           ;incstack = 0
  1509  00C17C  8E9B               	bsf	3995,7,c	;volatile
  1510                           
  1511                           ;monografia_main.c: 145: OSCTUNEbits.PLLEN=0;
  1512  00C17E  9C9B               	bcf	3995,6,c	;volatile
  1513                           
  1514                           ;monografia_main.c: 146: OSCCONbits.IRCF0=1;
  1515  00C180  88D3               	bsf	4051,4,c	;volatile
  1516                           
  1517                           ;monografia_main.c: 147: OSCCONbits.IRCF1=1;
  1518  00C182  8AD3               	bsf	4051,5,c	;volatile
  1519                           
  1520                           ;monografia_main.c: 148: OSCCONbits.IRCF2=1;
  1521  00C184  8CD3               	bsf	4051,6,c	;volatile
  1522                           
  1523                           ;monografia_main.c: 149: OSCCONbits.SCS0=0;
  1524  00C186  90D3               	bcf	4051,0,c	;volatile
  1525                           
  1526                           ;monografia_main.c: 150: OSCCONbits.SCS1=0;
  1527  00C188  92D3               	bcf	4051,1,c	;volatile
  1528                           
  1529                           ;monografia_main.c: 152: RTCCFGbits.RTCEN=1;
  1530  00C18A  010F               	movlb	15	; () banked
  1531  00C18C  8F3F               	bsf	63,7,b	;volatile
  1532                           
  1533                           ;monografia_main.c: 153: RTCCFGbits.RTCWREN=1;
  1534  00C18E  010F               	movlb	15	; () banked
  1535  00C190  8B3F               	bsf	63,5,b	;volatile
  1536                           
  1537                           ;monografia_main.c: 154: T1CONbits.T1OSCEN=1;
  1538  00C192  86CD               	bsf	4045,3,c	;volatile
  1539                           
  1540                           ; BSR set to: 15
  1541                           ;monografia_main.c: 156: TRISA = 0b01111111;
  1542  00C194  0E7F               	movlw	127
  1543  00C196  6E92               	movwf	3986,c	;volatile
  1544                           
  1545                           ;monografia_main.c: 157: TRISB = 0;
  1546  00C198  0E00               	movlw	0
  1547  00C19A  6E93               	movwf	3987,c	;volatile
  1548                           
  1549                           ;monografia_main.c: 158: TRISC = 0b11111110;
  1550  00C19C  0EFE               	movlw	254
  1551  00C19E  6E94               	movwf	3988,c	;volatile
  1552                           
  1553                           ; BSR set to: 15
  1554                           ;monografia_main.c: 159: ANCON0 = 0b11111111;
  1555  00C1A0  010F               	movlb	15	; () banked
  1556  00C1A2  6948               	setf	72,b	;volatile
  1557                           
  1558                           ;monografia_main.c: 160: ANCON1 = 0b11110111;
  1559  00C1A4  0EF7               	movlw	247
  1560  00C1A6  010F               	movlb	15	; () banked
  1561  00C1A8  6F49               	movwf	73,b	;volatile
  1562                           
  1563                           ;monografia_main.c: 161: ADCON0 = 0b00101111;
  1564  00C1AA  0E2F               	movlw	47
  1565  00C1AC  6EC2               	movwf	4034,c	;volatile
  1566                           
  1567                           ;monografia_main.c: 162: ADCON1 = 0b00111001;
  1568  00C1AE  0E39               	movlw	57
  1569  00C1B0  6EC1               	movwf	4033,c	;volatile
  1570                           
  1571                           ; BSR set to: 15
  1572                           ;monografia_main.c: 164: Write_RTC();
  1573  00C1B2  EC78  F06D         	call	_Write_RTC	;wreg free
  1574                           
  1575                           ;monografia_main.c: 165: Lcd_Init();
  1576  00C1B6  ECB3  F067         	call	_Lcd_Init	;wreg free
  1577                           
  1578                           ;monografia_main.c: 166: Lcd_Cmd(1);
  1579  00C1BA  0E01               	movlw	1
  1580  00C1BC  EC92  F066         	call	_Lcd_Cmd
  1581                           
  1582                           ;monografia_main.c: 167: Lcd_Cmd(12);
  1583  00C1C0  0E0C               	movlw	12
  1584  00C1C2  EC92  F066         	call	_Lcd_Cmd
  1585                           
  1586                           ;monografia_main.c: 168: config =0;
  1587  00C1C6  0E00               	movlw	0
  1588  00C1C8  0100               	movlb	0	; () banked
  1589  00C1CA  6FAF               	movwf	(_config+1)& (0+255),b
  1590  00C1CC  0E00               	movlw	0
  1591  00C1CE  6FAE               	movwf	_config& (0+255),b
  1592  00C1D0  D000               	goto	l5426
  1593  00C1D2                     l5426:
  1594                           
  1595                           ;monografia_main.c: 172: if(config == 0){
  1596  00C1D2  0100               	movlb	0	; () banked
  1597  00C1D4  51AE               	movf	_config& (0+255),w,b
  1598  00C1D6  0100               	movlb	0	; () banked
  1599  00C1D8  11AF               	iorwf	(_config+1)& (0+255),w,b
  1600  00C1DA  B4D8               	btfsc	status,2,c
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;monografia_main.c: 173: Iniciar_Display();
  1604  00C1DC  ECF5  F06B         	call	_Iniciar_Display	;wreg free
  1605                           
  1606                           ;monografia_main.c: 174: }
  1607                           ;monografia_main.c: 175: Configurar_Pantalla();
  1608  00C1E0  EC8C  F071         	call	_Configurar_Pantalla	;wreg free
  1609                           
  1610                           ;monografia_main.c: 176: _delay((unsigned long)((100)*(4000000/4000.0)));
  1611  00C1E4  0E82               	movlw	130
  1612  00C1E6  0100               	movlb	0	; () banked
  1613  00C1E8  6F9B               	movwf	??_main& (0+255),b
  1614  00C1EA  0EDE               	movlw	222
  1615  00C1EC                     u6377:
  1616  00C1EC  2EE8               	decfsz	wreg,f,c
  1617  00C1EE  D7FE               	goto	u6377
  1618  00C1F0  2F9B               	decfsz	??_main& (0+255),f,b
  1619  00C1F2  D7FC               	goto	u6377
  1620  00C1F4  D7EE               	goto	l5426
  1621  00C1F6  EF00  F000         	goto	start
  1622  00C1FA                     __end_of_main:
  1623                           	opt stack 0
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1l	equ	0xFE1
  1632                           status	equ	0xFD8
  1633                           
  1634 ;; *************** function _Lcd_Init *****************
  1635 ;; Defined at:
  1636 ;;		line 42 in file "../lcd.h"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  data            1    4[COMRAM] unsigned char 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;		None               void
  1643 ;; Registers used:
  1644 ;;		wreg, status,2, status,0, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1652 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1653 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1654 ;;Total ram usage:        2 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    1
  1657 ;; This function calls:
  1658 ;;		_Lcd_Cmd
  1659 ;; This function is called by:
  1660 ;;		_main
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text1
  1665  00CF66                     __ptext1:
  1666                           	opt stack 0
  1667  00CF66                     _Lcd_Init:
  1668                           	opt stack 29
  1669                           
  1670                           ;lcd.h: 43: unsigned char data;
  1671                           ;lcd.h: 44: TRISBbits.TRISB0 = 0;
  1672                           
  1673                           ;incstack = 0
  1674  00CF66  9093               	bcf	3987,0,c	;volatile
  1675                           
  1676                           ;lcd.h: 45: TRISBbits.TRISB1 = 0;
  1677  00CF68  9293               	bcf	3987,1,c	;volatile
  1678                           
  1679                           ;lcd.h: 46: TRISBbits.TRISB2 = 0;
  1680  00CF6A  9493               	bcf	3987,2,c	;volatile
  1681                           
  1682                           ;lcd.h: 47: TRISBbits.TRISB3 = 0;
  1683  00CF6C  9693               	bcf	3987,3,c	;volatile
  1684                           
  1685                           ;lcd.h: 48: TRISBbits.TRISB4 = 0;
  1686  00CF6E  9893               	bcf	3987,4,c	;volatile
  1687                           
  1688                           ;lcd.h: 49: TRISBbits.TRISB5 = 0;
  1689  00CF70  9A93               	bcf	3987,5,c	;volatile
  1690                           
  1691                           ;lcd.h: 50: LATBbits.LATB0 = 0;
  1692  00CF72  908A               	bcf	3978,0,c	;volatile
  1693                           
  1694                           ;lcd.h: 51: LATBbits.LATB1 = 0;
  1695  00CF74  928A               	bcf	3978,1,c	;volatile
  1696                           
  1697                           ;lcd.h: 52: LATBbits.LATB2 = 0;
  1698  00CF76  948A               	bcf	3978,2,c	;volatile
  1699                           
  1700                           ;lcd.h: 53: LATBbits.LATB3 = 0;
  1701  00CF78  968A               	bcf	3978,3,c	;volatile
  1702                           
  1703                           ;lcd.h: 54: LATBbits.LATB4 = 0;
  1704  00CF7A  988A               	bcf	3978,4,c	;volatile
  1705                           
  1706                           ;lcd.h: 55: LATBbits.LATB5 = 0;
  1707  00CF7C  9A8A               	bcf	3978,5,c	;volatile
  1708                           
  1709                           ;lcd.h: 56: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  1710  00CF7E  0E08               	movlw	8
  1711  00CF80  6E04               	movwf	??_Lcd_Init& (0+255),c
  1712  00CF82  0E23               	movlw	35
  1713  00CF84                     u6387:
  1714  00CF84  2EE8               	decfsz	wreg,f,c
  1715  00CF86  D7FE               	goto	u6387
  1716  00CF88  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1717  00CF8A  D7FC               	goto	u6387
  1718  00CF8C  F000               	nop	
  1719                           
  1720                           ;lcd.h: 57: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  1721  00CF8E  0E08               	movlw	8
  1722  00CF90  6E04               	movwf	??_Lcd_Init& (0+255),c
  1723  00CF92  0E23               	movlw	35
  1724  00CF94                     u6397:
  1725  00CF94  2EE8               	decfsz	wreg,f,c
  1726  00CF96  D7FE               	goto	u6397
  1727  00CF98  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1728  00CF9A  D7FC               	goto	u6397
  1729  00CF9C  F000               	nop	
  1730                           
  1731                           ;lcd.h: 58: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  1732  00CF9E  0E08               	movlw	8
  1733  00CFA0  6E04               	movwf	??_Lcd_Init& (0+255),c
  1734  00CFA2  0E23               	movlw	35
  1735  00CFA4                     u6407:
  1736  00CFA4  2EE8               	decfsz	wreg,f,c
  1737  00CFA6  D7FE               	goto	u6407
  1738  00CFA8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1739  00CFAA  D7FC               	goto	u6407
  1740  00CFAC  F000               	nop	
  1741                           
  1742                           ;lcd.h: 59: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  1743  00CFAE  0E08               	movlw	8
  1744  00CFB0  6E04               	movwf	??_Lcd_Init& (0+255),c
  1745  00CFB2  0E23               	movlw	35
  1746  00CFB4                     u6417:
  1747  00CFB4  2EE8               	decfsz	wreg,f,c
  1748  00CFB6  D7FE               	goto	u6417
  1749  00CFB8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1750  00CFBA  D7FC               	goto	u6417
  1751  00CFBC  F000               	nop	
  1752                           
  1753                           ;lcd.h: 60: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  1754  00CFBE  0E08               	movlw	8
  1755  00CFC0  6E04               	movwf	??_Lcd_Init& (0+255),c
  1756  00CFC2  0E23               	movlw	35
  1757  00CFC4                     u6427:
  1758  00CFC4  2EE8               	decfsz	wreg,f,c
  1759  00CFC6  D7FE               	goto	u6427
  1760  00CFC8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1761  00CFCA  D7FC               	goto	u6427
  1762  00CFCC  F000               	nop	
  1763                           
  1764                           ;lcd.h: 61: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  1765  00CFCE  0E08               	movlw	8
  1766  00CFD0  6E04               	movwf	??_Lcd_Init& (0+255),c
  1767  00CFD2  0E23               	movlw	35
  1768  00CFD4                     u6437:
  1769  00CFD4  2EE8               	decfsz	wreg,f,c
  1770  00CFD6  D7FE               	goto	u6437
  1771  00CFD8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1772  00CFDA  D7FC               	goto	u6437
  1773  00CFDC  F000               	nop	
  1774                           
  1775                           ;lcd.h: 62: for(data = 1; data < 4; data ++)
  1776  00CFDE  0E01               	movlw	1
  1777  00CFE0  6E05               	movwf	Lcd_Init@data,c
  1778  00CFE2  D01F               	goto	L1
  1779  00CFE4  D021               	goto	l96
  1780  00CFE6                     l95:
  1781                           
  1782                           ;lcd.h: 63: {
  1783                           ;lcd.h: 64: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  1784  00CFE6  908A               	bcf	3978,0,c	;volatile
  1785  00CFE8  928A               	bcf	3978,1,c	;volatile
  1786  00CFEA  848A               	bsf	3978,2,c	;volatile
  1787  00CFEC  868A               	bsf	3978,3,c	;volatile
  1788  00CFEE  988A               	bcf	3978,4,c	;volatile
  1789                           
  1790                           ;lcd.h: 65: LATBbits.LATB5 = 0; LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 =
      +                           1; LATBbits.LATB3 = 1;
  1791  00CFF0  9A8A               	bcf	3978,5,c	;volatile
  1792  00CFF2  908A               	bcf	3978,0,c	;volatile
  1793  00CFF4  928A               	bcf	3978,1,c	;volatile
  1794  00CFF6  848A               	bsf	3978,2,c	;volatile
  1795  00CFF8  868A               	bsf	3978,3,c	;volatile
  1796                           
  1797                           ;lcd.h: 66: LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  1798  00CFFA  888A               	bsf	3978,4,c	;volatile
  1799  00CFFC  9A8A               	bcf	3978,5,c	;volatile
  1800                           
  1801                           ;lcd.h: 67: _delay((unsigned long)((5)*(4000000/4000000.0)));
  1802  00CFFE  F000               	nop	
  1803  00D000  D000               	nop2		;2 cycle nop
  1804  00D002  D000               	nop2		;2 cycle nop
  1805                           
  1806                           ;lcd.h: 68: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  1807  00D004  908A               	bcf	3978,0,c	;volatile
  1808  00D006  928A               	bcf	3978,1,c	;volatile
  1809  00D008  848A               	bsf	3978,2,c	;volatile
  1810  00D00A  868A               	bsf	3978,3,c	;volatile
  1811  00D00C  988A               	bcf	3978,4,c	;volatile
  1812                           
  1813                           ;lcd.h: 69: LATBbits.LATB5 = 0;
  1814  00D00E  9A8A               	bcf	3978,5,c	;volatile
  1815                           
  1816                           ;lcd.h: 70: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  1817  00D010  0E08               	movlw	8
  1818  00D012  6E04               	movwf	??_Lcd_Init& (0+255),c
  1819  00D014  0E23               	movlw	35
  1820  00D016                     u6447:
  1821  00D016  2EE8               	decfsz	wreg,f,c
  1822  00D018  D7FE               	goto	u6447
  1823  00D01A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1824  00D01C  D7FC               	goto	u6447
  1825  00D01E  F000               	nop	
  1826  00D020  2A05               	incf	Lcd_Init@data,f,c
  1827  00D022                     L1:
  1828  00D022  0E03               	movlw	3
  1829  00D024  6405               	cpfsgt	Lcd_Init@data,c
  1830  00D026  D7DF               	goto	l95
  1831  00D028                     l96:
  1832                           
  1833                           ;lcd.h: 71: }
  1834                           ;lcd.h: 72: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  1835  00D028  908A               	bcf	3978,0,c	;volatile
  1836  00D02A  928A               	bcf	3978,1,c	;volatile
  1837  00D02C  848A               	bsf	3978,2,c	;volatile
  1838  00D02E  968A               	bcf	3978,3,c	;volatile
  1839  00D030  988A               	bcf	3978,4,c	;volatile
  1840  00D032  9A8A               	bcf	3978,5,c	;volatile
  1841                           
  1842                           ;lcd.h: 73: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  1843  00D034  908A               	bcf	3978,0,c	;volatile
  1844  00D036  928A               	bcf	3978,1,c	;volatile
  1845  00D038  848A               	bsf	3978,2,c	;volatile
  1846  00D03A  968A               	bcf	3978,3,c	;volatile
  1847  00D03C  888A               	bsf	3978,4,c	;volatile
  1848  00D03E  9A8A               	bcf	3978,5,c	;volatile
  1849                           
  1850                           ;lcd.h: 74: _delay((unsigned long)((5)*(4000000/4000000.0)));
  1851  00D040  F000               	nop	
  1852  00D042  D000               	nop2		;2 cycle nop
  1853  00D044  D000               	nop2		;2 cycle nop
  1854                           
  1855                           ;lcd.h: 75: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  1856  00D046  908A               	bcf	3978,0,c	;volatile
  1857  00D048  928A               	bcf	3978,1,c	;volatile
  1858  00D04A  848A               	bsf	3978,2,c	;volatile
  1859  00D04C  968A               	bcf	3978,3,c	;volatile
  1860  00D04E  988A               	bcf	3978,4,c	;volatile
  1861  00D050  9A8A               	bcf	3978,5,c	;volatile
  1862                           
  1863                           ;lcd.h: 76: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  1864  00D052  0E08               	movlw	8
  1865  00D054  6E04               	movwf	??_Lcd_Init& (0+255),c
  1866  00D056  0E23               	movlw	35
  1867  00D058                     u6457:
  1868  00D058  2EE8               	decfsz	wreg,f,c
  1869  00D05A  D7FE               	goto	u6457
  1870  00D05C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1871  00D05E  D7FC               	goto	u6457
  1872  00D060  F000               	nop	
  1873                           
  1874                           ;lcd.h: 77: data = 40; Lcd_Cmd(data);
  1875  00D062  0E28               	movlw	40
  1876  00D064  6E05               	movwf	Lcd_Init@data,c
  1877  00D066  5005               	movf	Lcd_Init@data,w,c
  1878  00D068  EC92  F066         	call	_Lcd_Cmd
  1879                           
  1880                           ;lcd.h: 78: data = 16; Lcd_Cmd(data);
  1881  00D06C  0E10               	movlw	16
  1882  00D06E  6E05               	movwf	Lcd_Init@data,c
  1883  00D070  5005               	movf	Lcd_Init@data,w,c
  1884  00D072  EC92  F066         	call	_Lcd_Cmd
  1885                           
  1886                           ;lcd.h: 79: data = 1; Lcd_Cmd(data);
  1887  00D076  0E01               	movlw	1
  1888  00D078  6E05               	movwf	Lcd_Init@data,c
  1889  00D07A  5005               	movf	Lcd_Init@data,w,c
  1890  00D07C  EC92  F066         	call	_Lcd_Cmd
  1891                           
  1892                           ;lcd.h: 80: data = 15; Lcd_Cmd(data);
  1893  00D080  0E0F               	movlw	15
  1894  00D082  6E05               	movwf	Lcd_Init@data,c
  1895  00D084  5005               	movf	Lcd_Init@data,w,c
  1896  00D086  EC92  F066         	call	_Lcd_Cmd
  1897  00D08A  0012               	return		;funcret
  1898  00D08C                     __end_of_Lcd_Init:
  1899                           	opt stack 0
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           postdec1	equ	0xFE5
  1907                           fsr1l	equ	0xFE1
  1908                           status	equ	0xFD8
  1909                           
  1910 ;; *************** function _Iniciar_Display *****************
  1911 ;; Defined at:
  1912 ;;		line 182 in file "../monografia_main.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;		None
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;		None
  1917 ;; Return value:  Size  Location     Type
  1918 ;;		None               void
  1919 ;; Registers used:
  1920 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1930 ;;Total ram usage:        0 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    5
  1933 ;; This function calls:
  1934 ;;		_Actualiza_datos
  1935 ;;		_Encender_Aire_Calefaccion
  1936 ;;		_Encender_Alarma
  1937 ;;		_Encender_vidriera
  1938 ;;		_Lcd_Out
  1939 ;;		_Mostrar_DiaYfecha
  1940 ;;		___ftmul
  1941 ;;		___lbtoft
  1942 ;;		_conseguir_estacion
  1943 ;;		_sprintf
  1944 ;; This function is called by:
  1945 ;;		_main
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text2
  1950  00D7EA                     __ptext2:
  1951                           	opt stack 0
  1952  00D7EA                     _Iniciar_Display:
  1953                           	opt stack 25
  1954                           
  1955                           ;monografia_main.c: 184: Actualiza_datos();
  1956                           
  1957                           ;incstack = 0
  1958  00D7EA  ECA8  F05F         	call	_Actualiza_datos	;wreg free
  1959                           
  1960                           ;monografia_main.c: 185: Mostrar_DiaYfecha(1,0);
  1961  00D7EE  0E00               	movlw	0
  1962  00D7F0  6E56               	movwf	Mostrar_DiaYfecha@fila+1,c
  1963  00D7F2  0E01               	movlw	1
  1964  00D7F4  6E55               	movwf	Mostrar_DiaYfecha@fila,c
  1965  00D7F6  0E00               	movlw	0
  1966  00D7F8  6E58               	movwf	Mostrar_DiaYfecha@columna+1,c
  1967  00D7FA  0E00               	movlw	0
  1968  00D7FC  6E57               	movwf	Mostrar_DiaYfecha@columna,c
  1969  00D7FE  ECAD  F06C         	call	_Mostrar_DiaYfecha	;wreg free
  1970                           
  1971                           ;monografia_main.c: 187: sprintf(buffer1,"%02u:%02u:%02u ",hora,minuto,segundo);
  1972  00D802  0EB9               	movlw	low _buffer1
  1973  00D804  6E43               	movwf	sprintf@sp,c
  1974  00D806  0E00               	movlw	high _buffer1
  1975  00D808  6E44               	movwf	sprintf@sp+1,c
  1976  00D80A  0E6E               	movlw	low STR_1
  1977  00D80C  6E45               	movwf	sprintf@f,c
  1978  00D80E  0EFF               	movlw	high STR_1
  1979  00D810  6E46               	movwf	sprintf@f+1,c
  1980  00D812  C0DF  F047         	movff	_hora,?_sprintf+4
  1981  00D816  C0E0  F048         	movff	_hora+1,?_sprintf+5
  1982  00D81A  C0E7  F049         	movff	_minuto,?_sprintf+6
  1983  00D81E  C0E8  F04A         	movff	_minuto+1,?_sprintf+7
  1984  00D822  C0B6  F04B         	movff	_segundo,?_sprintf+8
  1985  00D826  C0B7  F04C         	movff	_segundo+1,?_sprintf+9
  1986  00D82A  EC37  F078         	call	_sprintf	;wreg free
  1987                           
  1988                           ;monografia_main.c: 188: Lcd_Out(2,0,buffer1);
  1989  00D82E  0E00               	movlw	0
  1990  00D830  6E04               	movwf	Lcd_Out@x,c
  1991  00D832  0EB9               	movlw	low _buffer1
  1992  00D834  6E05               	movwf	Lcd_Out@buffer,c
  1993  00D836  0E00               	movlw	high _buffer1
  1994  00D838  6E06               	movwf	Lcd_Out@buffer+1,c
  1995  00D83A  0E02               	movlw	2
  1996  00D83C  ECCB  F061         	call	_Lcd_Out
  1997                           
  1998                           ;monografia_main.c: 190: conseguir_estacion();
  1999  00D840  EC02  F063         	call	_conseguir_estacion	;wreg free
  2000                           
  2001                           ;monografia_main.c: 192: sprintf(buffer1,"%s ",estacion);
  2002  00D844  0EB9               	movlw	low _buffer1
  2003  00D846  6E43               	movwf	sprintf@sp,c
  2004  00D848  0E00               	movlw	high _buffer1
  2005  00D84A  6E44               	movwf	sprintf@sp+1,c
  2006  00D84C  0EF3               	movlw	low STR_2
  2007  00D84E  6E45               	movwf	sprintf@f,c
  2008  00D850  0EFF               	movlw	high STR_2
  2009  00D852  6E46               	movwf	sprintf@f+1,c
  2010  00D854  C0B0  F047         	movff	_estacion,?_sprintf+4
  2011  00D858  C0B1  F048         	movff	_estacion+1,?_sprintf+5
  2012  00D85C  EC37  F078         	call	_sprintf	;wreg free
  2013                           
  2014                           ;monografia_main.c: 193: Lcd_Out(2,12,buffer1);
  2015  00D860  0E0C               	movlw	12
  2016  00D862  6E04               	movwf	Lcd_Out@x,c
  2017  00D864  0EB9               	movlw	low _buffer1
  2018  00D866  6E05               	movwf	Lcd_Out@buffer,c
  2019  00D868  0E00               	movlw	high _buffer1
  2020  00D86A  6E06               	movwf	Lcd_Out@buffer+1,c
  2021  00D86C  0E02               	movlw	2
  2022  00D86E  ECCB  F061         	call	_Lcd_Out
  2023                           
  2024                           ;monografia_main.c: 194: sprintf(buffer1,"TempPro:%02u ",temperatura);
  2025  00D872  0EB9               	movlw	low _buffer1
  2026  00D874  6E43               	movwf	sprintf@sp,c
  2027  00D876  0E00               	movlw	high _buffer1
  2028  00D878  6E44               	movwf	sprintf@sp+1,c
  2029  00D87A  0E7E               	movlw	low STR_3
  2030  00D87C  6E45               	movwf	sprintf@f,c
  2031  00D87E  0EFF               	movlw	high STR_3
  2032  00D880  6E46               	movwf	sprintf@f+1,c
  2033  00D882  C0EB  F047         	movff	_temperatura,?_sprintf+4
  2034  00D886  C0EC  F048         	movff	_temperatura+1,?_sprintf+5
  2035  00D88A  EC37  F078         	call	_sprintf	;wreg free
  2036                           
  2037                           ;monografia_main.c: 195: Lcd_Out(3,0,buffer1);
  2038  00D88E  0E00               	movlw	0
  2039  00D890  6E04               	movwf	Lcd_Out@x,c
  2040  00D892  0EB9               	movlw	low _buffer1
  2041  00D894  6E05               	movwf	Lcd_Out@buffer,c
  2042  00D896  0E00               	movlw	high _buffer1
  2043  00D898  6E06               	movwf	Lcd_Out@buffer+1,c
  2044  00D89A  0E03               	movlw	3
  2045  00D89C  ECCB  F061         	call	_Lcd_Out
  2046                           
  2047                           ;monografia_main.c: 196: lectura_temp = lectura;
  2048  00D8A0  C0B8  F0D5         	movff	_lectura,_lectura_temp
  2049                           
  2050                           ;monografia_main.c: 197: grados = 0.196*lectura_temp;
  2051  00D8A4  0100               	movlb	0	; () banked
  2052  00D8A6  51D5               	movf	_lectura_temp& (0+255),w,b
  2053  00D8A8  EC81  F05F         	call	___lbtoft
  2054  00D8AC  C009  F015         	movff	?___lbtoft,___ftmul@f1
  2055  00D8B0  C00A  F016         	movff	?___lbtoft+1,___ftmul@f1+1
  2056  00D8B4  C00B  F017         	movff	?___lbtoft+2,___ftmul@f1+2
  2057  00D8B8  0EB4               	movlw	180
  2058  00D8BA  6E18               	movwf	___ftmul@f2,c
  2059  00D8BC  0E48               	movlw	72
  2060  00D8BE  6E19               	movwf	___ftmul@f2+1,c
  2061  00D8C0  0E3E               	movlw	62
  2062  00D8C2  6E1A               	movwf	___ftmul@f2+2,c
  2063  00D8C4  EC8B  F065         	call	___ftmul	;wreg free
  2064  00D8C8  C015  F0D6         	movff	?___ftmul,_grados
  2065  00D8CC  C016  F0D7         	movff	?___ftmul+1,_grados+1
  2066  00D8D0  C017  F0D8         	movff	?___ftmul+2,_grados+2
  2067                           
  2068                           ;monografia_main.c: 198: sprintf(buffer1,"Med:%2.1f ",grados);
  2069  00D8D4  0EB9               	movlw	low _buffer1
  2070  00D8D6  6E43               	movwf	sprintf@sp,c
  2071  00D8D8  0E00               	movlw	high _buffer1
  2072  00D8DA  6E44               	movwf	sprintf@sp+1,c
  2073  00D8DC  0E8C               	movlw	low STR_4
  2074  00D8DE  6E45               	movwf	sprintf@f,c
  2075  00D8E0  0EFF               	movlw	high STR_4
  2076  00D8E2  6E46               	movwf	sprintf@f+1,c
  2077  00D8E4  C0D6  F047         	movff	_grados,?_sprintf+4
  2078  00D8E8  C0D7  F048         	movff	_grados+1,?_sprintf+5
  2079  00D8EC  C0D8  F049         	movff	_grados+2,?_sprintf+6
  2080  00D8F0  EC37  F078         	call	_sprintf	;wreg free
  2081                           
  2082                           ;monografia_main.c: 199: Lcd_Out(3,12,buffer1);
  2083  00D8F4  0E0C               	movlw	12
  2084  00D8F6  6E04               	movwf	Lcd_Out@x,c
  2085  00D8F8  0EB9               	movlw	low _buffer1
  2086  00D8FA  6E05               	movwf	Lcd_Out@buffer,c
  2087  00D8FC  0E00               	movlw	high _buffer1
  2088  00D8FE  6E06               	movwf	Lcd_Out@buffer+1,c
  2089  00D900  0E03               	movlw	3
  2090  00D902  ECCB  F061         	call	_Lcd_Out
  2091                           
  2092                           ;monografia_main.c: 201: Encender_Aire_Calefaccion();
  2093  00D906  EC21  F064         	call	_Encender_Aire_Calefaccion	;wreg free
  2094                           
  2095                           ;monografia_main.c: 203: sprintf(buffer1,"Vidriera:%02u:%02u-%02u:%02u", hora_vdr_c,minu
      +                          to_vdr_c,hora_vdr_a,minuto_vdr_a);
  2096  00D90A  0EB9               	movlw	low _buffer1
  2097  00D90C  6E43               	movwf	sprintf@sp,c
  2098  00D90E  0E00               	movlw	high _buffer1
  2099  00D910  6E44               	movwf	sprintf@sp+1,c
  2100  00D912  0E9F               	movlw	low STR_5
  2101  00D914  6E45               	movwf	sprintf@f,c
  2102  00D916  0EFE               	movlw	high STR_5
  2103  00D918  6E46               	movwf	sprintf@f+1,c
  2104  00D91A  C0E3  F047         	movff	_hora_vdr_c,?_sprintf+4
  2105  00D91E  C0E4  F048         	movff	_hora_vdr_c+1,?_sprintf+5
  2106  00D922  C0B4  F049         	movff	_minuto_vdr_c,?_sprintf+6
  2107  00D926  C0B5  F04A         	movff	_minuto_vdr_c+1,?_sprintf+7
  2108  00D92A  C0E1  F04B         	movff	_hora_vdr_a,?_sprintf+8
  2109  00D92E  C0E2  F04C         	movff	_hora_vdr_a+1,?_sprintf+9
  2110  00D932  C0E9  F04D         	movff	_minuto_vdr_a,?_sprintf+10
  2111  00D936  C0EA  F04E         	movff	_minuto_vdr_a+1,?_sprintf+11
  2112  00D93A  EC37  F078         	call	_sprintf	;wreg free
  2113                           
  2114                           ;monografia_main.c: 204: Lcd_Out(4,0,buffer1);
  2115  00D93E  0E00               	movlw	0
  2116  00D940  6E04               	movwf	Lcd_Out@x,c
  2117  00D942  0EB9               	movlw	low _buffer1
  2118  00D944  6E05               	movwf	Lcd_Out@buffer,c
  2119  00D946  0E00               	movlw	high _buffer1
  2120  00D948  6E06               	movwf	Lcd_Out@buffer+1,c
  2121  00D94A  0E04               	movlw	4
  2122  00D94C  ECCB  F061         	call	_Lcd_Out
  2123                           
  2124                           ;monografia_main.c: 206: Encender_vidriera();
  2125  00D950  EC5D  F063         	call	_Encender_vidriera	;wreg free
  2126                           
  2127                           ;monografia_main.c: 207: Encender_Alarma();
  2128  00D954  EC36  F05F         	call	_Encender_Alarma	;wreg free
  2129  00D958  0012               	return		;funcret
  2130  00D95A                     __end_of_Iniciar_Display:
  2131                           	opt stack 0
  2132                           tblptru	equ	0xFF8
  2133                           tblptrh	equ	0xFF7
  2134                           tblptrl	equ	0xFF6
  2135                           tablat	equ	0xFF5
  2136                           postinc0	equ	0xFEE
  2137                           wreg	equ	0xFE8
  2138                           postdec1	equ	0xFE5
  2139                           fsr1l	equ	0xFE1
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function _conseguir_estacion *****************
  2143 ;; Defined at:
  2144 ;;		line 596 in file "../monografia_main.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;		None
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;		None
  2149 ;; Return value:  Size  Location     Type
  2150 ;;		None               void
  2151 ;; Registers used:
  2152 ;;		wreg, status,2, status,0
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2162 ;;Total ram usage:        0 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; This function calls:
  2165 ;;		Nothing
  2166 ;; This function is called by:
  2167 ;;		_Iniciar_Display
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text3
  2172  00C604                     __ptext3:
  2173                           	opt stack 0
  2174  00C604                     _conseguir_estacion:
  2175                           	opt stack 29
  2176                           
  2177                           ;monografia_main.c: 598: if(hora >= 0 && minuto >=0){
  2178                           
  2179                           ;incstack = 0
  2180  00C604  0100               	movlb	0	; () banked
  2181  00C606  BFE0               	btfsc	(_hora+1)& (0+255),7,b
  2182  00C608  0012               	return	
  2183                           
  2184                           ; BSR set to: 0
  2185  00C60A  0100               	movlb	0	; () banked
  2186  00C60C  BFE8               	btfsc	(_minuto+1)& (0+255),7,b
  2187  00C60E  0012               	return	
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;monografia_main.c: 599: if(mes == 9 && dia > 20){
  2191  00C610  0E09               	movlw	9
  2192  00C612  0100               	movlb	0	; () banked
  2193  00C614  19E5               	xorwf	_mes& (0+255),w,b
  2194  00C616  0100               	movlb	0	; () banked
  2195  00C618  11E6               	iorwf	(_mes+1)& (0+255),w,b
  2196  00C61A  A4D8               	btfss	status,2,c
  2197  00C61C  D011               	goto	l385
  2198                           
  2199                           ; BSR set to: 0
  2200  00C61E  0100               	movlb	0	; () banked
  2201  00C620  BFDC               	btfsc	(_dia+1)& (0+255),7,b
  2202  00C622  D00E               	goto	l385
  2203  00C624  0100               	movlb	0	; () banked
  2204  00C626  51DC               	movf	(_dia+1)& (0+255),w,b
  2205  00C628  E105               	bnz	u5290
  2206  00C62A  0E15               	movlw	21
  2207  00C62C  0100               	movlb	0	; () banked
  2208  00C62E  5DDB               	subwf	_dia& (0+255),w,b
  2209  00C630  A0D8               	btfss	status,0,c
  2210  00C632  D006               	goto	l385
  2211  00C634                     u5290:
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;monografia_main.c: 600: estacion = "Verano";
  2215  00C634  0EEC               	movlw	low STR_39
  2216  00C636  0100               	movlb	0	; () banked
  2217  00C638  6FB0               	movwf	_estacion& (0+255),b
  2218  00C63A  0EFF               	movlw	high STR_39
  2219  00C63C  0100               	movlb	0	; () banked
  2220  00C63E  6FB1               	movwf	(_estacion+1)& (0+255),b
  2221  00C640                     l385:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;monografia_main.c: 601: }
  2225                           ;monografia_main.c: 602: if(mes == 3 && dia < 22)
  2226  00C640  0E03               	movlw	3
  2227  00C642  0100               	movlb	0	; () banked
  2228  00C644  19E5               	xorwf	_mes& (0+255),w,b
  2229  00C646  0100               	movlb	0	; () banked
  2230  00C648  11E6               	iorwf	(_mes+1)& (0+255),w,b
  2231  00C64A  A4D8               	btfss	status,2,c
  2232  00C64C  D011               	goto	l386
  2233                           
  2234                           ; BSR set to: 0
  2235  00C64E  0100               	movlb	0	; () banked
  2236  00C650  BFDC               	btfsc	(_dia+1)& (0+255),7,b
  2237  00C652  D008               	goto	l4870
  2238  00C654  0100               	movlb	0	; () banked
  2239  00C656  51DC               	movf	(_dia+1)& (0+255),w,b
  2240  00C658  E10B               	bnz	l386
  2241  00C65A  0E16               	movlw	22
  2242  00C65C  0100               	movlb	0	; () banked
  2243  00C65E  5DDB               	subwf	_dia& (0+255),w,b
  2244  00C660  B0D8               	btfsc	status,0,c
  2245  00C662  D006               	goto	l386
  2246  00C664                     l4870:
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;monografia_main.c: 603: {
  2250                           ;monografia_main.c: 604: estacion = "Verano";
  2251  00C664  0EEC               	movlw	low STR_39
  2252  00C666  0100               	movlb	0	; () banked
  2253  00C668  6FB0               	movwf	_estacion& (0+255),b
  2254  00C66A  0EFF               	movlw	high STR_39
  2255  00C66C  0100               	movlb	0	; () banked
  2256  00C66E  6FB1               	movwf	(_estacion+1)& (0+255),b
  2257  00C670                     l386:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;monografia_main.c: 605: }
  2261                           ;monografia_main.c: 606: if(mes > 8 || mes < 3){
  2262  00C670  0100               	movlb	0	; () banked
  2263  00C672  BFE6               	btfsc	(_mes+1)& (0+255),7,b
  2264  00C674  D008               	goto	l4872
  2265  00C676  0100               	movlb	0	; () banked
  2266  00C678  51E6               	movf	(_mes+1)& (0+255),w,b
  2267  00C67A  E110               	bnz	l4874
  2268  00C67C  0E09               	movlw	9
  2269  00C67E  0100               	movlb	0	; () banked
  2270  00C680  5DE5               	subwf	_mes& (0+255),w,b
  2271  00C682  B0D8               	btfsc	status,0,c
  2272  00C684  D00B               	goto	l4874
  2273  00C686                     l4872:
  2274                           
  2275                           ; BSR set to: 0
  2276  00C686  0100               	movlb	0	; () banked
  2277  00C688  BFE6               	btfsc	(_mes+1)& (0+255),7,b
  2278  00C68A  D008               	goto	l4874
  2279  00C68C  0100               	movlb	0	; () banked
  2280  00C68E  51E6               	movf	(_mes+1)& (0+255),w,b
  2281  00C690  E10C               	bnz	l4876
  2282  00C692  0E03               	movlw	3
  2283  00C694  0100               	movlb	0	; () banked
  2284  00C696  5DE5               	subwf	_mes& (0+255),w,b
  2285  00C698  B0D8               	btfsc	status,0,c
  2286  00C69A  D007               	goto	l4876
  2287  00C69C                     l4874:
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;monografia_main.c: 607: estacion = "Verano";
  2291  00C69C  0EEC               	movlw	low STR_39
  2292  00C69E  0100               	movlb	0	; () banked
  2293  00C6A0  6FB0               	movwf	_estacion& (0+255),b
  2294  00C6A2  0EFF               	movlw	high STR_39
  2295  00C6A4  0100               	movlb	0	; () banked
  2296  00C6A6  6FB1               	movwf	(_estacion+1)& (0+255),b
  2297                           
  2298                           ;monografia_main.c: 608: }else{
  2299  00C6A8  0012               	return	
  2300  00C6AA                     l4876:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;monografia_main.c: 609: estacion = "Invierno";
  2304  00C6AA  0EDC               	movlw	low STR_42
  2305  00C6AC  0100               	movlb	0	; () banked
  2306  00C6AE  6FB0               	movwf	_estacion& (0+255),b
  2307  00C6B0  0EFF               	movlw	high STR_42
  2308  00C6B2  0100               	movlb	0	; () banked
  2309  00C6B4  6FB1               	movwf	(_estacion+1)& (0+255),b
  2310                           
  2311                           ; BSR set to: 0
  2312  00C6B6  0012               	return	
  2313                           
  2314                           ; BSR set to: 0
  2315                           
  2316                           ; BSR set to: 0
  2317  00C6B8  0012               	return		;funcret
  2318  00C6BA                     __end_of_conseguir_estacion:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           postinc0	equ	0xFEE
  2325                           wreg	equ	0xFE8
  2326                           postdec1	equ	0xFE5
  2327                           fsr1l	equ	0xFE1
  2328                           status	equ	0xFD8
  2329                           
  2330 ;; *************** function ___lbtoft *****************
  2331 ;; Defined at:
  2332 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;  c               1    wreg     unsigned char 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  c               1   11[COMRAM] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  3    8[COMRAM] float 
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2346 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2349 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2350 ;;Total ram usage:        4 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    1
  2353 ;; This function calls:
  2354 ;;		___ftpack
  2355 ;; This function is called by:
  2356 ;;		_Iniciar_Display
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           	psect	text4
  2361  00BF02                     __ptext4:
  2362                           	opt stack 0
  2363  00BF02                     ___lbtoft:
  2364                           	opt stack 28
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;incstack = 0
  2368                           ;___lbtoft@c stored from wreg
  2369  00BF02  6E0C               	movwf	___lbtoft@c,c
  2370  00BF04  500C               	movf	___lbtoft@c,w,c
  2371  00BF06  6E01               	movwf	___ftpack@arg,c
  2372  00BF08  6A02               	clrf	___ftpack@arg+1,c
  2373  00BF0A  6A03               	clrf	___ftpack@arg+2,c
  2374  00BF0C  0E8E               	movlw	142
  2375  00BF0E  6E04               	movwf	___ftpack@exp,c
  2376  00BF10  0E00               	movlw	0
  2377  00BF12  6E05               	movwf	___ftpack@sign,c
  2378  00BF14  ECBE  F063         	call	___ftpack	;wreg free
  2379  00BF18  C001  F009         	movff	?___ftpack,?___lbtoft
  2380  00BF1C  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  2381  00BF20  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  2382  00BF24  0012               	return	
  2383  00BF26  0012               	return		;funcret
  2384  00BF28                     __end_of___lbtoft:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           postdec1	equ	0xFE5
  2393                           fsr1l	equ	0xFE1
  2394                           status	equ	0xFD8
  2395                           
  2396 ;; *************** function _Mostrar_DiaYfecha *****************
  2397 ;; Defined at:
  2398 ;;		line 210 in file "../monografia_main.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;  fila            2   84[COMRAM] int 
  2401 ;;  columna         2   86[COMRAM] int 
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;		None               void
  2406 ;; Registers used:
  2407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2416 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2417 ;;Total ram usage:        6 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    4
  2420 ;; This function calls:
  2421 ;;		_Lcd_Out
  2422 ;;		_sprintf
  2423 ;; This function is called by:
  2424 ;;		_Iniciar_Display
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text5
  2429  00D95A                     __ptext5:
  2430                           	opt stack 0
  2431  00D95A                     _Mostrar_DiaYfecha:
  2432                           	opt stack 25
  2433                           
  2434                           ;monografia_main.c: 212: switch(diasem) {
  2435                           
  2436                           ;incstack = 0
  2437  00D95A  D0A1               	goto	l4850
  2438  00D95C                     l4834:
  2439                           
  2440                           ;monografia_main.c: 214: sprintf(buffer1,"Domingo %02u/%02u/%02u",dia,mes,anio);
  2441  00D95C  0EB9               	movlw	low _buffer1
  2442  00D95E  6E43               	movwf	sprintf@sp,c
  2443  00D960  0E00               	movlw	high _buffer1
  2444  00D962  6E44               	movwf	sprintf@sp+1,c
  2445  00D964  0ED5               	movlw	low STR_6
  2446  00D966  6E45               	movwf	sprintf@f,c
  2447  00D968  0EFE               	movlw	high STR_6
  2448  00D96A  6E46               	movwf	sprintf@f+1,c
  2449  00D96C  C0DB  F047         	movff	_dia,?_sprintf+4
  2450  00D970  C0DC  F048         	movff	_dia+1,?_sprintf+5
  2451  00D974  C0E5  F049         	movff	_mes,?_sprintf+6
  2452  00D978  C0E6  F04A         	movff	_mes+1,?_sprintf+7
  2453  00D97C  C0D9  F04B         	movff	_anio,?_sprintf+8
  2454  00D980  C0DA  F04C         	movff	_anio+1,?_sprintf+9
  2455  00D984  EC37  F078         	call	_sprintf	;wreg free
  2456                           
  2457                           ;monografia_main.c: 215: break;
  2458  00D988  D0A9               	goto	l4852
  2459  00D98A                     l4836:
  2460                           
  2461                           ;monografia_main.c: 218: sprintf(buffer1,"Lunes %02u/%02u/%02u",dia,mes,anio);
  2462  00D98A  0EB9               	movlw	low _buffer1
  2463  00D98C  6E43               	movwf	sprintf@sp,c
  2464  00D98E  0E00               	movlw	high _buffer1
  2465  00D990  6E44               	movwf	sprintf@sp+1,c
  2466  00D992  0E45               	movlw	low STR_7
  2467  00D994  6E45               	movwf	sprintf@f,c
  2468  00D996  0EFF               	movlw	high STR_7
  2469  00D998  6E46               	movwf	sprintf@f+1,c
  2470  00D99A  C0DB  F047         	movff	_dia,?_sprintf+4
  2471  00D99E  C0DC  F048         	movff	_dia+1,?_sprintf+5
  2472  00D9A2  C0E5  F049         	movff	_mes,?_sprintf+6
  2473  00D9A6  C0E6  F04A         	movff	_mes+1,?_sprintf+7
  2474  00D9AA  C0D9  F04B         	movff	_anio,?_sprintf+8
  2475  00D9AE  C0DA  F04C         	movff	_anio+1,?_sprintf+9
  2476  00D9B2  EC37  F078         	call	_sprintf	;wreg free
  2477                           
  2478                           ;monografia_main.c: 219: break;
  2479  00D9B6  D092               	goto	l4852
  2480  00D9B8                     l4838:
  2481                           
  2482                           ;monografia_main.c: 222: sprintf(buffer1,"Martes %02u/%02u/%02u",dia,mes,anio);
  2483  00D9B8  0EB9               	movlw	low _buffer1
  2484  00D9BA  6E43               	movwf	sprintf@sp,c
  2485  00D9BC  0E00               	movlw	high _buffer1
  2486  00D9BE  6E44               	movwf	sprintf@sp+1,c
  2487  00D9C0  0E19               	movlw	low STR_8
  2488  00D9C2  6E45               	movwf	sprintf@f,c
  2489  00D9C4  0EFF               	movlw	high STR_8
  2490  00D9C6  6E46               	movwf	sprintf@f+1,c
  2491  00D9C8  C0DB  F047         	movff	_dia,?_sprintf+4
  2492  00D9CC  C0DC  F048         	movff	_dia+1,?_sprintf+5
  2493  00D9D0  C0E5  F049         	movff	_mes,?_sprintf+6
  2494  00D9D4  C0E6  F04A         	movff	_mes+1,?_sprintf+7
  2495  00D9D8  C0D9  F04B         	movff	_anio,?_sprintf+8
  2496  00D9DC  C0DA  F04C         	movff	_anio+1,?_sprintf+9
  2497  00D9E0  EC37  F078         	call	_sprintf	;wreg free
  2498                           
  2499                           ;monografia_main.c: 223: break;
  2500  00D9E4  D07B               	goto	l4852
  2501  00D9E6                     l4840:
  2502                           
  2503                           ;monografia_main.c: 226: sprintf(buffer1,"Miercoles %02u/%02u/%02u",dia,mes,anio);
  2504  00D9E6  0EB9               	movlw	low _buffer1
  2505  00D9E8  6E43               	movwf	sprintf@sp,c
  2506  00D9EA  0E00               	movlw	high _buffer1
  2507  00D9EC  6E44               	movwf	sprintf@sp+1,c
  2508  00D9EE  0EBC               	movlw	low STR_9
  2509  00D9F0  6E45               	movwf	sprintf@f,c
  2510  00D9F2  0EFE               	movlw	high STR_9
  2511  00D9F4  6E46               	movwf	sprintf@f+1,c
  2512  00D9F6  C0DB  F047         	movff	_dia,?_sprintf+4
  2513  00D9FA  C0DC  F048         	movff	_dia+1,?_sprintf+5
  2514  00D9FE  C0E5  F049         	movff	_mes,?_sprintf+6
  2515  00DA02  C0E6  F04A         	movff	_mes+1,?_sprintf+7
  2516  00DA06  C0D9  F04B         	movff	_anio,?_sprintf+8
  2517  00DA0A  C0DA  F04C         	movff	_anio+1,?_sprintf+9
  2518  00DA0E  EC37  F078         	call	_sprintf	;wreg free
  2519                           
  2520                           ;monografia_main.c: 227: break;
  2521  00DA12  D064               	goto	l4852
  2522  00DA14                     l4842:
  2523                           
  2524                           ;monografia_main.c: 230: sprintf(buffer1,"Jueves %02u/%02u/%02u",dia,mes,anio);
  2525  00DA14  0EB9               	movlw	low _buffer1
  2526  00DA16  6E43               	movwf	sprintf@sp,c
  2527  00DA18  0E00               	movlw	high _buffer1
  2528  00DA1A  6E44               	movwf	sprintf@sp+1,c
  2529  00DA1C  0E2F               	movlw	low STR_10
  2530  00DA1E  6E45               	movwf	sprintf@f,c
  2531  00DA20  0EFF               	movlw	high STR_10
  2532  00DA22  6E46               	movwf	sprintf@f+1,c
  2533  00DA24  C0DB  F047         	movff	_dia,?_sprintf+4
  2534  00DA28  C0DC  F048         	movff	_dia+1,?_sprintf+5
  2535  00DA2C  C0E5  F049         	movff	_mes,?_sprintf+6
  2536  00DA30  C0E6  F04A         	movff	_mes+1,?_sprintf+7
  2537  00DA34  C0D9  F04B         	movff	_anio,?_sprintf+8
  2538  00DA38  C0DA  F04C         	movff	_anio+1,?_sprintf+9
  2539  00DA3C  EC37  F078         	call	_sprintf	;wreg free
  2540                           
  2541                           ;monografia_main.c: 231: break;
  2542  00DA40  D04D               	goto	l4852
  2543  00DA42                     l4844:
  2544                           
  2545                           ;monografia_main.c: 234: sprintf(buffer1,"Viernes %02u/%02u/%02u",dia,mes,anio);
  2546  00DA42  0EB9               	movlw	low _buffer1
  2547  00DA44  6E43               	movwf	sprintf@sp,c
  2548  00DA46  0E00               	movlw	high _buffer1
  2549  00DA48  6E44               	movwf	sprintf@sp+1,c
  2550  00DA4A  0EEC               	movlw	low STR_11
  2551  00DA4C  6E45               	movwf	sprintf@f,c
  2552  00DA4E  0EFE               	movlw	high STR_11
  2553  00DA50  6E46               	movwf	sprintf@f+1,c
  2554  00DA52  C0DB  F047         	movff	_dia,?_sprintf+4
  2555  00DA56  C0DC  F048         	movff	_dia+1,?_sprintf+5
  2556  00DA5A  C0E5  F049         	movff	_mes,?_sprintf+6
  2557  00DA5E  C0E6  F04A         	movff	_mes+1,?_sprintf+7
  2558  00DA62  C0D9  F04B         	movff	_anio,?_sprintf+8
  2559  00DA66  C0DA  F04C         	movff	_anio+1,?_sprintf+9
  2560  00DA6A  EC37  F078         	call	_sprintf	;wreg free
  2561                           
  2562                           ;monografia_main.c: 235: break;
  2563  00DA6E  D036               	goto	l4852
  2564  00DA70                     l4846:
  2565                           
  2566                           ;monografia_main.c: 238: sprintf(buffer1,"Sabado %02u/%02u/%02u",dia,mes,anio);
  2567  00DA70  0EB9               	movlw	low _buffer1
  2568  00DA72  6E43               	movwf	sprintf@sp,c
  2569  00DA74  0E00               	movlw	high _buffer1
  2570  00DA76  6E44               	movwf	sprintf@sp+1,c
  2571  00DA78  0E03               	movlw	low STR_12
  2572  00DA7A  6E45               	movwf	sprintf@f,c
  2573  00DA7C  0EFF               	movlw	high STR_12
  2574  00DA7E  6E46               	movwf	sprintf@f+1,c
  2575  00DA80  C0DB  F047         	movff	_dia,?_sprintf+4
  2576  00DA84  C0DC  F048         	movff	_dia+1,?_sprintf+5
  2577  00DA88  C0E5  F049         	movff	_mes,?_sprintf+6
  2578  00DA8C  C0E6  F04A         	movff	_mes+1,?_sprintf+7
  2579  00DA90  C0D9  F04B         	movff	_anio,?_sprintf+8
  2580  00DA94  C0DA  F04C         	movff	_anio+1,?_sprintf+9
  2581  00DA98  EC37  F078         	call	_sprintf	;wreg free
  2582                           
  2583                           ;monografia_main.c: 240: }
  2584                           
  2585                           ;monografia_main.c: 239: break;
  2586  00DA9C  D01F               	goto	l4852
  2587  00DA9E                     l4850:
  2588  00DA9E  C0DD  F059         	movff	_diasem,??_Mostrar_DiaYfecha
  2589  00DAA2  C0DE  F05A         	movff	_diasem+1,??_Mostrar_DiaYfecha+1
  2590                           
  2591                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2592                           ; Switch size 1, requested type "space"
  2593                           ; Number of cases is 1, Range of values is 0 to 0
  2594                           ; switch strategies available:
  2595                           ; Name         Instructions Cycles
  2596                           ; simple_byte            4     3 (average)
  2597                           ;	Chosen strategy is simple_byte
  2598  00DAA6  505A               	movf	??_Mostrar_DiaYfecha+1,w,c
  2599  00DAA8  0A00               	xorlw	0	; case 0
  2600  00DAAA  A4D8               	btfss	status,2,c
  2601  00DAAC  D017               	goto	l4852
  2602                           
  2603                           ; Switch size 1, requested type "space"
  2604                           ; Number of cases is 7, Range of values is 0 to 6
  2605                           ; switch strategies available:
  2606                           ; Name         Instructions Cycles
  2607                           ; simple_byte           22    12 (average)
  2608                           ;	Chosen strategy is simple_byte
  2609  00DAAE  5059               	movf	??_Mostrar_DiaYfecha,w,c
  2610  00DAB0  0A00               	xorlw	0	; case 0
  2611  00DAB2  B4D8               	btfsc	status,2,c
  2612  00DAB4  D753               	goto	l4834
  2613  00DAB6  0A01               	xorlw	1	; case 1
  2614  00DAB8  B4D8               	btfsc	status,2,c
  2615  00DABA  D767               	goto	l4836
  2616  00DABC  0A03               	xorlw	3	; case 2
  2617  00DABE  B4D8               	btfsc	status,2,c
  2618  00DAC0  D77B               	goto	l4838
  2619  00DAC2  0A01               	xorlw	1	; case 3
  2620  00DAC4  B4D8               	btfsc	status,2,c
  2621  00DAC6  D78F               	goto	l4840
  2622  00DAC8  0A07               	xorlw	7	; case 4
  2623  00DACA  B4D8               	btfsc	status,2,c
  2624  00DACC  D7A3               	goto	l4842
  2625  00DACE  0A01               	xorlw	1	; case 5
  2626  00DAD0  B4D8               	btfsc	status,2,c
  2627  00DAD2  D7B7               	goto	l4844
  2628  00DAD4  0A03               	xorlw	3	; case 6
  2629  00DAD6  B4D8               	btfsc	status,2,c
  2630  00DAD8  D7CB               	goto	l4846
  2631  00DADA  D000               	goto	l4852
  2632  00DADC                     l4852:
  2633                           
  2634                           ;monografia_main.c: 241: Lcd_Out(fila,columna,buffer1);
  2635  00DADC  C057  F004         	movff	Mostrar_DiaYfecha@columna,Lcd_Out@x
  2636  00DAE0  0EB9               	movlw	low _buffer1
  2637  00DAE2  6E05               	movwf	Lcd_Out@buffer,c
  2638  00DAE4  0E00               	movlw	high _buffer1
  2639  00DAE6  6E06               	movwf	Lcd_Out@buffer+1,c
  2640  00DAE8  5055               	movf	Mostrar_DiaYfecha@fila,w,c
  2641  00DAEA  ECCB  F061         	call	_Lcd_Out
  2642  00DAEE  0012               	return		;funcret
  2643  00DAF0                     __end_of_Mostrar_DiaYfecha:
  2644                           	opt stack 0
  2645                           tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           postinc0	equ	0xFEE
  2650                           wreg	equ	0xFE8
  2651                           postdec1	equ	0xFE5
  2652                           fsr1l	equ	0xFE1
  2653                           status	equ	0xFD8
  2654                           
  2655 ;; *************** function _Encender_vidriera *****************
  2656 ;; Defined at:
  2657 ;;		line 746 in file "../monografia_main.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;		None
  2662 ;; Return value:  Size  Location     Type
  2663 ;;		None               void
  2664 ;; Registers used:
  2665 ;;		wreg, status,2, status,0
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2674 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2675 ;;Total ram usage:        1 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_Iniciar_Display
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text6
  2685  00C6BA                     __ptext6:
  2686                           	opt stack 0
  2687  00C6BA                     _Encender_vidriera:
  2688                           	opt stack 29
  2689                           
  2690                           ;monografia_main.c: 748: if(hora_vdr_c < hora || hora < hora_vdr_a ){
  2691                           
  2692                           ;incstack = 0
  2693  00C6BA  0100               	movlb	0	; () banked
  2694  00C6BC  51DF               	movf	_hora& (0+255),w,b
  2695  00C6BE  0100               	movlb	0	; () banked
  2696  00C6C0  5DE3               	subwf	_hora_vdr_c& (0+255),w,b
  2697  00C6C2  0100               	movlb	0	; () banked
  2698  00C6C4  51E4               	movf	(_hora_vdr_c+1)& (0+255),w,b
  2699  00C6C6  0A80               	xorlw	128
  2700  00C6C8  6E01               	movwf	??_Encender_vidriera& (0+255),c
  2701  00C6CA  0100               	movlb	0	; () banked
  2702  00C6CC  51E0               	movf	(_hora+1)& (0+255),w,b
  2703  00C6CE  0A80               	xorlw	128
  2704  00C6D0  5801               	subwfb	??_Encender_vidriera& (0+255),w,c
  2705  00C6D2  A0D8               	btfss	status,0,c
  2706  00C6D4  D00E               	goto	l456
  2707                           
  2708                           ; BSR set to: 0
  2709  00C6D6  0100               	movlb	0	; () banked
  2710  00C6D8  51E1               	movf	_hora_vdr_a& (0+255),w,b
  2711  00C6DA  0100               	movlb	0	; () banked
  2712  00C6DC  5DDF               	subwf	_hora& (0+255),w,b
  2713  00C6DE  0100               	movlb	0	; () banked
  2714  00C6E0  51E0               	movf	(_hora+1)& (0+255),w,b
  2715  00C6E2  0A80               	xorlw	128
  2716  00C6E4  6E01               	movwf	??_Encender_vidriera& (0+255),c
  2717  00C6E6  0100               	movlb	0	; () banked
  2718  00C6E8  51E2               	movf	(_hora_vdr_a+1)& (0+255),w,b
  2719  00C6EA  0A80               	xorlw	128
  2720  00C6EC  5801               	subwfb	??_Encender_vidriera& (0+255),w,c
  2721  00C6EE  B0D8               	btfsc	status,0,c
  2722  00C6F0  D003               	goto	l454
  2723  00C6F2                     l456:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;monografia_main.c: 749: LATBbits.LATB7 = 1 == 1;
  2727  00C6F2  8E8A               	bsf	3978,7,c	;volatile
  2728                           
  2729                           ;monografia_main.c: 750: PORTCbits.RC7 = 1 == 1;
  2730  00C6F4  8E82               	bsf	3970,7,c	;volatile
  2731                           
  2732                           ;monografia_main.c: 751: }else{
  2733  00C6F6  D003               	goto	l4882
  2734  00C6F8                     l454:
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;monografia_main.c: 752: LATBbits.LATB7 = 1 == 0;
  2738  00C6F8  9E8A               	bcf	3978,7,c	;volatile
  2739                           
  2740                           ;monografia_main.c: 753: PORTCbits.RC7 = 1 == 0;
  2741  00C6FA  9E82               	bcf	3970,7,c	;volatile
  2742  00C6FC  D000               	goto	l4882
  2743  00C6FE                     l4882:
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;monografia_main.c: 754: }
  2747                           ;monografia_main.c: 755: if(hora_vdr_c == hora){
  2748  00C6FE  0100               	movlb	0	; () banked
  2749  00C700  51DF               	movf	_hora& (0+255),w,b
  2750  00C702  0100               	movlb	0	; () banked
  2751  00C704  19E3               	xorwf	_hora_vdr_c& (0+255),w,b
  2752  00C706  E11A               	bnz	l4888
  2753  00C708  0100               	movlb	0	; () banked
  2754  00C70A  51E0               	movf	(_hora+1)& (0+255),w,b
  2755  00C70C  0100               	movlb	0	; () banked
  2756  00C70E  19E4               	xorwf	(_hora_vdr_c+1)& (0+255),w,b
  2757  00C710  A4D8               	btfss	status,2,c
  2758  00C712  D014               	goto	l4888
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;monografia_main.c: 756: if(minuto_vdr_c <= minuto){
  2762  00C714  0100               	movlb	0	; () banked
  2763  00C716  51B4               	movf	_minuto_vdr_c& (0+255),w,b
  2764  00C718  0100               	movlb	0	; () banked
  2765  00C71A  5DE7               	subwf	_minuto& (0+255),w,b
  2766  00C71C  0100               	movlb	0	; () banked
  2767  00C71E  51E8               	movf	(_minuto+1)& (0+255),w,b
  2768  00C720  0A80               	xorlw	128
  2769  00C722  6E01               	movwf	??_Encender_vidriera& (0+255),c
  2770  00C724  0100               	movlb	0	; () banked
  2771  00C726  51B5               	movf	(_minuto_vdr_c+1)& (0+255),w,b
  2772  00C728  0A80               	xorlw	128
  2773  00C72A  5801               	subwfb	??_Encender_vidriera& (0+255),w,c
  2774  00C72C  A0D8               	btfss	status,0,c
  2775  00C72E  D003               	goto	l459
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;monografia_main.c: 757: LATBbits.LATB7 = 1 == 1;
  2779  00C730  8E8A               	bsf	3978,7,c	;volatile
  2780                           
  2781                           ;monografia_main.c: 758: PORTCbits.RC7 = 1 == 1;
  2782  00C732  8E82               	bsf	3970,7,c	;volatile
  2783                           
  2784                           ;monografia_main.c: 759: }else{
  2785  00C734  D003               	goto	l4888
  2786  00C736                     l459:
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;monografia_main.c: 760: LATBbits.LATB7 = 1 == 0;
  2790  00C736  9E8A               	bcf	3978,7,c	;volatile
  2791                           
  2792                           ;monografia_main.c: 761: PORTCbits.RC7 = 1 == 0;
  2793  00C738  9E82               	bcf	3970,7,c	;volatile
  2794                           
  2795                           ; BSR set to: 0
  2796  00C73A  D000               	goto	l4888
  2797  00C73C                     l4888:
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;monografia_main.c: 762: }
  2801                           ;monografia_main.c: 763: }
  2802                           ;monografia_main.c: 764: if( hora == hora_vdr_a){
  2803  00C73C  0100               	movlb	0	; () banked
  2804  00C73E  51E1               	movf	_hora_vdr_a& (0+255),w,b
  2805  00C740  0100               	movlb	0	; () banked
  2806  00C742  19DF               	xorwf	_hora& (0+255),w,b
  2807  00C744  E11A               	bnz	l464
  2808  00C746  0100               	movlb	0	; () banked
  2809  00C748  51E2               	movf	(_hora_vdr_a+1)& (0+255),w,b
  2810  00C74A  0100               	movlb	0	; () banked
  2811  00C74C  19E0               	xorwf	(_hora+1)& (0+255),w,b
  2812  00C74E  A4D8               	btfss	status,2,c
  2813  00C750  0012               	return	
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;monografia_main.c: 765: if(minuto < minuto_vdr_a){
  2817  00C752  0100               	movlb	0	; () banked
  2818  00C754  51E9               	movf	_minuto_vdr_a& (0+255),w,b
  2819  00C756  0100               	movlb	0	; () banked
  2820  00C758  5DE7               	subwf	_minuto& (0+255),w,b
  2821  00C75A  0100               	movlb	0	; () banked
  2822  00C75C  51E8               	movf	(_minuto+1)& (0+255),w,b
  2823  00C75E  0A80               	xorlw	128
  2824  00C760  6E01               	movwf	??_Encender_vidriera& (0+255),c
  2825  00C762  0100               	movlb	0	; () banked
  2826  00C764  51EA               	movf	(_minuto_vdr_a+1)& (0+255),w,b
  2827  00C766  0A80               	xorlw	128
  2828  00C768  5801               	subwfb	??_Encender_vidriera& (0+255),w,c
  2829  00C76A  B0D8               	btfsc	status,0,c
  2830  00C76C  D003               	goto	l462
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;monografia_main.c: 766: LATBbits.LATB7 = 1 == 1;
  2834  00C76E  8E8A               	bsf	3978,7,c	;volatile
  2835                           
  2836                           ;monografia_main.c: 767: PORTCbits.RC7 = 1 == 1;
  2837  00C770  8E82               	bsf	3970,7,c	;volatile
  2838                           
  2839                           ;monografia_main.c: 768: }else{
  2840  00C772  0012               	return	
  2841  00C774                     l462:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;monografia_main.c: 769: LATBbits.LATB7 = 1 == 0;
  2845  00C774  9E8A               	bcf	3978,7,c	;volatile
  2846                           
  2847                           ;monografia_main.c: 770: PORTCbits.RC7 = 1 == 0;
  2848  00C776  9E82               	bcf	3970,7,c	;volatile
  2849                           
  2850                           ; BSR set to: 0
  2851  00C778  0012               	return	
  2852  00C77A                     l464:
  2853                           
  2854                           ; BSR set to: 0
  2855  00C77A  0012               	return		;funcret
  2856  00C77C                     __end_of_Encender_vidriera:
  2857                           	opt stack 0
  2858                           tblptru	equ	0xFF8
  2859                           tblptrh	equ	0xFF7
  2860                           tblptrl	equ	0xFF6
  2861                           tablat	equ	0xFF5
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           postdec1	equ	0xFE5
  2865                           fsr1l	equ	0xFE1
  2866                           status	equ	0xFD8
  2867                           
  2868 ;; *************** function _Encender_Alarma *****************
  2869 ;; Defined at:
  2870 ;;		line 775 in file "../monografia_main.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;		None
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;		None
  2875 ;; Return value:  Size  Location     Type
  2876 ;;		None               void
  2877 ;; Registers used:
  2878 ;;		None
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2888 ;;Total ram usage:        0 bytes
  2889 ;; Hardware stack levels used:    1
  2890 ;; This function calls:
  2891 ;;		Nothing
  2892 ;; This function is called by:
  2893 ;;		_Iniciar_Display
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           	psect	text7
  2898  00BE6C                     __ptext7:
  2899                           	opt stack 0
  2900  00BE6C                     _Encender_Alarma:
  2901                           	opt stack 29
  2902                           
  2903                           ;monografia_main.c: 777: if(PORTCbits.RC7 = 1){
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;incstack = 0
  2907  00BE6C  8E82               	bsf	3970,7,c	;volatile
  2908                           
  2909                           ;monografia_main.c: 778: LATCbits.LATC0 = 1 == 1;
  2910  00BE6E  808B               	bsf	3979,0,c	;volatile
  2911                           
  2912                           ;monografia_main.c: 779: }else{
  2913  00BE70  0012               	return	
  2914                           
  2915                           ;monografia_main.c: 780: LATCbits.LATC0 = 1 == 0;
  2916  00BE72  908B               	bcf	3979,0,c	;volatile
  2917  00BE74  0012               	return	
  2918  00BE76  0012               	return		;funcret
  2919  00BE78                     __end_of_Encender_Alarma:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           postinc0	equ	0xFEE
  2926                           wreg	equ	0xFE8
  2927                           postdec1	equ	0xFE5
  2928                           fsr1l	equ	0xFE1
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function _Actualiza_datos *****************
  2932 ;; Defined at:
  2933 ;;		line 872 in file "../monografia_main.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;		None
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  i               2   69[COMRAM] int 
  2938 ;; Return value:  Size  Location     Type
  2939 ;;		None               void
  2940 ;; Registers used:
  2941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2948 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2950 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2951 ;;Total ram usage:        2 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    3
  2954 ;; This function calls:
  2955 ;;		_Encender_Aire_Calefaccion
  2956 ;;		_Read_RTC
  2957 ;;		_lee_ADC
  2958 ;; This function is called by:
  2959 ;;		_Iniciar_Display
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text8
  2964  00BF50                     __ptext8:
  2965                           	opt stack 0
  2966  00BF50                     _Actualiza_datos:
  2967                           	opt stack 26
  2968                           
  2969                           ;monografia_main.c: 874: Read_RTC();
  2970                           
  2971                           ;incstack = 0
  2972  00BF50  EC52  F06B         	call	_Read_RTC	;wreg free
  2973                           
  2974                           ;monografia_main.c: 875: lee_ADC();
  2975  00BF54  EC51  F05F         	call	_lee_ADC	;wreg free
  2976                           
  2977                           ;monografia_main.c: 876: int i;
  2978                           ;monografia_main.c: 877: i++;
  2979  00BF58  4A46               	infsnz	Actualiza_datos@i,f,c
  2980  00BF5A  2A47               	incf	Actualiza_datos@i+1,f,c
  2981                           
  2982                           ;monografia_main.c: 878: if(i>=9)
  2983  00BF5C  BE47               	btfsc	Actualiza_datos@i+1,7,c
  2984  00BF5E  0012               	return	
  2985  00BF60  5047               	movf	Actualiza_datos@i+1,w,c
  2986  00BF62  E104               	bnz	u5250
  2987  00BF64  0E09               	movlw	9
  2988  00BF66  5C46               	subwf	Actualiza_datos@i,w,c
  2989  00BF68  A0D8               	btfss	status,0,c
  2990  00BF6A  0012               	return	
  2991  00BF6C                     u5250:
  2992                           
  2993                           ;monografia_main.c: 879: {
  2994                           ;monografia_main.c: 880: Encender_Aire_Calefaccion();
  2995  00BF6C  EC21  F064         	call	_Encender_Aire_Calefaccion	;wreg free
  2996                           
  2997                           ;monografia_main.c: 881: i=0;
  2998  00BF70  0E00               	movlw	0
  2999  00BF72  6E47               	movwf	Actualiza_datos@i+1,c
  3000  00BF74  0E00               	movlw	0
  3001  00BF76  6E46               	movwf	Actualiza_datos@i,c
  3002  00BF78  0012               	return	
  3003  00BF7A  0012               	return		;funcret
  3004  00BF7C                     __end_of_Actualiza_datos:
  3005                           	opt stack 0
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           postdec1	equ	0xFE5
  3013                           fsr1l	equ	0xFE1
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _lee_ADC *****************
  3017 ;; Defined at:
  3018 ;;		line 858 in file "../monografia_main.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;		None               void
  3025 ;; Registers used:
  3026 ;;		wreg
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3036 ;;Total ram usage:        0 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_Actualiza_datos
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text9
  3046  00BEA2                     __ptext9:
  3047                           	opt stack 0
  3048  00BEA2                     _lee_ADC:
  3049                           	opt stack 28
  3050                           
  3051                           ;monografia_main.c: 860: ADCON0bits.ADON = 1;
  3052                           
  3053                           ;incstack = 0
  3054  00BEA2  80C2               	bsf	4034,0,c	;volatile
  3055                           
  3056                           ;monografia_main.c: 861: ADCON0bits.GO = 1;
  3057  00BEA4  82C2               	bsf	4034,1,c	;volatile
  3058                           
  3059                           ;monografia_main.c: 862: while(ADCON0bits.GO);
  3060  00BEA6  D000               	goto	l478
  3061  00BEA8                     l478:
  3062  00BEA8  B2C2               	btfsc	4034,1,c	;volatile
  3063  00BEAA  D7FE               	goto	l478
  3064                           
  3065                           ;monografia_main.c: 863: _delay((unsigned long)((1)*(4000000/4000.0)));
  3066  00BEAC  0EFA               	movlw	250
  3067  00BEAE                     u6467:
  3068  00BEAE  F000               	nop	
  3069  00BEB0  2EE8               	decfsz	wreg,f,c
  3070  00BEB2  D7FD               	goto	u6467
  3071                           
  3072                           ;monografia_main.c: 864: lectura = ADRESH;
  3073  00BEB4  CFC4 F0B8          	movff	4036,_lectura	;volatile
  3074                           
  3075                           ;monografia_main.c: 865: ADCON0bits.ADON = 0;
  3076  00BEB8  90C2               	bcf	4034,0,c	;volatile
  3077  00BEBA  0012               	return		;funcret
  3078  00BEBC                     __end_of_lee_ADC:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           postinc0	equ	0xFEE
  3085                           wreg	equ	0xFE8
  3086                           postdec1	equ	0xFE5
  3087                           fsr1l	equ	0xFE1
  3088                           status	equ	0xFD8
  3089                           
  3090 ;; *************** function _Encender_Aire_Calefaccion *****************
  3091 ;; Defined at:
  3092 ;;		line 639 in file "../monografia_main.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  aux_temp        3   66[COMRAM] float 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;		None               void
  3099 ;; Registers used:
  3100 ;;		wreg, status,2, status,0, cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3107 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3109 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3110 ;;Total ram usage:        3 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    2
  3113 ;; This function calls:
  3114 ;;		___awtoft
  3115 ;;		___ftadd
  3116 ;;		___ftge
  3117 ;; This function is called by:
  3118 ;;		_Iniciar_Display
  3119 ;;		_Actualiza_datos
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text10
  3124  00C842                     __ptext10:
  3125                           	opt stack 0
  3126  00C842                     _Encender_Aire_Calefaccion:
  3127                           	opt stack 27
  3128                           
  3129                           ;monografia_main.c: 641: float aux_temp = (float)temperatura;
  3130                           
  3131                           ;incstack = 0
  3132  00C842  C0EB  F009         	movff	_temperatura,___awtoft@c
  3133  00C846  C0EC  F00A         	movff	_temperatura+1,___awtoft@c+1
  3134  00C84A  ECBE  F05F         	call	___awtoft	;wreg free
  3135  00C84E  C009  F043         	movff	?___awtoft,Encender_Aire_Calefaccion@aux_temp
  3136  00C852  C00A  F044         	movff	?___awtoft+1,Encender_Aire_Calefaccion@aux_temp+1
  3137  00C856  C00B  F045         	movff	?___awtoft+2,Encender_Aire_Calefaccion@aux_temp+2
  3138                           
  3139                           ;monografia_main.c: 642: if(grados > aux_temp +2){
  3140  00C85A  0E00               	movlw	0
  3141  00C85C  6E31               	movwf	___ftadd@f2,c
  3142  00C85E  0E00               	movlw	0
  3143  00C860  6E32               	movwf	___ftadd@f2+1,c
  3144  00C862  0E40               	movlw	64
  3145  00C864  6E33               	movwf	___ftadd@f2+2,c
  3146  00C866  C043  F02E         	movff	Encender_Aire_Calefaccion@aux_temp,___ftadd@f1
  3147  00C86A  C044  F02F         	movff	Encender_Aire_Calefaccion@aux_temp+1,___ftadd@f1+1
  3148  00C86E  C045  F030         	movff	Encender_Aire_Calefaccion@aux_temp+2,___ftadd@f1+2
  3149  00C872  EC46  F06E         	call	___ftadd	;wreg free
  3150  00C876  C02E  F03A         	movff	?___ftadd,___ftge@ff1
  3151  00C87A  C02F  F03B         	movff	?___ftadd+1,___ftge@ff1+1
  3152  00C87E  C030  F03C         	movff	?___ftadd+2,___ftge@ff1+2
  3153  00C882  C0D6  F03D         	movff	_grados,___ftge@ff2
  3154  00C886  C0D7  F03E         	movff	_grados+1,___ftge@ff2+1
  3155  00C88A  C0D8  F03F         	movff	_grados+2,___ftge@ff2+2
  3156  00C88E  EC15  F062         	call	___ftge	;wreg free
  3157  00C892  B0D8               	btfsc	status,0,c
  3158  00C894  D002               	goto	l4698
  3159                           
  3160                           ;monografia_main.c: 643: LATBbits.LATB6 = 1 == 1;
  3161  00C896  8C8A               	bsf	3978,6,c	;volatile
  3162  00C898  D000               	goto	l4698
  3163  00C89A                     l4698:
  3164                           
  3165                           ;monografia_main.c: 644: }
  3166                           ;monografia_main.c: 645: if(grados <= aux_temp){
  3167  00C89A  C043  F03A         	movff	Encender_Aire_Calefaccion@aux_temp,___ftge@ff1
  3168  00C89E  C044  F03B         	movff	Encender_Aire_Calefaccion@aux_temp+1,___ftge@ff1+1
  3169  00C8A2  C045  F03C         	movff	Encender_Aire_Calefaccion@aux_temp+2,___ftge@ff1+2
  3170  00C8A6  C0D6  F03D         	movff	_grados,___ftge@ff2
  3171  00C8AA  C0D7  F03E         	movff	_grados+1,___ftge@ff2+1
  3172  00C8AE  C0D8  F03F         	movff	_grados+2,___ftge@ff2+2
  3173  00C8B2  EC15  F062         	call	___ftge	;wreg free
  3174  00C8B6  A0D8               	btfss	status,0,c
  3175  00C8B8  D002               	goto	l4702
  3176                           
  3177                           ;monografia_main.c: 646: LATBbits.LATB6 = 1 == 0;
  3178  00C8BA  9C8A               	bcf	3978,6,c	;volatile
  3179  00C8BC  D000               	goto	l4702
  3180  00C8BE                     l4702:
  3181                           
  3182                           ;monografia_main.c: 647: }
  3183                           ;monografia_main.c: 648: if(grados < aux_temp - 3){
  3184  00C8BE  C0D6  F03A         	movff	_grados,___ftge@ff1
  3185  00C8C2  C0D7  F03B         	movff	_grados+1,___ftge@ff1+1
  3186  00C8C6  C0D8  F03C         	movff	_grados+2,___ftge@ff1+2
  3187  00C8CA  0E00               	movlw	0
  3188  00C8CC  6E31               	movwf	___ftadd@f2,c
  3189  00C8CE  0E40               	movlw	64
  3190  00C8D0  6E32               	movwf	___ftadd@f2+1,c
  3191  00C8D2  0EC0               	movlw	192
  3192  00C8D4  6E33               	movwf	___ftadd@f2+2,c
  3193  00C8D6  C043  F02E         	movff	Encender_Aire_Calefaccion@aux_temp,___ftadd@f1
  3194  00C8DA  C044  F02F         	movff	Encender_Aire_Calefaccion@aux_temp+1,___ftadd@f1+1
  3195  00C8DE  C045  F030         	movff	Encender_Aire_Calefaccion@aux_temp+2,___ftadd@f1+2
  3196  00C8E2  EC46  F06E         	call	___ftadd	;wreg free
  3197  00C8E6  C02E  F03D         	movff	?___ftadd,___ftge@ff2
  3198  00C8EA  C02F  F03E         	movff	?___ftadd+1,___ftge@ff2+1
  3199  00C8EE  C030  F03F         	movff	?___ftadd+2,___ftge@ff2+2
  3200  00C8F2  EC15  F062         	call	___ftge	;wreg free
  3201  00C8F6  B0D8               	btfsc	status,0,c
  3202  00C8F8  D003               	goto	l4706
  3203                           
  3204                           ;monografia_main.c: 649: LATAbits.LATA7 = 1 == 1;
  3205  00C8FA  8E89               	bsf	3977,7,c	;volatile
  3206                           
  3207                           ;monografia_main.c: 650: LATBbits.LATB6 = 1 == 0;
  3208  00C8FC  9C8A               	bcf	3978,6,c	;volatile
  3209  00C8FE  D000               	goto	l4706
  3210  00C900                     l4706:
  3211                           
  3212                           ;monografia_main.c: 651: }
  3213                           ;monografia_main.c: 652: if(grados >= aux_temp){
  3214  00C900  C0D6  F03A         	movff	_grados,___ftge@ff1
  3215  00C904  C0D7  F03B         	movff	_grados+1,___ftge@ff1+1
  3216  00C908  C0D8  F03C         	movff	_grados+2,___ftge@ff1+2
  3217  00C90C  C043  F03D         	movff	Encender_Aire_Calefaccion@aux_temp,___ftge@ff2
  3218  00C910  C044  F03E         	movff	Encender_Aire_Calefaccion@aux_temp+1,___ftge@ff2+1
  3219  00C914  C045  F03F         	movff	Encender_Aire_Calefaccion@aux_temp+2,___ftge@ff2+2
  3220  00C918  EC15  F062         	call	___ftge	;wreg free
  3221  00C91C  A0D8               	btfss	status,0,c
  3222  00C91E  0012               	return	
  3223                           
  3224                           ;monografia_main.c: 653: LATAbits.LATA7 = 1 == 0;
  3225  00C920  9E89               	bcf	3977,7,c	;volatile
  3226  00C922  0012               	return	
  3227  00C924  0012               	return		;funcret
  3228  00C926                     __end_of_Encender_Aire_Calefaccion:
  3229                           	opt stack 0
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           postinc0	equ	0xFEE
  3235                           wreg	equ	0xFE8
  3236                           postdec1	equ	0xFE5
  3237                           fsr1l	equ	0xFE1
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function ___awtoft *****************
  3241 ;; Defined at:
  3242 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  c               2    8[COMRAM] int 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  sign            1   11[COMRAM] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  3    8[COMRAM] float 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, status,0, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3256 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3259 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3260 ;;Total ram usage:        4 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    1
  3263 ;; This function calls:
  3264 ;;		___ftpack
  3265 ;; This function is called by:
  3266 ;;		_Encender_Aire_Calefaccion
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text11
  3271  00BF7C                     __ptext11:
  3272                           	opt stack 0
  3273  00BF7C                     ___awtoft:
  3274                           	opt stack 27
  3275                           
  3276                           ;incstack = 0
  3277  00BF7C  0E00               	movlw	0
  3278  00BF7E  6E0C               	movwf	___awtoft@sign,c
  3279  00BF80  AE0A               	btfss	___awtoft@c+1,7,c
  3280  00BF82  D007               	goto	l4640
  3281  00BF84  6C09               	negf	___awtoft@c,c
  3282  00BF86  1E0A               	comf	___awtoft@c+1,f,c
  3283  00BF88  B0D8               	btfsc	status,0,c
  3284  00BF8A  2A0A               	incf	___awtoft@c+1,f,c
  3285  00BF8C  0E01               	movlw	1
  3286  00BF8E  6E0C               	movwf	___awtoft@sign,c
  3287  00BF90  D000               	goto	l4640
  3288  00BF92                     l4640:
  3289  00BF92  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3290  00BF96  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3291  00BF9A  6A03               	clrf	___ftpack@arg+2,c
  3292  00BF9C  0E8E               	movlw	142
  3293  00BF9E  6E04               	movwf	___ftpack@exp,c
  3294  00BFA0  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3295  00BFA4  ECBE  F063         	call	___ftpack	;wreg free
  3296  00BFA8  C001  F009         	movff	?___ftpack,?___awtoft
  3297  00BFAC  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3298  00BFB0  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3299  00BFB4  0012               	return	
  3300  00BFB6  0012               	return		;funcret
  3301  00BFB8                     __end_of___awtoft:
  3302                           	opt stack 0
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           postinc0	equ	0xFEE
  3308                           wreg	equ	0xFE8
  3309                           postdec1	equ	0xFE5
  3310                           fsr1l	equ	0xFE1
  3311                           status	equ	0xFD8
  3312                           
  3313 ;; *************** function _Configurar_Pantalla *****************
  3314 ;; Defined at:
  3315 ;;		line 253 in file "../monografia_main.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;  tipo_hora       2   57[BANK0 ] int 
  3320 ;;  tipo_hora       2   55[BANK0 ] int 
  3321 ;; Return value:  Size  Location     Type
  3322 ;;		None               void
  3323 ;; Registers used:
  3324 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3331 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3333 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3334 ;;Total ram usage:        4 bytes
  3335 ;; Hardware stack levels used:    1
  3336 ;; Hardware stack levels required when called:    6
  3337 ;; This function calls:
  3338 ;;		_Configurar_Dia
  3339 ;;		_Configurar_Fecha
  3340 ;;		_Configurar_Hora
  3341 ;;		_Configurar_Hora_Grl
  3342 ;;		_Lcd_Cmd
  3343 ;;		_Lcd_Out
  3344 ;;		_Programar_Temperatura
  3345 ;;		_Read_RTC
  3346 ;;		_sprintf
  3347 ;; This function is called by:
  3348 ;;		_main
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text12
  3353  00E318                     __ptext12:
  3354                           	opt stack 0
  3355  00E318                     _Configurar_Pantalla:
  3356                           	opt stack 24
  3357                           
  3358                           ;monografia_main.c: 255: if(PORTAbits.RA2 == 0){
  3359                           
  3360                           ;incstack = 0
  3361  00E318  B480               	btfsc	3968,2,c	;volatile
  3362  00E31A  0012               	return	
  3363                           
  3364                           ;monografia_main.c: 256: config = 1;
  3365  00E31C  0E00               	movlw	0
  3366  00E31E  0100               	movlb	0	; () banked
  3367  00E320  6FAF               	movwf	(_config+1)& (0+255),b
  3368  00E322  0E01               	movlw	1
  3369  00E324  6FAE               	movwf	_config& (0+255),b
  3370                           
  3371                           ;monografia_main.c: 257: aux_fecha=0;
  3372  00E326  0E00               	movlw	0
  3373  00E328  0100               	movlb	0	; () banked
  3374  00E32A  6FA9               	movwf	(_aux_fecha+1)& (0+255),b
  3375  00E32C  0E00               	movlw	0
  3376  00E32E  6FA8               	movwf	_aux_fecha& (0+255),b
  3377                           
  3378                           ;monografia_main.c: 258: aux_hora=0;
  3379  00E330  0E00               	movlw	0
  3380  00E332  0100               	movlb	0	; () banked
  3381  00E334  6FAB               	movwf	(_aux_hora+1)& (0+255),b
  3382  00E336  0E00               	movlw	0
  3383  00E338  6FAA               	movwf	_aux_hora& (0+255),b
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;monografia_main.c: 259: if(aux_fecha > 3){
  3387  00E33A  0100               	movlb	0	; () banked
  3388  00E33C  BFA9               	btfsc	(_aux_fecha+1)& (0+255),7,b
  3389  00E33E  D00E               	goto	l5328
  3390  00E340  0100               	movlb	0	; () banked
  3391  00E342  51A9               	movf	(_aux_fecha+1)& (0+255),w,b
  3392  00E344  E105               	bnz	u6250
  3393  00E346  0E04               	movlw	4
  3394  00E348  0100               	movlb	0	; () banked
  3395  00E34A  5DA8               	subwf	_aux_fecha& (0+255),w,b
  3396  00E34C  A0D8               	btfss	status,0,c
  3397  00E34E  D006               	goto	l5328
  3398  00E350                     u6250:
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;monografia_main.c: 260: aux_fecha =1;
  3402  00E350  0E00               	movlw	0
  3403  00E352  0100               	movlb	0	; () banked
  3404  00E354  6FA9               	movwf	(_aux_fecha+1)& (0+255),b
  3405  00E356  0E01               	movlw	1
  3406  00E358  6FA8               	movwf	_aux_fecha& (0+255),b
  3407  00E35A  D000               	goto	l5328
  3408  00E35C                     l5328:
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;monografia_main.c: 261: }
  3412                           ;monografia_main.c: 262: if(aux_hora > 2){
  3413  00E35C  0100               	movlb	0	; () banked
  3414  00E35E  BFAB               	btfsc	(_aux_hora+1)& (0+255),7,b
  3415  00E360  D00E               	goto	l5332
  3416  00E362  0100               	movlb	0	; () banked
  3417  00E364  51AB               	movf	(_aux_hora+1)& (0+255),w,b
  3418  00E366  E105               	bnz	u6260
  3419  00E368  0E03               	movlw	3
  3420  00E36A  0100               	movlb	0	; () banked
  3421  00E36C  5DAA               	subwf	_aux_hora& (0+255),w,b
  3422  00E36E  A0D8               	btfss	status,0,c
  3423  00E370  D006               	goto	l5332
  3424  00E372                     u6260:
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;monografia_main.c: 263: aux_hora =1;
  3428  00E372  0E00               	movlw	0
  3429  00E374  0100               	movlb	0	; () banked
  3430  00E376  6FAB               	movwf	(_aux_hora+1)& (0+255),b
  3431  00E378  0E01               	movlw	1
  3432  00E37A  6FAA               	movwf	_aux_hora& (0+255),b
  3433  00E37C  D000               	goto	l5332
  3434  00E37E                     l5332:
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;monografia_main.c: 264: }
  3438                           ;monografia_main.c: 266: Lcd_Cmd(1);
  3439  00E37E  0E01               	movlw	1
  3440  00E380  EC92  F066         	call	_Lcd_Cmd
  3441                           
  3442                           ;monografia_main.c: 267: Read_RTC();
  3443  00E384  EC52  F06B         	call	_Read_RTC	;wreg free
  3444                           
  3445                           ;monografia_main.c: 268: Lcd_Out(1,0,"CONFIGURAR SHOPPING");
  3446  00E388  0E00               	movlw	0
  3447  00E38A  6E04               	movwf	Lcd_Out@x,c
  3448  00E38C  0E5A               	movlw	low STR_13
  3449  00E38E  6E05               	movwf	Lcd_Out@buffer,c
  3450  00E390  0EFF               	movlw	high STR_13
  3451  00E392  6E06               	movwf	Lcd_Out@buffer+1,c
  3452  00E394  0E01               	movlw	1
  3453  00E396  ECCB  F061         	call	_Lcd_Out
  3454                           
  3455                           ;monografia_main.c: 269: sprintf(buffer1,"%02u/%02u/%02u",dia,mes,anio);
  3456  00E39A  0EB9               	movlw	low _buffer1
  3457  00E39C  6E43               	movwf	sprintf@sp,c
  3458  00E39E  0E00               	movlw	high _buffer1
  3459  00E3A0  6E44               	movwf	sprintf@sp+1,c
  3460  00E3A2  0E0A               	movlw	low (STR_12+7)
  3461  00E3A4  6E45               	movwf	sprintf@f,c
  3462  00E3A6  0EFF               	movlw	high (STR_12+7)
  3463  00E3A8  6E46               	movwf	sprintf@f+1,c
  3464  00E3AA  C0DB  F047         	movff	_dia,?_sprintf+4
  3465  00E3AE  C0DC  F048         	movff	_dia+1,?_sprintf+5
  3466  00E3B2  C0E5  F049         	movff	_mes,?_sprintf+6
  3467  00E3B6  C0E6  F04A         	movff	_mes+1,?_sprintf+7
  3468  00E3BA  C0D9  F04B         	movff	_anio,?_sprintf+8
  3469  00E3BE  C0DA  F04C         	movff	_anio+1,?_sprintf+9
  3470  00E3C2  EC37  F078         	call	_sprintf	;wreg free
  3471                           
  3472                           ;monografia_main.c: 270: Lcd_Out(2,10,buffer1);
  3473  00E3C6  0E0A               	movlw	10
  3474  00E3C8  6E04               	movwf	Lcd_Out@x,c
  3475  00E3CA  0EB9               	movlw	low _buffer1
  3476  00E3CC  6E05               	movwf	Lcd_Out@buffer,c
  3477  00E3CE  0E00               	movlw	high _buffer1
  3478  00E3D0  6E06               	movwf	Lcd_Out@buffer+1,c
  3479  00E3D2  0E02               	movlw	2
  3480  00E3D4  ECCB  F061         	call	_Lcd_Out
  3481                           
  3482                           ;monografia_main.c: 271: sprintf(buffer1,"%02u:%02u ",hora,minuto);
  3483  00E3D8  0EB9               	movlw	low _buffer1
  3484  00E3DA  6E43               	movwf	sprintf@sp,c
  3485  00E3DC  0E00               	movlw	high _buffer1
  3486  00E3DE  6E44               	movwf	sprintf@sp+1,c
  3487  00E3E0  0E73               	movlw	low (STR_1+5)
  3488  00E3E2  6E45               	movwf	sprintf@f,c
  3489  00E3E4  0EFF               	movlw	high (STR_1+5)
  3490  00E3E6  6E46               	movwf	sprintf@f+1,c
  3491  00E3E8  C0DF  F047         	movff	_hora,?_sprintf+4
  3492  00E3EC  C0E0  F048         	movff	_hora+1,?_sprintf+5
  3493  00E3F0  C0E7  F049         	movff	_minuto,?_sprintf+6
  3494  00E3F4  C0E8  F04A         	movff	_minuto+1,?_sprintf+7
  3495  00E3F8  EC37  F078         	call	_sprintf	;wreg free
  3496                           
  3497                           ;monografia_main.c: 272: Lcd_Out(3,0,buffer1);
  3498  00E3FC  0E00               	movlw	0
  3499  00E3FE  6E04               	movwf	Lcd_Out@x,c
  3500  00E400  0EB9               	movlw	low _buffer1
  3501  00E402  6E05               	movwf	Lcd_Out@buffer,c
  3502  00E404  0E00               	movlw	high _buffer1
  3503  00E406  6E06               	movwf	Lcd_Out@buffer+1,c
  3504  00E408  0E03               	movlw	3
  3505  00E40A  ECCB  F061         	call	_Lcd_Out
  3506                           
  3507                           ;monografia_main.c: 273: sprintf(buffer1,"TempPro:%02u ",temperatura);
  3508  00E40E  0EB9               	movlw	low _buffer1
  3509  00E410  6E43               	movwf	sprintf@sp,c
  3510  00E412  0E00               	movlw	high _buffer1
  3511  00E414  6E44               	movwf	sprintf@sp+1,c
  3512  00E416  0E7E               	movlw	low STR_3
  3513  00E418  6E45               	movwf	sprintf@f,c
  3514  00E41A  0EFF               	movlw	high STR_3
  3515  00E41C  6E46               	movwf	sprintf@f+1,c
  3516  00E41E  C0EB  F047         	movff	_temperatura,?_sprintf+4
  3517  00E422  C0EC  F048         	movff	_temperatura+1,?_sprintf+5
  3518  00E426  EC37  F078         	call	_sprintf	;wreg free
  3519                           
  3520                           ;monografia_main.c: 274: Lcd_Out(3,7,buffer1);
  3521  00E42A  0E07               	movlw	7
  3522  00E42C  6E04               	movwf	Lcd_Out@x,c
  3523  00E42E  0EB9               	movlw	low _buffer1
  3524  00E430  6E05               	movwf	Lcd_Out@buffer,c
  3525  00E432  0E00               	movlw	high _buffer1
  3526  00E434  6E06               	movwf	Lcd_Out@buffer+1,c
  3527  00E436  0E03               	movlw	3
  3528  00E438  ECCB  F061         	call	_Lcd_Out
  3529                           
  3530                           ;monografia_main.c: 275: sprintf(buffer1,"Vidriera:%02u:%02u-%02u:%02u", hora_vdr_c,minu
      +                          to_vdr_c,hora_vdr_a,minuto_vdr_a);
  3531  00E43C  0EB9               	movlw	low _buffer1
  3532  00E43E  6E43               	movwf	sprintf@sp,c
  3533  00E440  0E00               	movlw	high _buffer1
  3534  00E442  6E44               	movwf	sprintf@sp+1,c
  3535  00E444  0E9F               	movlw	low STR_5
  3536  00E446  6E45               	movwf	sprintf@f,c
  3537  00E448  0EFE               	movlw	high STR_5
  3538  00E44A  6E46               	movwf	sprintf@f+1,c
  3539  00E44C  C0E3  F047         	movff	_hora_vdr_c,?_sprintf+4
  3540  00E450  C0E4  F048         	movff	_hora_vdr_c+1,?_sprintf+5
  3541  00E454  C0B4  F049         	movff	_minuto_vdr_c,?_sprintf+6
  3542  00E458  C0B5  F04A         	movff	_minuto_vdr_c+1,?_sprintf+7
  3543  00E45C  C0E1  F04B         	movff	_hora_vdr_a,?_sprintf+8
  3544  00E460  C0E2  F04C         	movff	_hora_vdr_a+1,?_sprintf+9
  3545  00E464  C0E9  F04D         	movff	_minuto_vdr_a,?_sprintf+10
  3546  00E468  C0EA  F04E         	movff	_minuto_vdr_a+1,?_sprintf+11
  3547  00E46C  EC37  F078         	call	_sprintf	;wreg free
  3548                           
  3549                           ;monografia_main.c: 276: Lcd_Out(4,0,buffer1);
  3550  00E470  0E00               	movlw	0
  3551  00E472  6E04               	movwf	Lcd_Out@x,c
  3552  00E474  0EB9               	movlw	low _buffer1
  3553  00E476  6E05               	movwf	Lcd_Out@buffer,c
  3554  00E478  0E00               	movlw	high _buffer1
  3555  00E47A  6E06               	movwf	Lcd_Out@buffer+1,c
  3556  00E47C  0E04               	movlw	4
  3557  00E47E  ECCB  F061         	call	_Lcd_Out
  3558                           
  3559                           ;monografia_main.c: 278: if(config == 1){
  3560  00E482  0100               	movlb	0	; () banked
  3561  00E484  05AE               	decf	_config& (0+255),w,b
  3562  00E486  0100               	movlb	0	; () banked
  3563  00E488  11AF               	iorwf	(_config+1)& (0+255),w,b
  3564  00E48A  A4D8               	btfss	status,2,c
  3565  00E48C  D003               	goto	l5358
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;monografia_main.c: 280: Configurar_Dia();
  3569  00E48E  EC46  F068         	call	_Configurar_Dia	;wreg free
  3570  00E492  D000               	goto	l5358
  3571  00E494                     l5358:
  3572                           
  3573                           ;monografia_main.c: 281: }
  3574                           ;monografia_main.c: 282: if(config == 2){
  3575  00E494  0E02               	movlw	2
  3576  00E496  0100               	movlb	0	; () banked
  3577  00E498  19AE               	xorwf	_config& (0+255),w,b
  3578  00E49A  0100               	movlb	0	; () banked
  3579  00E49C  11AF               	iorwf	(_config+1)& (0+255),w,b
  3580  00E49E  A4D8               	btfss	status,2,c
  3581  00E4A0  D00B               	goto	l5362
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;monografia_main.c: 283: Configurar_Fecha(config,aux_fecha);
  3585  00E4A2  C0AE  F07F         	movff	_config,Configurar_Fecha@opcion
  3586  00E4A6  C0AF  F080         	movff	_config+1,Configurar_Fecha@opcion+1
  3587  00E4AA  C0A8  F081         	movff	_aux_fecha,Configurar_Fecha@aux_fecha
  3588  00E4AE  C0A9  F082         	movff	_aux_fecha+1,Configurar_Fecha@aux_fecha+1
  3589  00E4B2  EC83  F074         	call	_Configurar_Fecha	;wreg free
  3590  00E4B6  D000               	goto	l5362
  3591  00E4B8                     l5362:
  3592                           
  3593                           ;monografia_main.c: 284: }
  3594                           ;monografia_main.c: 285: if(config == 3){
  3595  00E4B8  0E03               	movlw	3
  3596  00E4BA  0100               	movlb	0	; () banked
  3597  00E4BC  19AE               	xorwf	_config& (0+255),w,b
  3598  00E4BE  0100               	movlb	0	; () banked
  3599  00E4C0  11AF               	iorwf	(_config+1)& (0+255),w,b
  3600  00E4C2  A4D8               	btfss	status,2,c
  3601  00E4C4  D00B               	goto	l5366
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;monografia_main.c: 286: Configurar_Hora(config,aux_hora);
  3605  00E4C6  C0AE  F07F         	movff	_config,Configurar_Hora@opcion
  3606  00E4CA  C0AF  F080         	movff	_config+1,Configurar_Hora@opcion+1
  3607  00E4CE  C0AA  F081         	movff	_aux_hora,Configurar_Hora@aux_hora
  3608  00E4D2  C0AB  F082         	movff	_aux_hora+1,Configurar_Hora@aux_hora+1
  3609  00E4D6  EC4F  F070         	call	_Configurar_Hora	;wreg free
  3610  00E4DA  D000               	goto	l5366
  3611  00E4DC                     l5366:
  3612                           
  3613                           ;monografia_main.c: 287: }
  3614                           ;monografia_main.c: 288: if(config == 4){
  3615  00E4DC  0E04               	movlw	4
  3616  00E4DE  0100               	movlb	0	; () banked
  3617  00E4E0  19AE               	xorwf	_config& (0+255),w,b
  3618  00E4E2  0100               	movlb	0	; () banked
  3619  00E4E4  11AF               	iorwf	(_config+1)& (0+255),w,b
  3620  00E4E6  A4D8               	btfss	status,2,c
  3621  00E4E8  D003               	goto	l5370
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;monografia_main.c: 289: Programar_Temperatura();
  3625  00E4EA  ECAB  F062         	call	_Programar_Temperatura	;wreg free
  3626  00E4EE  D000               	goto	l5370
  3627  00E4F0                     l5370:
  3628                           
  3629                           ;monografia_main.c: 290: }
  3630                           ;monografia_main.c: 291: if(config == 5){
  3631  00E4F0  0E05               	movlw	5
  3632  00E4F2  0100               	movlb	0	; () banked
  3633  00E4F4  19AE               	xorwf	_config& (0+255),w,b
  3634  00E4F6  0100               	movlb	0	; () banked
  3635  00E4F8  11AF               	iorwf	(_config+1)& (0+255),w,b
  3636  00E4FA  A4D8               	btfss	status,2,c
  3637  00E4FC  D026               	goto	l5376
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;monografia_main.c: 292: fila = 4;
  3641  00E4FE  0E00               	movlw	0
  3642  00E500  0100               	movlb	0	; () banked
  3643  00E502  6FB3               	movwf	(_fila+1)& (0+255),b
  3644  00E504  0E04               	movlw	4
  3645  00E506  6FB2               	movwf	_fila& (0+255),b
  3646                           
  3647                           ;monografia_main.c: 293: columna=9;
  3648  00E508  0E00               	movlw	0
  3649  00E50A  0100               	movlb	0	; () banked
  3650  00E50C  6FAD               	movwf	(_columna+1)& (0+255),b
  3651  00E50E  0E09               	movlw	9
  3652  00E510  6FAC               	movwf	_columna& (0+255),b
  3653                           
  3654                           ;monografia_main.c: 294: int tipo_hora=1;
  3655  00E512  0E00               	movlw	0
  3656  00E514  0100               	movlb	0	; () banked
  3657  00E516  6F98               	movwf	(Configurar_Pantalla@tipo_hora+1)& (0+255),b
  3658  00E518  0E01               	movlw	1
  3659  00E51A  6F97               	movwf	Configurar_Pantalla@tipo_hora& (0+255),b
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;monografia_main.c: 295: Configurar_Hora_Grl(config,aux_hora,fila,columna,tipo_hora);
  3663  00E51C  C0AE  F07F         	movff	_config,Configurar_Hora_Grl@opcion
  3664  00E520  C0AF  F080         	movff	_config+1,Configurar_Hora_Grl@opcion+1
  3665  00E524  C0AA  F081         	movff	_aux_hora,Configurar_Hora_Grl@aux_hora
  3666  00E528  C0AB  F082         	movff	_aux_hora+1,Configurar_Hora_Grl@aux_hora+1
  3667  00E52C  C0B2  F083         	movff	_fila,Configurar_Hora_Grl@fila_i
  3668  00E530  C0B3  F084         	movff	_fila+1,Configurar_Hora_Grl@fila_i+1
  3669  00E534  C0AC  F085         	movff	_columna,Configurar_Hora_Grl@columna_i
  3670  00E538  C0AD  F086         	movff	_columna+1,Configurar_Hora_Grl@columna_i+1
  3671  00E53C  C097  F087         	movff	Configurar_Pantalla@tipo_hora,Configurar_Hora_Grl@tipo_hora
  3672  00E540  C098  F088         	movff	Configurar_Pantalla@tipo_hora+1,Configurar_Hora_Grl@tipo_hora+1
  3673  00E544  ECEB  F072         	call	_Configurar_Hora_Grl	;wreg free
  3674  00E548  D000               	goto	l5376
  3675  00E54A                     l5376:
  3676                           
  3677                           ;monografia_main.c: 296: }
  3678                           ;monografia_main.c: 297: if(config == 6){
  3679  00E54A  0E06               	movlw	6
  3680  00E54C  0100               	movlb	0	; () banked
  3681  00E54E  19AE               	xorwf	_config& (0+255),w,b
  3682  00E550  0100               	movlb	0	; () banked
  3683  00E552  11AF               	iorwf	(_config+1)& (0+255),w,b
  3684  00E554  A4D8               	btfss	status,2,c
  3685  00E556  D026               	goto	l5382
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;monografia_main.c: 298: fila=4;
  3689  00E558  0E00               	movlw	0
  3690  00E55A  0100               	movlb	0	; () banked
  3691  00E55C  6FB3               	movwf	(_fila+1)& (0+255),b
  3692  00E55E  0E04               	movlw	4
  3693  00E560  6FB2               	movwf	_fila& (0+255),b
  3694                           
  3695                           ;monografia_main.c: 299: columna=15;
  3696  00E562  0E00               	movlw	0
  3697  00E564  0100               	movlb	0	; () banked
  3698  00E566  6FAD               	movwf	(_columna+1)& (0+255),b
  3699  00E568  0E0F               	movlw	15
  3700  00E56A  6FAC               	movwf	_columna& (0+255),b
  3701                           
  3702                           ;monografia_main.c: 300: int tipo_hora = 2;
  3703  00E56C  0E00               	movlw	0
  3704  00E56E  0100               	movlb	0	; () banked
  3705  00E570  6F9A               	movwf	(Configurar_Pantalla@tipo_hora_1171+1)& (0+255),b
  3706  00E572  0E02               	movlw	2
  3707  00E574  6F99               	movwf	Configurar_Pantalla@tipo_hora_1171& (0+255),b
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;monografia_main.c: 301: Configurar_Hora_Grl(config,aux_hora,fila,columna,tipo_hora);
  3711  00E576  C0AE  F07F         	movff	_config,Configurar_Hora_Grl@opcion
  3712  00E57A  C0AF  F080         	movff	_config+1,Configurar_Hora_Grl@opcion+1
  3713  00E57E  C0AA  F081         	movff	_aux_hora,Configurar_Hora_Grl@aux_hora
  3714  00E582  C0AB  F082         	movff	_aux_hora+1,Configurar_Hora_Grl@aux_hora+1
  3715  00E586  C0B2  F083         	movff	_fila,Configurar_Hora_Grl@fila_i
  3716  00E58A  C0B3  F084         	movff	_fila+1,Configurar_Hora_Grl@fila_i+1
  3717  00E58E  C0AC  F085         	movff	_columna,Configurar_Hora_Grl@columna_i
  3718  00E592  C0AD  F086         	movff	_columna+1,Configurar_Hora_Grl@columna_i+1
  3719  00E596  C099  F087         	movff	Configurar_Pantalla@tipo_hora_1171,Configurar_Hora_Grl@tipo_hora
  3720  00E59A  C09A  F088         	movff	Configurar_Pantalla@tipo_hora_1171+1,Configurar_Hora_Grl@tipo_hora+1
  3721  00E59E  ECEB  F072         	call	_Configurar_Hora_Grl	;wreg free
  3722  00E5A2  D000               	goto	l5382
  3723  00E5A4                     l5382:
  3724                           
  3725                           ;monografia_main.c: 302: }
  3726                           ;monografia_main.c: 303: if(config > 6){
  3727  00E5A4  0100               	movlb	0	; () banked
  3728  00E5A6  BFAF               	btfsc	(_config+1)& (0+255),7,b
  3729  00E5A8  D011               	goto	l246
  3730  00E5AA  0100               	movlb	0	; () banked
  3731  00E5AC  51AF               	movf	(_config+1)& (0+255),w,b
  3732  00E5AE  E105               	bnz	u6330
  3733  00E5B0  0E07               	movlw	7
  3734  00E5B2  0100               	movlb	0	; () banked
  3735  00E5B4  5DAE               	subwf	_config& (0+255),w,b
  3736  00E5B6  A0D8               	btfss	status,0,c
  3737  00E5B8  D009               	goto	l246
  3738  00E5BA                     u6330:
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;monografia_main.c: 304: Lcd_Cmd(1);
  3742  00E5BA  0E01               	movlw	1
  3743  00E5BC  EC92  F066         	call	_Lcd_Cmd
  3744                           
  3745                           ;monografia_main.c: 305: config = 0;
  3746  00E5C0  0E00               	movlw	0
  3747  00E5C2  0100               	movlb	0	; () banked
  3748  00E5C4  6FAF               	movwf	(_config+1)& (0+255),b
  3749  00E5C6  0E00               	movlw	0
  3750  00E5C8  6FAE               	movwf	_config& (0+255),b
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;monografia_main.c: 306: }
  3754                           ;monografia_main.c: 307: while(PORTAbits.RA2 == 0);
  3755  00E5CA  D000               	goto	l246
  3756  00E5CC                     l246:
  3757  00E5CC  B480               	btfsc	3968,2,c	;volatile
  3758  00E5CE  0012               	return	
  3759  00E5D0  D7FD               	goto	l246
  3760  00E5D2  0012               	return	
  3761  00E5D4  0012               	return		;funcret
  3762  00E5D6                     __end_of_Configurar_Pantalla:
  3763                           	opt stack 0
  3764                           tblptru	equ	0xFF8
  3765                           tblptrh	equ	0xFF7
  3766                           tblptrl	equ	0xFF6
  3767                           tablat	equ	0xFF5
  3768                           postinc0	equ	0xFEE
  3769                           wreg	equ	0xFE8
  3770                           postdec1	equ	0xFE5
  3771                           fsr1l	equ	0xFE1
  3772                           status	equ	0xFD8
  3773                           
  3774 ;; *************** function _Read_RTC *****************
  3775 ;; Defined at:
  3776 ;;		line 826 in file "../monografia_main.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;		None               void
  3783 ;; Registers used:
  3784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3794 ;;Total ram usage:        0 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    1
  3797 ;; This function calls:
  3798 ;;		_RtccReadDate
  3799 ;;		_RtccReadTime
  3800 ;; This function is called by:
  3801 ;;		_Configurar_Pantalla
  3802 ;;		_Actualiza_datos
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text13
  3807  00D6A4                     __ptext13:
  3808                           	opt stack 0
  3809  00D6A4                     _Read_RTC:
  3810                           	opt stack 27
  3811                           
  3812                           ;monografia_main.c: 829: RtccReadTime(&RtccTime);
  3813                           
  3814                           ;incstack = 0
  3815  00D6A4  0ED1               	movlw	low _RtccTime
  3816  00D6A6  6E01               	movwf	RtccReadTime@pTm,c
  3817  00D6A8  0E00               	movlw	high _RtccTime
  3818  00D6AA  6E02               	movwf	RtccReadTime@pTm+1,c
  3819  00D6AC  EC4F  F060         	call	_RtccReadTime	;wreg free
  3820                           
  3821                           ;monografia_main.c: 830: segundo_u=(RtccTime.f.sec & 0x0F);
  3822  00D6B0  0100               	movlb	0	; () banked
  3823  00D6B2  51D2               	movf	(_RtccTime+1)& (0+255),w,b
  3824  00D6B4  0B0F               	andlw	15
  3825  00D6B6  0100               	movlb	0	; () banked
  3826  00D6B8  6FF9               	movwf	_segundo_u& (0+255),b
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;monografia_main.c: 831: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  3830  00D6BA  0100               	movlb	0	; () banked
  3831  00D6BC  39D2               	swapf	(_RtccTime+1)& (0+255),w,b
  3832  00D6BE  0B0F               	andlw	15
  3833  00D6C0  0B0F               	andlw	15
  3834  00D6C2  0100               	movlb	0	; () banked
  3835  00D6C4  6FF8               	movwf	_segundo_d& (0+255),b
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;monografia_main.c: 832: minuto_u=(RtccTime.f.min & 0x0F);
  3839  00D6C6  0100               	movlb	0	; () banked
  3840  00D6C8  51D3               	movf	(_RtccTime+2)& (0+255),w,b
  3841  00D6CA  0B0F               	andlw	15
  3842  00D6CC  0100               	movlb	0	; () banked
  3843  00D6CE  6FF7               	movwf	_minuto_u& (0+255),b
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;monografia_main.c: 833: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  3847  00D6D0  0100               	movlb	0	; () banked
  3848  00D6D2  39D3               	swapf	(_RtccTime+2)& (0+255),w,b
  3849  00D6D4  0B0F               	andlw	15
  3850  00D6D6  0B0F               	andlw	15
  3851  00D6D8  0100               	movlb	0	; () banked
  3852  00D6DA  6FF6               	movwf	_minuto_d& (0+255),b
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;monografia_main.c: 834: hora_u=(RtccTime.f.hour & 0x0F);
  3856  00D6DC  0100               	movlb	0	; () banked
  3857  00D6DE  51D4               	movf	(_RtccTime+3)& (0+255),w,b
  3858  00D6E0  0B0F               	andlw	15
  3859  00D6E2  0100               	movlb	0	; () banked
  3860  00D6E4  6FF3               	movwf	_hora_u& (0+255),b
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;monografia_main.c: 835: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  3864  00D6E6  0100               	movlb	0	; () banked
  3865  00D6E8  39D4               	swapf	(_RtccTime+3)& (0+255),w,b
  3866  00D6EA  0B0F               	andlw	15
  3867  00D6EC  0B0F               	andlw	15
  3868  00D6EE  0100               	movlb	0	; () banked
  3869  00D6F0  6FF2               	movwf	_hora_d& (0+255),b
  3870                           
  3871                           ;monografia_main.c: 836: RtccReadDate(&RtccDate);
  3872  00D6F2  0ECD               	movlw	low _RtccDate
  3873  00D6F4  6E01               	movwf	RtccReadDate@pDt,c
  3874  00D6F6  0E00               	movlw	high _RtccDate
  3875  00D6F8  6E02               	movwf	RtccReadDate@pDt+1,c
  3876  00D6FA  EC84  F061         	call	_RtccReadDate	;wreg free
  3877                           
  3878                           ;monografia_main.c: 837: fecha_u=(RtccDate.f.mday & 0x0F);
  3879  00D6FE  0100               	movlb	0	; () banked
  3880  00D700  51CE               	movf	(_RtccDate+1)& (0+255),w,b
  3881  00D702  0B0F               	andlw	15
  3882  00D704  0100               	movlb	0	; () banked
  3883  00D706  6FF1               	movwf	_fecha_u& (0+255),b
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;monografia_main.c: 838: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  3887  00D708  0100               	movlb	0	; () banked
  3888  00D70A  39CE               	swapf	(_RtccDate+1)& (0+255),w,b
  3889  00D70C  0B0F               	andlw	15
  3890  00D70E  0B0F               	andlw	15
  3891  00D710  0100               	movlb	0	; () banked
  3892  00D712  6FF0               	movwf	_fecha_d& (0+255),b
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;monografia_main.c: 839: mes_u=(RtccDate.f.mon & 0x0F);
  3896  00D714  0100               	movlb	0	; () banked
  3897  00D716  51CF               	movf	(_RtccDate+2)& (0+255),w,b
  3898  00D718  0B0F               	andlw	15
  3899  00D71A  0100               	movlb	0	; () banked
  3900  00D71C  6FF5               	movwf	_mes_u& (0+255),b
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;monografia_main.c: 840: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  3904  00D71E  0100               	movlb	0	; () banked
  3905  00D720  39CF               	swapf	(_RtccDate+2)& (0+255),w,b
  3906  00D722  0B0F               	andlw	15
  3907  00D724  0B0F               	andlw	15
  3908  00D726  0100               	movlb	0	; () banked
  3909  00D728  6FF4               	movwf	_mes_d& (0+255),b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;monografia_main.c: 841: dia_semana=RtccDate.f.wday;
  3913  00D72A  C0CD  F0EF         	movff	_RtccDate,_dia_semana
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;monografia_main.c: 842: anio_u=(RtccDate.f.year & 0x0F);
  3917  00D72E  0100               	movlb	0	; () banked
  3918  00D730  51D0               	movf	(_RtccDate+3)& (0+255),w,b
  3919  00D732  0B0F               	andlw	15
  3920  00D734  0100               	movlb	0	; () banked
  3921  00D736  6FEE               	movwf	_anio_u& (0+255),b
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;monografia_main.c: 843: anio_d=((RtccDate.f.year & 0xF0)>>4);
  3925  00D738  0100               	movlb	0	; () banked
  3926  00D73A  39D0               	swapf	(_RtccDate+3)& (0+255),w,b
  3927  00D73C  0B0F               	andlw	15
  3928  00D73E  0B0F               	andlw	15
  3929  00D740  0100               	movlb	0	; () banked
  3930  00D742  6FED               	movwf	_anio_d& (0+255),b
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;monografia_main.c: 844: segundo=segundo_d*10+segundo_u;
  3934  00D744  0100               	movlb	0	; () banked
  3935  00D746  51F8               	movf	_segundo_d& (0+255),w,b
  3936  00D748  0D0A               	mullw	10
  3937  00D74A  0100               	movlb	0	; () banked
  3938  00D74C  51F9               	movf	_segundo_u& (0+255),w,b
  3939  00D74E  24F3               	addwf	prodl,w,c
  3940  00D750  0100               	movlb	0	; () banked
  3941  00D752  6FB6               	movwf	_segundo& (0+255),b
  3942  00D754  0100               	movlb	0	; () banked
  3943  00D756  0E00               	movlw	0
  3944  00D758  20F4               	addwfc	prodh,w,c
  3945  00D75A  0100               	movlb	0	; () banked
  3946  00D75C  6FB7               	movwf	(_segundo+1)& (0+255),b
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;monografia_main.c: 845: minuto=minuto_d*10+minuto_u;
  3950  00D75E  0100               	movlb	0	; () banked
  3951  00D760  51F6               	movf	_minuto_d& (0+255),w,b
  3952  00D762  0D0A               	mullw	10
  3953  00D764  0100               	movlb	0	; () banked
  3954  00D766  51F7               	movf	_minuto_u& (0+255),w,b
  3955  00D768  24F3               	addwf	prodl,w,c
  3956  00D76A  0100               	movlb	0	; () banked
  3957  00D76C  6FE7               	movwf	_minuto& (0+255),b
  3958  00D76E  0100               	movlb	0	; () banked
  3959  00D770  0E00               	movlw	0
  3960  00D772  20F4               	addwfc	prodh,w,c
  3961  00D774  0100               	movlb	0	; () banked
  3962  00D776  6FE8               	movwf	(_minuto+1)& (0+255),b
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;monografia_main.c: 846: hora=hora_d*10+hora_u;
  3966  00D778  0100               	movlb	0	; () banked
  3967  00D77A  51F2               	movf	_hora_d& (0+255),w,b
  3968  00D77C  0D0A               	mullw	10
  3969  00D77E  0100               	movlb	0	; () banked
  3970  00D780  51F3               	movf	_hora_u& (0+255),w,b
  3971  00D782  24F3               	addwf	prodl,w,c
  3972  00D784  0100               	movlb	0	; () banked
  3973  00D786  6FDF               	movwf	_hora& (0+255),b
  3974  00D788  0100               	movlb	0	; () banked
  3975  00D78A  0E00               	movlw	0
  3976  00D78C  20F4               	addwfc	prodh,w,c
  3977  00D78E  0100               	movlb	0	; () banked
  3978  00D790  6FE0               	movwf	(_hora+1)& (0+255),b
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;monografia_main.c: 847: dia=fecha_d*10+fecha_u;
  3982  00D792  0100               	movlb	0	; () banked
  3983  00D794  51F0               	movf	_fecha_d& (0+255),w,b
  3984  00D796  0D0A               	mullw	10
  3985  00D798  0100               	movlb	0	; () banked
  3986  00D79A  51F1               	movf	_fecha_u& (0+255),w,b
  3987  00D79C  24F3               	addwf	prodl,w,c
  3988  00D79E  0100               	movlb	0	; () banked
  3989  00D7A0  6FDB               	movwf	_dia& (0+255),b
  3990  00D7A2  0100               	movlb	0	; () banked
  3991  00D7A4  0E00               	movlw	0
  3992  00D7A6  20F4               	addwfc	prodh,w,c
  3993  00D7A8  0100               	movlb	0	; () banked
  3994  00D7AA  6FDC               	movwf	(_dia+1)& (0+255),b
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;monografia_main.c: 848: diasem=dia_semana;
  3998  00D7AC  C0EF  F0DD         	movff	_dia_semana,_diasem
  3999  00D7B0  0100               	movlb	0	; () banked
  4000  00D7B2  6BDE               	clrf	(_diasem+1)& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;monografia_main.c: 849: mes=mes_d*10+mes_u;
  4004  00D7B4  0100               	movlb	0	; () banked
  4005  00D7B6  51F4               	movf	_mes_d& (0+255),w,b
  4006  00D7B8  0D0A               	mullw	10
  4007  00D7BA  0100               	movlb	0	; () banked
  4008  00D7BC  51F5               	movf	_mes_u& (0+255),w,b
  4009  00D7BE  24F3               	addwf	prodl,w,c
  4010  00D7C0  0100               	movlb	0	; () banked
  4011  00D7C2  6FE5               	movwf	_mes& (0+255),b
  4012  00D7C4  0100               	movlb	0	; () banked
  4013  00D7C6  0E00               	movlw	0
  4014  00D7C8  20F4               	addwfc	prodh,w,c
  4015  00D7CA  0100               	movlb	0	; () banked
  4016  00D7CC  6FE6               	movwf	(_mes+1)& (0+255),b
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;monografia_main.c: 850: anio=anio_d*10+anio_u;
  4020  00D7CE  0100               	movlb	0	; () banked
  4021  00D7D0  51ED               	movf	_anio_d& (0+255),w,b
  4022  00D7D2  0D0A               	mullw	10
  4023  00D7D4  0100               	movlb	0	; () banked
  4024  00D7D6  51EE               	movf	_anio_u& (0+255),w,b
  4025  00D7D8  24F3               	addwf	prodl,w,c
  4026  00D7DA  0100               	movlb	0	; () banked
  4027  00D7DC  6FD9               	movwf	_anio& (0+255),b
  4028  00D7DE  0100               	movlb	0	; () banked
  4029  00D7E0  0E00               	movlw	0
  4030  00D7E2  20F4               	addwfc	prodh,w,c
  4031  00D7E4  0100               	movlb	0	; () banked
  4032  00D7E6  6FDA               	movwf	(_anio+1)& (0+255),b
  4033                           
  4034                           ; BSR set to: 0
  4035  00D7E8  0012               	return		;funcret
  4036  00D7EA                     __end_of_Read_RTC:
  4037                           	opt stack 0
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           postinc0	equ	0xFEE
  4045                           wreg	equ	0xFE8
  4046                           postdec1	equ	0xFE5
  4047                           fsr1l	equ	0xFE1
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _RtccReadTime *****************
  4051 ;; Defined at:
  4052 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  pTm             2    0[COMRAM] PTR struct .
  4055 ;;		 -> RtccTime(4), 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  rTD0            8   10[COMRAM] struct .
  4058 ;;  rTD1            8    2[COMRAM] struct .
  4059 ;; Return value:  Size  Location     Type
  4060 ;;		None               void
  4061 ;; Registers used:
  4062 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4069 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4071 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4072 ;;Total ram usage:       18 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_Read_RTC
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text14
  4082  00C09E                     __ptext14:
  4083                           	opt stack 0
  4084  00C09E                     _RtccReadTime:
  4085                           	opt stack 27
  4086  00C09E  0EFC               	movlw	252
  4087  00C0A0  010F               	movlb	15	; () banked
  4088  00C0A2  173F               	andwf	63,f,b	;volatile
  4089                           
  4090                           ; BSR set to: 15
  4091  00C0A4  010F               	movlb	15	; () banked
  4092  00C0A6  813F               	bsf	63,0,b	;volatile
  4093                           
  4094                           ; BSR set to: 15
  4095  00C0A8  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  4096                           
  4097                           ; BSR set to: 15
  4098  00C0AC  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  4099                           
  4100                           ; BSR set to: 15
  4101  00C0B0  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  4102                           
  4103                           ; BSR set to: 15
  4104  00C0B4  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  4105                           
  4106                           ; BSR set to: 15
  4107  00C0B8  0EFC               	movlw	252
  4108  00C0BA  010F               	movlb	15	; () banked
  4109  00C0BC  173F               	andwf	63,f,b	;volatile
  4110  00C0BE  010F               	movlb	15	; () banked
  4111  00C0C0  813F               	bsf	63,0,b	;volatile
  4112                           
  4113                           ; BSR set to: 15
  4114  00C0C2  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  4115                           
  4116                           ; BSR set to: 15
  4117  00C0C6  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  4118                           
  4119                           ; BSR set to: 15
  4120  00C0CA  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  4121                           
  4122                           ; BSR set to: 15
  4123  00C0CE  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  4124                           
  4125                           ; BSR set to: 15
  4126  00C0D2  5009               	movf	RtccReadTime@rTD1+6,w,c
  4127  00C0D4  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  4128  00C0D6  A4D8               	btfss	status,2,c
  4129  00C0D8  D7E2               	goto	l4574
  4130                           
  4131                           ; BSR set to: 15
  4132                           
  4133                           ; BSR set to: 15
  4134  00C0DA  EE20 F003          	lfsr	2,3
  4135  00C0DE  5001               	movf	RtccReadTime@pTm,w,c
  4136  00C0E0  26D9               	addwf	fsr2l,f,c
  4137  00C0E2  5002               	movf	RtccReadTime@pTm+1,w,c
  4138  00C0E4  22DA               	addwfc	fsr2h,f,c
  4139  00C0E6  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  4140  00C0EA  EE20 F002          	lfsr	2,2
  4141  00C0EE  5001               	movf	RtccReadTime@pTm,w,c
  4142  00C0F0  26D9               	addwf	fsr2l,f,c
  4143  00C0F2  5002               	movf	RtccReadTime@pTm+1,w,c
  4144  00C0F4  22DA               	addwfc	fsr2h,f,c
  4145  00C0F6  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  4146  00C0FA  EE20 F001          	lfsr	2,1
  4147  00C0FE  5001               	movf	RtccReadTime@pTm,w,c
  4148  00C100  26D9               	addwf	fsr2l,f,c
  4149  00C102  5002               	movf	RtccReadTime@pTm+1,w,c
  4150  00C104  22DA               	addwfc	fsr2h,f,c
  4151  00C106  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  4152                           
  4153                           ; BSR set to: 15
  4154  00C10A  0012               	return		;funcret
  4155  00C10C                     __end_of_RtccReadTime:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodh	equ	0xFF4
  4162                           prodl	equ	0xFF3
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           postdec1	equ	0xFE5
  4166                           fsr1l	equ	0xFE1
  4167                           indf2	equ	0xFDF
  4168                           fsr2h	equ	0xFDA
  4169                           fsr2l	equ	0xFD9
  4170                           status	equ	0xFD8
  4171                           
  4172 ;; *************** function _RtccReadDate *****************
  4173 ;; Defined at:
  4174 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  pDt             2    0[COMRAM] PTR struct .
  4177 ;;		 -> RtccDate(4), 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;  rTD0            8   10[COMRAM] struct .
  4180 ;;  rTD1            8    2[COMRAM] struct .
  4181 ;; Return value:  Size  Location     Type
  4182 ;;		None               void
  4183 ;; Registers used:
  4184 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4191 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4193 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4194 ;;Total ram usage:       18 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; This function calls:
  4197 ;;		Nothing
  4198 ;; This function is called by:
  4199 ;;		_Read_RTC
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text15
  4204  00C308                     __ptext15:
  4205                           	opt stack 0
  4206  00C308                     _RtccReadDate:
  4207                           	opt stack 27
  4208  00C308  0EFC               	movlw	252
  4209  00C30A  010F               	movlb	15	; () banked
  4210  00C30C  173F               	andwf	63,f,b	;volatile
  4211  00C30E  0E03               	movlw	3
  4212  00C310  010F               	movlb	15	; () banked
  4213  00C312  133F               	iorwf	63,f,b	;volatile
  4214                           
  4215                           ; BSR set to: 15
  4216  00C314  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  4217                           
  4218                           ; BSR set to: 15
  4219  00C318  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  4220                           
  4221                           ; BSR set to: 15
  4222  00C31C  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  4223                           
  4224                           ; BSR set to: 15
  4225  00C320  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  4226                           
  4227                           ; BSR set to: 15
  4228  00C324  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  4229                           
  4230                           ; BSR set to: 15
  4231  00C328  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  4232  00C32C  0EFC               	movlw	252
  4233  00C32E  010F               	movlb	15	; () banked
  4234  00C330  173F               	andwf	63,f,b	;volatile
  4235  00C332  0E03               	movlw	3
  4236  00C334  010F               	movlb	15	; () banked
  4237  00C336  133F               	iorwf	63,f,b	;volatile
  4238                           
  4239                           ; BSR set to: 15
  4240  00C338  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  4241                           
  4242                           ; BSR set to: 15
  4243  00C33C  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  4244                           
  4245                           ; BSR set to: 15
  4246  00C340  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  4247                           
  4248                           ; BSR set to: 15
  4249  00C344  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  4250                           
  4251                           ; BSR set to: 15
  4252  00C348  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  4253                           
  4254                           ; BSR set to: 15
  4255  00C34C  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  4256  00C350  5005               	movf	RtccReadDate@rTD1+2,w,c
  4257  00C352  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  4258  00C354  A4D8               	btfss	status,2,c
  4259  00C356  D7D8               	goto	l4600
  4260                           
  4261                           ; BSR set to: 15
  4262                           
  4263                           ; BSR set to: 15
  4264  00C358  EE20 F001          	lfsr	2,1
  4265  00C35C  5001               	movf	RtccReadDate@pDt,w,c
  4266  00C35E  26D9               	addwf	fsr2l,f,c
  4267  00C360  5002               	movf	RtccReadDate@pDt+1,w,c
  4268  00C362  22DA               	addwfc	fsr2h,f,c
  4269  00C364  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  4270  00C368  EE20 F002          	lfsr	2,2
  4271  00C36C  5001               	movf	RtccReadDate@pDt,w,c
  4272  00C36E  26D9               	addwf	fsr2l,f,c
  4273  00C370  5002               	movf	RtccReadDate@pDt+1,w,c
  4274  00C372  22DA               	addwfc	fsr2h,f,c
  4275  00C374  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  4276                           
  4277                           ; BSR set to: 15
  4278  00C378  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  4279  00C37C  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  4280  00C380  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  4281                           
  4282                           ; BSR set to: 15
  4283  00C384  EE20 F003          	lfsr	2,3
  4284  00C388  5001               	movf	RtccReadDate@pDt,w,c
  4285  00C38A  26D9               	addwf	fsr2l,f,c
  4286  00C38C  5002               	movf	RtccReadDate@pDt+1,w,c
  4287  00C38E  22DA               	addwfc	fsr2h,f,c
  4288  00C390  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  4289                           
  4290                           ; BSR set to: 15
  4291  00C394  0012               	return		;funcret
  4292  00C396                     __end_of_RtccReadDate:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1l	equ	0xFE1
  4304                           indf2	equ	0xFDF
  4305                           fsr2h	equ	0xFDA
  4306                           fsr2l	equ	0xFD9
  4307                           status	equ	0xFD8
  4308                           
  4309 ;; *************** function _Programar_Temperatura *****************
  4310 ;; Defined at:
  4311 ;;		line 614 in file "../monografia_main.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;		None
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  estado          2   31[BANK0 ] int 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;		None               void
  4318 ;; Registers used:
  4319 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4326 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4328 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4329 ;;Total ram usage:        2 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    5
  4332 ;; This function calls:
  4333 ;;		_Lcd_Out
  4334 ;;		_Seleccionar_Dato
  4335 ;; This function is called by:
  4336 ;;		_Configurar_Pantalla
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text16
  4341  00C556                     __ptext16:
  4342                           	opt stack 0
  4343  00C556                     _Programar_Temperatura:
  4344                           	opt stack 24
  4345                           
  4346                           ;monografia_main.c: 616: fila =3;
  4347                           
  4348                           ; BSR set to: 15
  4349                           ;incstack = 0
  4350  00C556  0E00               	movlw	0
  4351  00C558  0100               	movlb	0	; () banked
  4352  00C55A  6FB3               	movwf	(_fila+1)& (0+255),b
  4353  00C55C  0E03               	movlw	3
  4354  00C55E  6FB2               	movwf	_fila& (0+255),b
  4355                           
  4356                           ;monografia_main.c: 617: columna =15;
  4357  00C560  0E00               	movlw	0
  4358  00C562  0100               	movlb	0	; () banked
  4359  00C564  6FAD               	movwf	(_columna+1)& (0+255),b
  4360  00C566  0E0F               	movlw	15
  4361  00C568  6FAC               	movwf	_columna& (0+255),b
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;monografia_main.c: 618: Lcd_Out(fila,columna,"");
  4365  00C56A  C0AC  F004         	movff	_columna,Lcd_Out@x
  4366  00C56E  0EA0               	movlw	low (STR_38+9)
  4367  00C570  6E05               	movwf	Lcd_Out@buffer,c
  4368  00C572  0EFF               	movlw	high (STR_38+9)
  4369  00C574  6E06               	movwf	Lcd_Out@buffer+1,c
  4370  00C576  0100               	movlb	0	; () banked
  4371  00C578  51B2               	movf	_fila& (0+255),w,b
  4372  00C57A  ECCB  F061         	call	_Lcd_Out
  4373                           
  4374                           ;monografia_main.c: 619: int estado =1;
  4375  00C57E  0E00               	movlw	0
  4376  00C580  0100               	movlb	0	; () banked
  4377  00C582  6F80               	movwf	(Programar_Temperatura@estado+1)& (0+255),b
  4378  00C584  0E01               	movlw	1
  4379  00C586  6F7F               	movwf	Programar_Temperatura@estado& (0+255),b
  4380                           
  4381                           ;monografia_main.c: 620: while(estado == 1){
  4382  00C588  D036               	goto	l5152
  4383  00C58A                     l5140:
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;monografia_main.c: 622: temperatura = Seleccionar_Dato(temperatura,fila,columna,10,41);
  4387  00C58A  C0EB  F055         	movff	_temperatura,Seleccionar_Dato@datos
  4388  00C58E  C0EC  F056         	movff	_temperatura+1,Seleccionar_Dato@datos+1
  4389  00C592  C0B2  F057         	movff	_fila,Seleccionar_Dato@fila
  4390  00C596  C0B3  F058         	movff	_fila+1,Seleccionar_Dato@fila+1
  4391  00C59A  C0AC  F059         	movff	_columna,Seleccionar_Dato@columna
  4392  00C59E  C0AD  F05A         	movff	_columna+1,Seleccionar_Dato@columna+1
  4393  00C5A2  0E00               	movlw	0
  4394  00C5A4  6E5C               	movwf	Seleccionar_Dato@inicio+1,c
  4395  00C5A6  0E0A               	movlw	10
  4396  00C5A8  6E5B               	movwf	Seleccionar_Dato@inicio,c
  4397  00C5AA  0E00               	movlw	0
  4398  00C5AC  6E5E               	movwf	Seleccionar_Dato@limite+1,c
  4399  00C5AE  0E29               	movlw	41
  4400  00C5B0  6E5D               	movwf	Seleccionar_Dato@limite,c
  4401  00C5B2  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  4402  00C5B6  C055  F0EB         	movff	?_Seleccionar_Dato,_temperatura
  4403  00C5BA  C056  F0EC         	movff	?_Seleccionar_Dato+1,_temperatura+1
  4404                           
  4405                           ;monografia_main.c: 623: if(PORTAbits.RA0 == 0){
  4406  00C5BE  B080               	btfsc	3968,0,c	;volatile
  4407  00C5C0  D00B               	goto	l396
  4408                           
  4409                           ;monografia_main.c: 624: estado =0;
  4410  00C5C2  0E00               	movlw	0
  4411  00C5C4  0100               	movlb	0	; () banked
  4412  00C5C6  6F80               	movwf	(Programar_Temperatura@estado+1)& (0+255),b
  4413  00C5C8  0E00               	movlw	0
  4414  00C5CA  6F7F               	movwf	Programar_Temperatura@estado& (0+255),b
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;monografia_main.c: 625: config ++;
  4418  00C5CC  0100               	movlb	0	; () banked
  4419  00C5CE  4BAE               	infsnz	_config& (0+255),f,b
  4420  00C5D0  2BAF               	incf	(_config+1)& (0+255),f,b
  4421                           
  4422                           ;monografia_main.c: 626: while(PORTAbits.RA0 == 0);
  4423  00C5D2  D000               	goto	l397
  4424  00C5D4                     l397:
  4425  00C5D4  A080               	btfss	3968,0,c	;volatile
  4426  00C5D6  D7FE               	goto	l397
  4427  00C5D8                     l396:
  4428                           
  4429                           ;monografia_main.c: 627: }
  4430                           ;monografia_main.c: 628: if(PORTAbits.RA2 == 0 ){
  4431  00C5D8  B480               	btfsc	3968,2,c	;volatile
  4432  00C5DA  D00D               	goto	l5152
  4433                           
  4434                           ;monografia_main.c: 629: config ++;
  4435  00C5DC  0100               	movlb	0	; () banked
  4436  00C5DE  4BAE               	infsnz	_config& (0+255),f,b
  4437  00C5E0  2BAF               	incf	(_config+1)& (0+255),f,b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;monografia_main.c: 630: estado=0;
  4441  00C5E2  0E00               	movlw	0
  4442  00C5E4  0100               	movlb	0	; () banked
  4443  00C5E6  6F80               	movwf	(Programar_Temperatura@estado+1)& (0+255),b
  4444  00C5E8  0E00               	movlw	0
  4445  00C5EA  6F7F               	movwf	Programar_Temperatura@estado& (0+255),b
  4446                           
  4447                           ;monografia_main.c: 631: while(PORTAbits.RA2 == 0);
  4448  00C5EC  D000               	goto	l401
  4449  00C5EE                     l401:
  4450  00C5EE  B480               	btfsc	3968,2,c	;volatile
  4451  00C5F0  D002               	goto	l5152
  4452  00C5F2  D7FD               	goto	l401
  4453  00C5F4  D000               	goto	l5152
  4454  00C5F6                     l5152:
  4455  00C5F6  0100               	movlb	0	; () banked
  4456  00C5F8  057F               	decf	Programar_Temperatura@estado& (0+255),w,b
  4457  00C5FA  0100               	movlb	0	; () banked
  4458  00C5FC  1180               	iorwf	(Programar_Temperatura@estado+1)& (0+255),w,b
  4459  00C5FE  B4D8               	btfsc	status,2,c
  4460  00C600  D7C4               	goto	l5140
  4461                           
  4462                           ; BSR set to: 0
  4463                           
  4464                           ; BSR set to: 0
  4465  00C602  0012               	return		;funcret
  4466  00C604                     __end_of_Programar_Temperatura:
  4467                           	opt stack 0
  4468                           tblptru	equ	0xFF8
  4469                           tblptrh	equ	0xFF7
  4470                           tblptrl	equ	0xFF6
  4471                           tablat	equ	0xFF5
  4472                           prodh	equ	0xFF4
  4473                           prodl	equ	0xFF3
  4474                           postinc0	equ	0xFEE
  4475                           wreg	equ	0xFE8
  4476                           postdec1	equ	0xFE5
  4477                           fsr1l	equ	0xFE1
  4478                           indf2	equ	0xFDF
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _Configurar_Hora_Grl *****************
  4484 ;; Defined at:
  4485 ;;		line 659 in file "../monografia_main.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;  opcion          2   31[BANK0 ] int 
  4488 ;;  aux_hora        2   33[BANK0 ] int 
  4489 ;;  fila_i          2   35[BANK0 ] int 
  4490 ;;  columna_i       2   37[BANK0 ] int 
  4491 ;;  tipo_hora       2   39[BANK0 ] int 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;  limite          2   53[BANK0 ] int 
  4494 ;;  inicio          2   51[BANK0 ] int 
  4495 ;;  limite          2   49[BANK0 ] int 
  4496 ;;  inicio          2   47[BANK0 ] int 
  4497 ;;  estado          2   45[BANK0 ] int 
  4498 ;;  estado          2   41[BANK0 ] int 
  4499 ;;  config_hora     2   43[BANK0 ] int 
  4500 ;; Return value:  Size  Location     Type
  4501 ;;		None               void
  4502 ;; Registers used:
  4503 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4509 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4510 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4512 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4513 ;;Total ram usage:       24 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; Hardware stack levels required when called:    5
  4516 ;; This function calls:
  4517 ;;		_Lcd_Cmd
  4518 ;;		_Lcd_Out
  4519 ;;		_Seleccionar_Dato
  4520 ;;		_Write_RTC
  4521 ;; This function is called by:
  4522 ;;		_Configurar_Pantalla
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text17
  4527  00E5D6                     __ptext17:
  4528                           	opt stack 0
  4529  00E5D6                     _Configurar_Hora_Grl:
  4530                           	opt stack 24
  4531                           
  4532                           ;monografia_main.c: 661: int config_hora=opcion;
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;incstack = 0
  4536  00E5D6  C07F  F08B         	movff	Configurar_Hora_Grl@opcion,Configurar_Hora_Grl@config_hora
  4537  00E5DA  C080  F08C         	movff	Configurar_Hora_Grl@opcion+1,Configurar_Hora_Grl@config_hora+1
  4538                           
  4539                           ;monografia_main.c: 662: aux_hora++;
  4540  00E5DE  0100               	movlb	0	; () banked
  4541  00E5E0  4B81               	infsnz	Configurar_Hora_Grl@aux_hora& (0+255),f,b
  4542  00E5E2  2B82               	incf	(Configurar_Hora_Grl@aux_hora+1)& (0+255),f,b
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;monografia_main.c: 663: Lcd_Cmd( 15);
  4546  00E5E4  0E0F               	movlw	15
  4547  00E5E6  EC92  F066         	call	_Lcd_Cmd
  4548                           
  4549                           ;monografia_main.c: 664: while(config_hora==opcion){
  4550  00E5EA  D17D               	goto	l5250
  4551  00E5EC                     l5160:
  4552                           
  4553                           ;monografia_main.c: 665: if(aux_hora == 1){
  4554  00E5EC  0100               	movlb	0	; () banked
  4555  00E5EE  0581               	decf	Configurar_Hora_Grl@aux_hora& (0+255),w,b
  4556  00E5F0  0100               	movlb	0	; () banked
  4557  00E5F2  1182               	iorwf	(Configurar_Hora_Grl@aux_hora+1)& (0+255),w,b
  4558  00E5F4  A4D8               	btfss	status,2,c
  4559  00E5F6  D09E               	goto	l5200
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;monografia_main.c: 666: Lcd_Out(fila_i,columna_i,"");
  4563  00E5F8  C085  F004         	movff	Configurar_Hora_Grl@columna_i,Lcd_Out@x
  4564  00E5FC  0EA0               	movlw	low (STR_38+9)
  4565  00E5FE  6E05               	movwf	Lcd_Out@buffer,c
  4566  00E600  0EFF               	movlw	high (STR_38+9)
  4567  00E602  6E06               	movwf	Lcd_Out@buffer+1,c
  4568  00E604  0100               	movlb	0	; () banked
  4569  00E606  5183               	movf	Configurar_Hora_Grl@fila_i& (0+255),w,b
  4570  00E608  ECCB  F061         	call	_Lcd_Out
  4571                           
  4572                           ;monografia_main.c: 667: fila =fila_i;
  4573  00E60C  C083  F0B2         	movff	Configurar_Hora_Grl@fila_i,_fila
  4574  00E610  C084  F0B3         	movff	Configurar_Hora_Grl@fila_i+1,_fila+1
  4575                           
  4576                           ;monografia_main.c: 668: columna =columna_i;
  4577  00E614  C085  F0AC         	movff	Configurar_Hora_Grl@columna_i,_columna
  4578  00E618  C086  F0AD         	movff	Configurar_Hora_Grl@columna_i+1,_columna+1
  4579                           
  4580                           ;monografia_main.c: 669: int estado =1;
  4581  00E61C  0E00               	movlw	0
  4582  00E61E  0100               	movlb	0	; () banked
  4583  00E620  6F8A               	movwf	(Configurar_Hora_Grl@estado+1)& (0+255),b
  4584  00E622  0E01               	movlw	1
  4585  00E624  6F89               	movwf	Configurar_Hora_Grl@estado& (0+255),b
  4586                           
  4587                           ;monografia_main.c: 671: while(estado > 0){
  4588  00E626  D07A               	goto	l5198
  4589  00E628                     l419:
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;monografia_main.c: 673: int inicio= -1;
  4593  00E628  0100               	movlb	0	; () banked
  4594  00E62A  698F               	setf	Configurar_Hora_Grl@inicio& (0+255),b
  4595  00E62C  6990               	setf	(Configurar_Hora_Grl@inicio+1)& (0+255),b
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;monografia_main.c: 674: int limite=24;
  4599  00E62E  0E00               	movlw	0
  4600  00E630  0100               	movlb	0	; () banked
  4601  00E632  6F92               	movwf	(Configurar_Hora_Grl@limite+1)& (0+255),b
  4602  00E634  0E18               	movlw	24
  4603  00E636  6F91               	movwf	Configurar_Hora_Grl@limite& (0+255),b
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;monografia_main.c: 676: if(tipo_hora==1){
  4607  00E638  0100               	movlb	0	; () banked
  4608  00E63A  0587               	decf	Configurar_Hora_Grl@tipo_hora& (0+255),w,b
  4609  00E63C  0100               	movlb	0	; () banked
  4610  00E63E  1188               	iorwf	(Configurar_Hora_Grl@tipo_hora+1)& (0+255),w,b
  4611  00E640  A4D8               	btfss	status,2,c
  4612  00E642  D01B               	goto	l5176
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;monografia_main.c: 677: hora_vdr_c= Seleccionar_Dato(hora_vdr_c,fila_i,columna_i,inicio
      +                          ,limite);
  4616  00E644  C0E3  F055         	movff	_hora_vdr_c,Seleccionar_Dato@datos
  4617  00E648  C0E4  F056         	movff	_hora_vdr_c+1,Seleccionar_Dato@datos+1
  4618  00E64C  C083  F057         	movff	Configurar_Hora_Grl@fila_i,Seleccionar_Dato@fila
  4619  00E650  C084  F058         	movff	Configurar_Hora_Grl@fila_i+1,Seleccionar_Dato@fila+1
  4620  00E654  C085  F059         	movff	Configurar_Hora_Grl@columna_i,Seleccionar_Dato@columna
  4621  00E658  C086  F05A         	movff	Configurar_Hora_Grl@columna_i+1,Seleccionar_Dato@columna+1
  4622  00E65C  C08F  F05B         	movff	Configurar_Hora_Grl@inicio,Seleccionar_Dato@inicio
  4623  00E660  C090  F05C         	movff	Configurar_Hora_Grl@inicio+1,Seleccionar_Dato@inicio+1
  4624  00E664  C091  F05D         	movff	Configurar_Hora_Grl@limite,Seleccionar_Dato@limite
  4625  00E668  C092  F05E         	movff	Configurar_Hora_Grl@limite+1,Seleccionar_Dato@limite+1
  4626  00E66C  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  4627  00E670  C055  F0E3         	movff	?_Seleccionar_Dato,_hora_vdr_c
  4628  00E674  C056  F0E4         	movff	?_Seleccionar_Dato+1,_hora_vdr_c+1
  4629  00E678  D000               	goto	l5176
  4630  00E67A                     l5176:
  4631                           
  4632                           ;monografia_main.c: 678: }
  4633                           ;monografia_main.c: 679: if(tipo_hora==2){
  4634  00E67A  0E02               	movlw	2
  4635  00E67C  0100               	movlb	0	; () banked
  4636  00E67E  1987               	xorwf	Configurar_Hora_Grl@tipo_hora& (0+255),w,b
  4637  00E680  0100               	movlb	0	; () banked
  4638  00E682  1188               	iorwf	(Configurar_Hora_Grl@tipo_hora+1)& (0+255),w,b
  4639  00E684  A4D8               	btfss	status,2,c
  4640  00E686  D01B               	goto	l5180
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;monografia_main.c: 680: hora_vdr_a= Seleccionar_Dato(hora_vdr_a,fila_i,columna_i,inicio
      +                          ,limite);
  4644  00E688  C0E1  F055         	movff	_hora_vdr_a,Seleccionar_Dato@datos
  4645  00E68C  C0E2  F056         	movff	_hora_vdr_a+1,Seleccionar_Dato@datos+1
  4646  00E690  C083  F057         	movff	Configurar_Hora_Grl@fila_i,Seleccionar_Dato@fila
  4647  00E694  C084  F058         	movff	Configurar_Hora_Grl@fila_i+1,Seleccionar_Dato@fila+1
  4648  00E698  C085  F059         	movff	Configurar_Hora_Grl@columna_i,Seleccionar_Dato@columna
  4649  00E69C  C086  F05A         	movff	Configurar_Hora_Grl@columna_i+1,Seleccionar_Dato@columna+1
  4650  00E6A0  C08F  F05B         	movff	Configurar_Hora_Grl@inicio,Seleccionar_Dato@inicio
  4651  00E6A4  C090  F05C         	movff	Configurar_Hora_Grl@inicio+1,Seleccionar_Dato@inicio+1
  4652  00E6A8  C091  F05D         	movff	Configurar_Hora_Grl@limite,Seleccionar_Dato@limite
  4653  00E6AC  C092  F05E         	movff	Configurar_Hora_Grl@limite+1,Seleccionar_Dato@limite+1
  4654  00E6B0  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  4655  00E6B4  C055  F0E1         	movff	?_Seleccionar_Dato,_hora_vdr_a
  4656  00E6B8  C056  F0E2         	movff	?_Seleccionar_Dato+1,_hora_vdr_a+1
  4657  00E6BC  D000               	goto	l5180
  4658  00E6BE                     l5180:
  4659                           
  4660                           ;monografia_main.c: 681: }
  4661                           ;monografia_main.c: 683: if(PORTAbits.RA0 == 0 && aux_hora == 1){
  4662  00E6BE  B080               	btfsc	3968,0,c	;volatile
  4663  00E6C0  D011               	goto	l422
  4664  00E6C2  0100               	movlb	0	; () banked
  4665  00E6C4  0581               	decf	Configurar_Hora_Grl@aux_hora& (0+255),w,b
  4666  00E6C6  0100               	movlb	0	; () banked
  4667  00E6C8  1182               	iorwf	(Configurar_Hora_Grl@aux_hora+1)& (0+255),w,b
  4668  00E6CA  A4D8               	btfss	status,2,c
  4669  00E6CC  D00B               	goto	l422
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;monografia_main.c: 684: aux_hora++;
  4673  00E6CE  0100               	movlb	0	; () banked
  4674  00E6D0  4B81               	infsnz	Configurar_Hora_Grl@aux_hora& (0+255),f,b
  4675  00E6D2  2B82               	incf	(Configurar_Hora_Grl@aux_hora+1)& (0+255),f,b
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;monografia_main.c: 685: estado=0;
  4679  00E6D4  0E00               	movlw	0
  4680  00E6D6  0100               	movlb	0	; () banked
  4681  00E6D8  6F8A               	movwf	(Configurar_Hora_Grl@estado+1)& (0+255),b
  4682  00E6DA  0E00               	movlw	0
  4683  00E6DC  6F89               	movwf	Configurar_Hora_Grl@estado& (0+255),b
  4684                           
  4685                           ;monografia_main.c: 686: while(PORTAbits.RA0 == 0);
  4686  00E6DE  D000               	goto	l423
  4687  00E6E0                     l423:
  4688  00E6E0  A080               	btfss	3968,0,c	;volatile
  4689  00E6E2  D7FE               	goto	l423
  4690  00E6E4                     l422:
  4691                           
  4692                           ;monografia_main.c: 687: }
  4693                           ;monografia_main.c: 688: if(PORTAbits.RA2 == 0 ){
  4694  00E6E4  B480               	btfsc	3968,2,c	;volatile
  4695  00E6E6  D01A               	goto	l5198
  4696                           
  4697                           ;monografia_main.c: 689: aux_hora=3;
  4698  00E6E8  0E00               	movlw	0
  4699  00E6EA  0100               	movlb	0	; () banked
  4700  00E6EC  6F82               	movwf	(Configurar_Hora_Grl@aux_hora+1)& (0+255),b
  4701  00E6EE  0E03               	movlw	3
  4702  00E6F0  6F81               	movwf	Configurar_Hora_Grl@aux_hora& (0+255),b
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;monografia_main.c: 690: Lcd_Cmd(0x0C);
  4706  00E6F2  0E0C               	movlw	12
  4707  00E6F4  EC92  F066         	call	_Lcd_Cmd
  4708                           
  4709                           ;monografia_main.c: 691: estado=0;
  4710  00E6F8  0E00               	movlw	0
  4711  00E6FA  0100               	movlb	0	; () banked
  4712  00E6FC  6F8A               	movwf	(Configurar_Hora_Grl@estado+1)& (0+255),b
  4713  00E6FE  0E00               	movlw	0
  4714  00E700  6F89               	movwf	Configurar_Hora_Grl@estado& (0+255),b
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;monografia_main.c: 692: config ++;
  4718  00E702  0100               	movlb	0	; () banked
  4719  00E704  4BAE               	infsnz	_config& (0+255),f,b
  4720  00E706  2BAF               	incf	(_config+1)& (0+255),f,b
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;monografia_main.c: 693: config_hora=0;
  4724  00E708  0E00               	movlw	0
  4725  00E70A  0100               	movlb	0	; () banked
  4726  00E70C  6F8C               	movwf	(Configurar_Hora_Grl@config_hora+1)& (0+255),b
  4727  00E70E  0E00               	movlw	0
  4728  00E710  6F8B               	movwf	Configurar_Hora_Grl@config_hora& (0+255),b
  4729                           
  4730                           ;monografia_main.c: 694: while(PORTAbits.RA2 == 0);
  4731  00E712  D000               	goto	l427
  4732  00E714                     l427:
  4733  00E714  B480               	btfsc	3968,2,c	;volatile
  4734  00E716  D002               	goto	l5198
  4735  00E718  D7FD               	goto	l427
  4736  00E71A  D000               	goto	l5198
  4737  00E71C                     l5198:
  4738  00E71C  0100               	movlb	0	; () banked
  4739  00E71E  BF8A               	btfsc	(Configurar_Hora_Grl@estado+1)& (0+255),7,b
  4740  00E720  D009               	goto	l5200
  4741  00E722  0100               	movlb	0	; () banked
  4742  00E724  518A               	movf	(Configurar_Hora_Grl@estado+1)& (0+255),w,b
  4743  00E726  E180               	bnz	l419
  4744  00E728  0100               	movlb	0	; () banked
  4745  00E72A  0589               	decf	Configurar_Hora_Grl@estado& (0+255),w,b
  4746  00E72C  A0D8               	btfss	status,0,c
  4747  00E72E  D002               	goto	l5200
  4748  00E730  D77B               	goto	l419
  4749                           
  4750                           ; BSR set to: 0
  4751  00E732  D000               	goto	l5200
  4752  00E734                     l5200:
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;monografia_main.c: 695: }
  4756                           ;monografia_main.c: 696: }
  4757                           ;monografia_main.c: 697: }
  4758                           ;monografia_main.c: 698: if( aux_hora == 2){
  4759  00E734  0E02               	movlw	2
  4760  00E736  0100               	movlb	0	; () banked
  4761  00E738  1981               	xorwf	Configurar_Hora_Grl@aux_hora& (0+255),w,b
  4762  00E73A  0100               	movlb	0	; () banked
  4763  00E73C  1182               	iorwf	(Configurar_Hora_Grl@aux_hora+1)& (0+255),w,b
  4764  00E73E  A4D8               	btfss	status,2,c
  4765  00E740  D0D2               	goto	l5250
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;monografia_main.c: 700: fila = fila_i;
  4769  00E742  C083  F0B2         	movff	Configurar_Hora_Grl@fila_i,_fila
  4770  00E746  C084  F0B3         	movff	Configurar_Hora_Grl@fila_i+1,_fila+1
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;monografia_main.c: 701: columna =columna_i +3;
  4774  00E74A  0E03               	movlw	3
  4775  00E74C  0100               	movlb	0	; () banked
  4776  00E74E  2585               	addwf	Configurar_Hora_Grl@columna_i& (0+255),w,b
  4777  00E750  0100               	movlb	0	; () banked
  4778  00E752  6FAC               	movwf	_columna& (0+255),b
  4779  00E754  0E00               	movlw	0
  4780  00E756  0100               	movlb	0	; () banked
  4781  00E758  2186               	addwfc	(Configurar_Hora_Grl@columna_i+1)& (0+255),w,b
  4782  00E75A  0100               	movlb	0	; () banked
  4783  00E75C  6FAD               	movwf	(_columna+1)& (0+255),b
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;monografia_main.c: 702: Lcd_Out(fila,columna,"");
  4787  00E75E  C0AC  F004         	movff	_columna,Lcd_Out@x
  4788  00E762  0EA0               	movlw	low (STR_38+9)
  4789  00E764  6E05               	movwf	Lcd_Out@buffer,c
  4790  00E766  0EFF               	movlw	high (STR_38+9)
  4791  00E768  6E06               	movwf	Lcd_Out@buffer+1,c
  4792  00E76A  0100               	movlb	0	; () banked
  4793  00E76C  51B2               	movf	_fila& (0+255),w,b
  4794  00E76E  ECCB  F061         	call	_Lcd_Out
  4795                           
  4796                           ;monografia_main.c: 703: int estado =1;
  4797  00E772  0E00               	movlw	0
  4798  00E774  0100               	movlb	0	; () banked
  4799  00E776  6F8E               	movwf	(Configurar_Hora_Grl@estado_1256+1)& (0+255),b
  4800  00E778  0E01               	movlw	1
  4801  00E77A  6F8D               	movwf	Configurar_Hora_Grl@estado_1256& (0+255),b
  4802                           
  4803                           ;monografia_main.c: 704: while(estado > 0){
  4804  00E77C  D0A8               	goto	l5248
  4805  00E77E                     l433:
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;monografia_main.c: 706: int inicio= -1;
  4809  00E77E  0100               	movlb	0	; () banked
  4810  00E780  6993               	setf	Configurar_Hora_Grl@inicio_1257& (0+255),b
  4811  00E782  6994               	setf	(Configurar_Hora_Grl@inicio_1257+1)& (0+255),b
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;monografia_main.c: 707: int limite=60;
  4815  00E784  0E00               	movlw	0
  4816  00E786  0100               	movlb	0	; () banked
  4817  00E788  6F96               	movwf	(Configurar_Hora_Grl@limite_1258+1)& (0+255),b
  4818  00E78A  0E3C               	movlw	60
  4819  00E78C  6F95               	movwf	Configurar_Hora_Grl@limite_1258& (0+255),b
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;monografia_main.c: 709: if(tipo_hora==1){
  4823  00E78E  0100               	movlb	0	; () banked
  4824  00E790  0587               	decf	Configurar_Hora_Grl@tipo_hora& (0+255),w,b
  4825  00E792  0100               	movlb	0	; () banked
  4826  00E794  1188               	iorwf	(Configurar_Hora_Grl@tipo_hora+1)& (0+255),w,b
  4827  00E796  A4D8               	btfss	status,2,c
  4828  00E798  D01B               	goto	l5216
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;monografia_main.c: 710: minuto_vdr_c= Seleccionar_Dato(minuto_vdr_c,fila,columna,inicio
      +                          ,limite);
  4832  00E79A  C0B4  F055         	movff	_minuto_vdr_c,Seleccionar_Dato@datos
  4833  00E79E  C0B5  F056         	movff	_minuto_vdr_c+1,Seleccionar_Dato@datos+1
  4834  00E7A2  C0B2  F057         	movff	_fila,Seleccionar_Dato@fila
  4835  00E7A6  C0B3  F058         	movff	_fila+1,Seleccionar_Dato@fila+1
  4836  00E7AA  C0AC  F059         	movff	_columna,Seleccionar_Dato@columna
  4837  00E7AE  C0AD  F05A         	movff	_columna+1,Seleccionar_Dato@columna+1
  4838  00E7B2  C093  F05B         	movff	Configurar_Hora_Grl@inicio_1257,Seleccionar_Dato@inicio
  4839  00E7B6  C094  F05C         	movff	Configurar_Hora_Grl@inicio_1257+1,Seleccionar_Dato@inicio+1
  4840  00E7BA  C095  F05D         	movff	Configurar_Hora_Grl@limite_1258,Seleccionar_Dato@limite
  4841  00E7BE  C096  F05E         	movff	Configurar_Hora_Grl@limite_1258+1,Seleccionar_Dato@limite+1
  4842  00E7C2  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  4843  00E7C6  C055  F0B4         	movff	?_Seleccionar_Dato,_minuto_vdr_c
  4844  00E7CA  C056  F0B5         	movff	?_Seleccionar_Dato+1,_minuto_vdr_c+1
  4845  00E7CE  D000               	goto	l5216
  4846  00E7D0                     l5216:
  4847                           
  4848                           ;monografia_main.c: 711: }
  4849                           ;monografia_main.c: 712: if(tipo_hora==2){
  4850  00E7D0  0E02               	movlw	2
  4851  00E7D2  0100               	movlb	0	; () banked
  4852  00E7D4  1987               	xorwf	Configurar_Hora_Grl@tipo_hora& (0+255),w,b
  4853  00E7D6  0100               	movlb	0	; () banked
  4854  00E7D8  1188               	iorwf	(Configurar_Hora_Grl@tipo_hora+1)& (0+255),w,b
  4855  00E7DA  A4D8               	btfss	status,2,c
  4856  00E7DC  D01B               	goto	l5220
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;monografia_main.c: 713: minuto_vdr_a= Seleccionar_Dato(minuto_vdr_a,fila,columna,inicio
      +                          ,limite);
  4860  00E7DE  C0E9  F055         	movff	_minuto_vdr_a,Seleccionar_Dato@datos
  4861  00E7E2  C0EA  F056         	movff	_minuto_vdr_a+1,Seleccionar_Dato@datos+1
  4862  00E7E6  C0B2  F057         	movff	_fila,Seleccionar_Dato@fila
  4863  00E7EA  C0B3  F058         	movff	_fila+1,Seleccionar_Dato@fila+1
  4864  00E7EE  C0AC  F059         	movff	_columna,Seleccionar_Dato@columna
  4865  00E7F2  C0AD  F05A         	movff	_columna+1,Seleccionar_Dato@columna+1
  4866  00E7F6  C093  F05B         	movff	Configurar_Hora_Grl@inicio_1257,Seleccionar_Dato@inicio
  4867  00E7FA  C094  F05C         	movff	Configurar_Hora_Grl@inicio_1257+1,Seleccionar_Dato@inicio+1
  4868  00E7FE  C095  F05D         	movff	Configurar_Hora_Grl@limite_1258,Seleccionar_Dato@limite
  4869  00E802  C096  F05E         	movff	Configurar_Hora_Grl@limite_1258+1,Seleccionar_Dato@limite+1
  4870  00E806  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  4871  00E80A  C055  F0E9         	movff	?_Seleccionar_Dato,_minuto_vdr_a
  4872  00E80E  C056  F0EA         	movff	?_Seleccionar_Dato+1,_minuto_vdr_a+1
  4873  00E812  D000               	goto	l5220
  4874  00E814                     l5220:
  4875                           
  4876                           ;monografia_main.c: 714: }
  4877                           ;monografia_main.c: 715: if(PORTAbits.RA3 == 0){
  4878  00E814  B680               	btfsc	3968,3,c	;volatile
  4879  00E816  D00D               	goto	l436
  4880                           
  4881                           ;monografia_main.c: 716: aux_hora = 1;
  4882  00E818  0E00               	movlw	0
  4883  00E81A  0100               	movlb	0	; () banked
  4884  00E81C  6F82               	movwf	(Configurar_Hora_Grl@aux_hora+1)& (0+255),b
  4885  00E81E  0E01               	movlw	1
  4886  00E820  6F81               	movwf	Configurar_Hora_Grl@aux_hora& (0+255),b
  4887                           
  4888                           ;monografia_main.c: 717: estado =0;
  4889  00E822  0E00               	movlw	0
  4890  00E824  0100               	movlb	0	; () banked
  4891  00E826  6F8E               	movwf	(Configurar_Hora_Grl@estado_1256+1)& (0+255),b
  4892  00E828  0E00               	movlw	0
  4893  00E82A  6F8D               	movwf	Configurar_Hora_Grl@estado_1256& (0+255),b
  4894                           
  4895                           ;monografia_main.c: 718: while(PORTAbits.RA3 == 0);
  4896  00E82C  D000               	goto	l437
  4897  00E82E                     l437:
  4898  00E82E  A680               	btfss	3968,3,c	;volatile
  4899  00E830  D7FE               	goto	l437
  4900  00E832                     l436:
  4901                           
  4902                           ;monografia_main.c: 719: }
  4903                           ;monografia_main.c: 720: if(PORTAbits.RA0 == 0){
  4904  00E832  B080               	btfsc	3968,0,c	;volatile
  4905  00E834  D02B               	goto	l440
  4906                           
  4907                           ;monografia_main.c: 721: estado =0;
  4908  00E836  0E00               	movlw	0
  4909  00E838  0100               	movlb	0	; () banked
  4910  00E83A  6F8E               	movwf	(Configurar_Hora_Grl@estado_1256+1)& (0+255),b
  4911  00E83C  0E00               	movlw	0
  4912  00E83E  6F8D               	movwf	Configurar_Hora_Grl@estado_1256& (0+255),b
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;monografia_main.c: 722: if(tipo_hora==1){
  4916  00E840  0100               	movlb	0	; () banked
  4917  00E842  0587               	decf	Configurar_Hora_Grl@tipo_hora& (0+255),w,b
  4918  00E844  0100               	movlb	0	; () banked
  4919  00E846  1188               	iorwf	(Configurar_Hora_Grl@tipo_hora+1)& (0+255),w,b
  4920  00E848  A4D8               	btfss	status,2,c
  4921  00E84A  D012               	goto	l5232
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;monografia_main.c: 723: Lcd_Out(fila,columna+3,"");
  4925  00E84C  0100               	movlb	0	; () banked
  4926  00E84E  51AC               	movf	_columna& (0+255),w,b
  4927  00E850  0F03               	addlw	3
  4928  00E852  6E04               	movwf	Lcd_Out@x,c
  4929  00E854  0EA0               	movlw	low (STR_38+9)
  4930  00E856  6E05               	movwf	Lcd_Out@buffer,c
  4931  00E858  0EFF               	movlw	high (STR_38+9)
  4932  00E85A  6E06               	movwf	Lcd_Out@buffer+1,c
  4933  00E85C  0100               	movlb	0	; () banked
  4934  00E85E  51B2               	movf	_fila& (0+255),w,b
  4935  00E860  ECCB  F061         	call	_Lcd_Out
  4936                           
  4937                           ;monografia_main.c: 724: aux_hora=0;
  4938  00E864  0E00               	movlw	0
  4939  00E866  0100               	movlb	0	; () banked
  4940  00E868  6F82               	movwf	(Configurar_Hora_Grl@aux_hora+1)& (0+255),b
  4941  00E86A  0E00               	movlw	0
  4942  00E86C  6F81               	movwf	Configurar_Hora_Grl@aux_hora& (0+255),b
  4943  00E86E  D000               	goto	l5232
  4944  00E870                     l5232:
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;monografia_main.c: 725: }
  4948                           ;monografia_main.c: 726: config++;
  4949  00E870  0100               	movlb	0	; () banked
  4950  00E872  4BAE               	infsnz	_config& (0+255),f,b
  4951  00E874  2BAF               	incf	(_config+1)& (0+255),f,b
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;monografia_main.c: 727: Lcd_Cmd(0x0C);
  4955  00E876  0E0C               	movlw	12
  4956  00E878  EC92  F066         	call	_Lcd_Cmd
  4957                           
  4958                           ;monografia_main.c: 728: config_hora = 0;
  4959  00E87C  0E00               	movlw	0
  4960  00E87E  0100               	movlb	0	; () banked
  4961  00E880  6F8C               	movwf	(Configurar_Hora_Grl@config_hora+1)& (0+255),b
  4962  00E882  0E00               	movlw	0
  4963  00E884  6F8B               	movwf	Configurar_Hora_Grl@config_hora& (0+255),b
  4964                           
  4965                           ;monografia_main.c: 729: while(PORTAbits.RA0 == 0);
  4966  00E886  D000               	goto	l442
  4967  00E888                     l442:
  4968  00E888  A080               	btfss	3968,0,c	;volatile
  4969  00E88A  D7FE               	goto	l442
  4970  00E88C                     l440:
  4971                           
  4972                           ;monografia_main.c: 730: }
  4973                           ;monografia_main.c: 731: if(PORTAbits.RA2 == 0 ){
  4974  00E88C  B480               	btfsc	3968,2,c	;volatile
  4975  00E88E  D01F               	goto	l5248
  4976                           
  4977                           ;monografia_main.c: 732: aux_hora++;
  4978  00E890  0100               	movlb	0	; () banked
  4979  00E892  4B81               	infsnz	Configurar_Hora_Grl@aux_hora& (0+255),f,b
  4980  00E894  2B82               	incf	(Configurar_Hora_Grl@aux_hora+1)& (0+255),f,b
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;monografia_main.c: 733: config = config +2;
  4984  00E896  0E02               	movlw	2
  4985  00E898  0100               	movlb	0	; () banked
  4986  00E89A  25AE               	addwf	_config& (0+255),w,b
  4987  00E89C  0100               	movlb	0	; () banked
  4988  00E89E  6FAE               	movwf	_config& (0+255),b
  4989  00E8A0  0E00               	movlw	0
  4990  00E8A2  0100               	movlb	0	; () banked
  4991  00E8A4  21AF               	addwfc	(_config+1)& (0+255),w,b
  4992  00E8A6  0100               	movlb	0	; () banked
  4993  00E8A8  6FAF               	movwf	(_config+1)& (0+255),b
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;monografia_main.c: 734: Lcd_Cmd(0x0C);
  4997  00E8AA  0E0C               	movlw	12
  4998  00E8AC  EC92  F066         	call	_Lcd_Cmd
  4999                           
  5000                           ;monografia_main.c: 735: estado=0;
  5001  00E8B0  0E00               	movlw	0
  5002  00E8B2  0100               	movlb	0	; () banked
  5003  00E8B4  6F8E               	movwf	(Configurar_Hora_Grl@estado_1256+1)& (0+255),b
  5004  00E8B6  0E00               	movlw	0
  5005  00E8B8  6F8D               	movwf	Configurar_Hora_Grl@estado_1256& (0+255),b
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;monografia_main.c: 736: config_hora=0;
  5009  00E8BA  0E00               	movlw	0
  5010  00E8BC  0100               	movlb	0	; () banked
  5011  00E8BE  6F8C               	movwf	(Configurar_Hora_Grl@config_hora+1)& (0+255),b
  5012  00E8C0  0E00               	movlw	0
  5013  00E8C2  6F8B               	movwf	Configurar_Hora_Grl@config_hora& (0+255),b
  5014                           
  5015                           ;monografia_main.c: 737: while(PORTAbits.RA2 == 0);
  5016  00E8C4  D000               	goto	l446
  5017  00E8C6                     l446:
  5018  00E8C6  B480               	btfsc	3968,2,c	;volatile
  5019  00E8C8  D002               	goto	l5248
  5020  00E8CA  D7FD               	goto	l446
  5021  00E8CC  D000               	goto	l5248
  5022  00E8CE                     l5248:
  5023  00E8CE  0100               	movlb	0	; () banked
  5024  00E8D0  BF8E               	btfsc	(Configurar_Hora_Grl@estado_1256+1)& (0+255),7,b
  5025  00E8D2  D009               	goto	l5250
  5026  00E8D4  0100               	movlb	0	; () banked
  5027  00E8D6  518E               	movf	(Configurar_Hora_Grl@estado_1256+1)& (0+255),w,b
  5028  00E8D8  E104               	bnz	u6201
  5029  00E8DA  0100               	movlb	0	; () banked
  5030  00E8DC  058D               	decf	Configurar_Hora_Grl@estado_1256& (0+255),w,b
  5031  00E8DE  A0D8               	btfss	status,0,c
  5032  00E8E0  D002               	goto	l5250
  5033  00E8E2                     u6201:
  5034  00E8E2  D74D               	goto	l433
  5035                           
  5036                           ; BSR set to: 0
  5037                           
  5038                           ; BSR set to: 0
  5039  00E8E4  D000               	goto	l5250
  5040  00E8E6                     l5250:
  5041  00E8E6  0100               	movlb	0	; () banked
  5042  00E8E8  517F               	movf	Configurar_Hora_Grl@opcion& (0+255),w,b
  5043  00E8EA  0100               	movlb	0	; () banked
  5044  00E8EC  198B               	xorwf	Configurar_Hora_Grl@config_hora& (0+255),w,b
  5045  00E8EE  E108               	bnz	l5252
  5046  00E8F0  0100               	movlb	0	; () banked
  5047  00E8F2  5180               	movf	(Configurar_Hora_Grl@opcion+1)& (0+255),w,b
  5048  00E8F4  0100               	movlb	0	; () banked
  5049  00E8F6  198C               	xorwf	(Configurar_Hora_Grl@config_hora+1)& (0+255),w,b
  5050  00E8F8  A4D8               	btfss	status,2,c
  5051  00E8FA  D002               	goto	l5252
  5052  00E8FC  D677               	goto	l5160
  5053  00E8FE  D000               	goto	l5252
  5054  00E900                     l5252:
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;monografia_main.c: 738: }
  5058                           ;monografia_main.c: 739: }
  5059                           ;monografia_main.c: 740: }
  5060                           ;monografia_main.c: 741: }
  5061                           ;monografia_main.c: 742: Write_RTC();
  5062  00E900  EC78  F06D         	call	_Write_RTC	;wreg free
  5063  00E904  0012               	return		;funcret
  5064  00E906                     __end_of_Configurar_Hora_Grl:
  5065                           	opt stack 0
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           postinc0	equ	0xFEE
  5073                           wreg	equ	0xFE8
  5074                           postdec1	equ	0xFE5
  5075                           fsr1l	equ	0xFE1
  5076                           indf2	equ	0xFDF
  5077                           fsr2h	equ	0xFDA
  5078                           fsr2l	equ	0xFD9
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function _Configurar_Hora *****************
  5082 ;; Defined at:
  5083 ;;		line 460 in file "../monografia_main.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  opcion          2   31[BANK0 ] int 
  5086 ;;  aux_hora        2   33[BANK0 ] int 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  limite          2   41[BANK0 ] int 
  5089 ;;  inicio          2   39[BANK0 ] int 
  5090 ;;  limite          2   37[BANK0 ] int 
  5091 ;;  inicio          2   35[BANK0 ] int 
  5092 ;;  estado          2   45[BANK0 ] int 
  5093 ;;  estado          2   43[BANK0 ] int 
  5094 ;;  config_hora     2   47[BANK0 ] int 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;		None               void
  5097 ;; Registers used:
  5098 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5104 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5105 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5107 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5108 ;;Total ram usage:       18 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    5
  5111 ;; This function calls:
  5112 ;;		_Lcd_Cmd
  5113 ;;		_Lcd_Out
  5114 ;;		_Seleccionar_Dato
  5115 ;;		_Write_RTC
  5116 ;; This function is called by:
  5117 ;;		_Configurar_Pantalla
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text18
  5122  00E09E                     __ptext18:
  5123                           	opt stack 0
  5124  00E09E                     _Configurar_Hora:
  5125                           	opt stack 24
  5126                           
  5127                           ;monografia_main.c: 462: int config_hora=opcion;
  5128                           
  5129                           ;incstack = 0
  5130  00E09E  C07F  F08F         	movff	Configurar_Hora@opcion,Configurar_Hora@config_hora
  5131  00E0A2  C080  F090         	movff	Configurar_Hora@opcion+1,Configurar_Hora@config_hora+1
  5132                           
  5133                           ;monografia_main.c: 463: aux_hora++;
  5134  00E0A6  0100               	movlb	0	; () banked
  5135  00E0A8  4B81               	infsnz	Configurar_Hora@aux_hora& (0+255),f,b
  5136  00E0AA  2B82               	incf	(Configurar_Hora@aux_hora+1)& (0+255),f,b
  5137                           
  5138                           ;monografia_main.c: 464: while(config_hora==3){
  5139  00E0AC  D12B               	goto	l5130
  5140  00E0AE                     l5052:
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;monografia_main.c: 466: if(config_hora ==3 && aux_hora == 1){
  5144  00E0AE  0E03               	movlw	3
  5145  00E0B0  0100               	movlb	0	; () banked
  5146  00E0B2  198F               	xorwf	Configurar_Hora@config_hora& (0+255),w,b
  5147  00E0B4  0100               	movlb	0	; () banked
  5148  00E0B6  1190               	iorwf	(Configurar_Hora@config_hora+1)& (0+255),w,b
  5149  00E0B8  A4D8               	btfss	status,2,c
  5150  00E0BA  D07E               	goto	l5088
  5151                           
  5152                           ; BSR set to: 0
  5153  00E0BC  0100               	movlb	0	; () banked
  5154  00E0BE  0581               	decf	Configurar_Hora@aux_hora& (0+255),w,b
  5155  00E0C0  0100               	movlb	0	; () banked
  5156  00E0C2  1182               	iorwf	(Configurar_Hora@aux_hora+1)& (0+255),w,b
  5157  00E0C4  A4D8               	btfss	status,2,c
  5158  00E0C6  D078               	goto	l5088
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;monografia_main.c: 467: Lcd_Out(3,0,"");
  5162  00E0C8  0E00               	movlw	0
  5163  00E0CA  6E04               	movwf	Lcd_Out@x,c
  5164  00E0CC  0EA0               	movlw	low (STR_38+9)
  5165  00E0CE  6E05               	movwf	Lcd_Out@buffer,c
  5166  00E0D0  0EFF               	movlw	high (STR_38+9)
  5167  00E0D2  6E06               	movwf	Lcd_Out@buffer+1,c
  5168  00E0D4  0E03               	movlw	3
  5169  00E0D6  ECCB  F061         	call	_Lcd_Out
  5170                           
  5171                           ;monografia_main.c: 468: fila =3;
  5172  00E0DA  0E00               	movlw	0
  5173  00E0DC  0100               	movlb	0	; () banked
  5174  00E0DE  6FB3               	movwf	(_fila+1)& (0+255),b
  5175  00E0E0  0E03               	movlw	3
  5176  00E0E2  6FB2               	movwf	_fila& (0+255),b
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;monografia_main.c: 469: columna =0;
  5180  00E0E4  0E00               	movlw	0
  5181  00E0E6  0100               	movlb	0	; () banked
  5182  00E0E8  6FAD               	movwf	(_columna+1)& (0+255),b
  5183  00E0EA  0E00               	movlw	0
  5184  00E0EC  6FAC               	movwf	_columna& (0+255),b
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;monografia_main.c: 470: int estado =1;
  5188  00E0EE  0E00               	movlw	0
  5189  00E0F0  0100               	movlb	0	; () banked
  5190  00E0F2  6F8C               	movwf	(Configurar_Hora@estado+1)& (0+255),b
  5191  00E0F4  0E01               	movlw	1
  5192  00E0F6  6F8B               	movwf	Configurar_Hora@estado& (0+255),b
  5193                           
  5194                           ;monografia_main.c: 471: while(estado > 0){
  5195  00E0F8  D053               	goto	l5086
  5196  00E0FA                     l327:
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;monografia_main.c: 473: int inicio= -1;
  5200  00E0FA  0100               	movlb	0	; () banked
  5201  00E0FC  6983               	setf	Configurar_Hora@inicio& (0+255),b
  5202  00E0FE  6984               	setf	(Configurar_Hora@inicio+1)& (0+255),b
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;monografia_main.c: 474: int limite=24;
  5206  00E100  0E00               	movlw	0
  5207  00E102  0100               	movlb	0	; () banked
  5208  00E104  6F86               	movwf	(Configurar_Hora@limite+1)& (0+255),b
  5209  00E106  0E18               	movlw	24
  5210  00E108  6F85               	movwf	Configurar_Hora@limite& (0+255),b
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;monografia_main.c: 475: hora= Seleccionar_Dato(hora,fila,columna,inicio,limite);
  5214  00E10A  C0DF  F055         	movff	_hora,Seleccionar_Dato@datos
  5215  00E10E  C0E0  F056         	movff	_hora+1,Seleccionar_Dato@datos+1
  5216  00E112  C0B2  F057         	movff	_fila,Seleccionar_Dato@fila
  5217  00E116  C0B3  F058         	movff	_fila+1,Seleccionar_Dato@fila+1
  5218  00E11A  C0AC  F059         	movff	_columna,Seleccionar_Dato@columna
  5219  00E11E  C0AD  F05A         	movff	_columna+1,Seleccionar_Dato@columna+1
  5220  00E122  C083  F05B         	movff	Configurar_Hora@inicio,Seleccionar_Dato@inicio
  5221  00E126  C084  F05C         	movff	Configurar_Hora@inicio+1,Seleccionar_Dato@inicio+1
  5222  00E12A  C085  F05D         	movff	Configurar_Hora@limite,Seleccionar_Dato@limite
  5223  00E12E  C086  F05E         	movff	Configurar_Hora@limite+1,Seleccionar_Dato@limite+1
  5224  00E132  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  5225  00E136  C055  F0DF         	movff	?_Seleccionar_Dato,_hora
  5226  00E13A  C056  F0E0         	movff	?_Seleccionar_Dato+1,_hora+1
  5227                           
  5228                           ;monografia_main.c: 476: if(PORTAbits.RA0 == 0 && aux_hora == 1){
  5229  00E13E  B080               	btfsc	3968,0,c	;volatile
  5230  00E140  D011               	goto	l328
  5231  00E142  0100               	movlb	0	; () banked
  5232  00E144  0581               	decf	Configurar_Hora@aux_hora& (0+255),w,b
  5233  00E146  0100               	movlb	0	; () banked
  5234  00E148  1182               	iorwf	(Configurar_Hora@aux_hora+1)& (0+255),w,b
  5235  00E14A  A4D8               	btfss	status,2,c
  5236  00E14C  D00B               	goto	l328
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;monografia_main.c: 477: aux_hora++;
  5240  00E14E  0100               	movlb	0	; () banked
  5241  00E150  4B81               	infsnz	Configurar_Hora@aux_hora& (0+255),f,b
  5242  00E152  2B82               	incf	(Configurar_Hora@aux_hora+1)& (0+255),f,b
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;monografia_main.c: 478: estado=0;
  5246  00E154  0E00               	movlw	0
  5247  00E156  0100               	movlb	0	; () banked
  5248  00E158  6F8C               	movwf	(Configurar_Hora@estado+1)& (0+255),b
  5249  00E15A  0E00               	movlw	0
  5250  00E15C  6F8B               	movwf	Configurar_Hora@estado& (0+255),b
  5251                           
  5252                           ;monografia_main.c: 479: while(PORTAbits.RA0 == 0);
  5253  00E15E  D000               	goto	l329
  5254  00E160                     l329:
  5255  00E160  A080               	btfss	3968,0,c	;volatile
  5256  00E162  D7FE               	goto	l329
  5257  00E164                     l328:
  5258                           
  5259                           ;monografia_main.c: 480: }
  5260                           ;monografia_main.c: 481: if(PORTAbits.RA2 == 0 ){
  5261  00E164  B480               	btfsc	3968,2,c	;volatile
  5262  00E166  D01C               	goto	l5086
  5263                           
  5264                           ;monografia_main.c: 482: aux_hora=3;
  5265  00E168  0E00               	movlw	0
  5266  00E16A  0100               	movlb	0	; () banked
  5267  00E16C  6F82               	movwf	(Configurar_Hora@aux_hora+1)& (0+255),b
  5268  00E16E  0E03               	movlw	3
  5269  00E170  6F81               	movwf	Configurar_Hora@aux_hora& (0+255),b
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;monografia_main.c: 483: Lcd_Cmd(0x0C);
  5273  00E172  0E0C               	movlw	12
  5274  00E174  EC92  F066         	call	_Lcd_Cmd
  5275                           
  5276                           ;monografia_main.c: 484: estado=0;
  5277  00E178  0E00               	movlw	0
  5278  00E17A  0100               	movlb	0	; () banked
  5279  00E17C  6F8C               	movwf	(Configurar_Hora@estado+1)& (0+255),b
  5280  00E17E  0E00               	movlw	0
  5281  00E180  6F8B               	movwf	Configurar_Hora@estado& (0+255),b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;monografia_main.c: 485: config = 5;
  5285  00E182  0E00               	movlw	0
  5286  00E184  0100               	movlb	0	; () banked
  5287  00E186  6FAF               	movwf	(_config+1)& (0+255),b
  5288  00E188  0E05               	movlw	5
  5289  00E18A  6FAE               	movwf	_config& (0+255),b
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;monografia_main.c: 486: config_hora=0;
  5293  00E18C  0E00               	movlw	0
  5294  00E18E  0100               	movlb	0	; () banked
  5295  00E190  6F90               	movwf	(Configurar_Hora@config_hora+1)& (0+255),b
  5296  00E192  0E00               	movlw	0
  5297  00E194  6F8F               	movwf	Configurar_Hora@config_hora& (0+255),b
  5298                           
  5299                           ;monografia_main.c: 487: while(PORTAbits.RA2 == 0);
  5300  00E196  D000               	goto	l333
  5301  00E198                     l333:
  5302  00E198  B480               	btfsc	3968,2,c	;volatile
  5303  00E19A  D002               	goto	l5086
  5304  00E19C  D7FD               	goto	l333
  5305  00E19E  D000               	goto	l5086
  5306  00E1A0                     l5086:
  5307  00E1A0  0100               	movlb	0	; () banked
  5308  00E1A2  BF8C               	btfsc	(Configurar_Hora@estado+1)& (0+255),7,b
  5309  00E1A4  D009               	goto	l5088
  5310  00E1A6  0100               	movlb	0	; () banked
  5311  00E1A8  518C               	movf	(Configurar_Hora@estado+1)& (0+255),w,b
  5312  00E1AA  E1A7               	bnz	l327
  5313  00E1AC  0100               	movlb	0	; () banked
  5314  00E1AE  058B               	decf	Configurar_Hora@estado& (0+255),w,b
  5315  00E1B0  A0D8               	btfss	status,0,c
  5316  00E1B2  D002               	goto	l5088
  5317  00E1B4  D7A2               	goto	l327
  5318                           
  5319                           ; BSR set to: 0
  5320  00E1B6  D000               	goto	l5088
  5321  00E1B8                     l5088:
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;monografia_main.c: 488: }
  5325                           ;monografia_main.c: 489: }
  5326                           ;monografia_main.c: 490: }
  5327                           ;monografia_main.c: 491: if( config_hora == 3 && aux_hora == 2){
  5328  00E1B8  0E03               	movlw	3
  5329  00E1BA  0100               	movlb	0	; () banked
  5330  00E1BC  198F               	xorwf	Configurar_Hora@config_hora& (0+255),w,b
  5331  00E1BE  0100               	movlb	0	; () banked
  5332  00E1C0  1190               	iorwf	(Configurar_Hora@config_hora+1)& (0+255),w,b
  5333  00E1C2  A4D8               	btfss	status,2,c
  5334  00E1C4  D09F               	goto	l5130
  5335                           
  5336                           ; BSR set to: 0
  5337  00E1C6  0E02               	movlw	2
  5338  00E1C8  0100               	movlb	0	; () banked
  5339  00E1CA  1981               	xorwf	Configurar_Hora@aux_hora& (0+255),w,b
  5340  00E1CC  0100               	movlb	0	; () banked
  5341  00E1CE  1182               	iorwf	(Configurar_Hora@aux_hora+1)& (0+255),w,b
  5342  00E1D0  A4D8               	btfss	status,2,c
  5343  00E1D2  D098               	goto	l5130
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;monografia_main.c: 493: fila =3;
  5347  00E1D4  0E00               	movlw	0
  5348  00E1D6  0100               	movlb	0	; () banked
  5349  00E1D8  6FB3               	movwf	(_fila+1)& (0+255),b
  5350  00E1DA  0E03               	movlw	3
  5351  00E1DC  6FB2               	movwf	_fila& (0+255),b
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;monografia_main.c: 494: columna =columna +3;
  5355  00E1DE  0E03               	movlw	3
  5356  00E1E0  0100               	movlb	0	; () banked
  5357  00E1E2  25AC               	addwf	_columna& (0+255),w,b
  5358  00E1E4  0100               	movlb	0	; () banked
  5359  00E1E6  6FAC               	movwf	_columna& (0+255),b
  5360  00E1E8  0E00               	movlw	0
  5361  00E1EA  0100               	movlb	0	; () banked
  5362  00E1EC  21AD               	addwfc	(_columna+1)& (0+255),w,b
  5363  00E1EE  0100               	movlb	0	; () banked
  5364  00E1F0  6FAD               	movwf	(_columna+1)& (0+255),b
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;monografia_main.c: 495: Lcd_Out(fila,columna,"");
  5368  00E1F2  C0AC  F004         	movff	_columna,Lcd_Out@x
  5369  00E1F6  0EA0               	movlw	low (STR_38+9)
  5370  00E1F8  6E05               	movwf	Lcd_Out@buffer,c
  5371  00E1FA  0EFF               	movlw	high (STR_38+9)
  5372  00E1FC  6E06               	movwf	Lcd_Out@buffer+1,c
  5373  00E1FE  0100               	movlb	0	; () banked
  5374  00E200  51B2               	movf	_fila& (0+255),w,b
  5375  00E202  ECCB  F061         	call	_Lcd_Out
  5376                           
  5377                           ;monografia_main.c: 496: int estado =1;
  5378  00E206  0E00               	movlw	0
  5379  00E208  0100               	movlb	0	; () banked
  5380  00E20A  6F8E               	movwf	(Configurar_Hora@estado_1203+1)& (0+255),b
  5381  00E20C  0E01               	movlw	1
  5382  00E20E  6F8D               	movwf	Configurar_Hora@estado_1203& (0+255),b
  5383                           
  5384                           ;monografia_main.c: 497: while(estado > 0){
  5385  00E210  D06D               	goto	l5128
  5386  00E212                     l339:
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;monografia_main.c: 499: int inicio= -1;
  5390  00E212  0100               	movlb	0	; () banked
  5391  00E214  6987               	setf	Configurar_Hora@inicio_1204& (0+255),b
  5392  00E216  6988               	setf	(Configurar_Hora@inicio_1204+1)& (0+255),b
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;monografia_main.c: 500: int limite=60;
  5396  00E218  0E00               	movlw	0
  5397  00E21A  0100               	movlb	0	; () banked
  5398  00E21C  6F8A               	movwf	(Configurar_Hora@limite_1205+1)& (0+255),b
  5399  00E21E  0E3C               	movlw	60
  5400  00E220  6F89               	movwf	Configurar_Hora@limite_1205& (0+255),b
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;monografia_main.c: 501: minuto= Seleccionar_Dato(minuto,fila,columna,inicio,limite);
  5404  00E222  C0E7  F055         	movff	_minuto,Seleccionar_Dato@datos
  5405  00E226  C0E8  F056         	movff	_minuto+1,Seleccionar_Dato@datos+1
  5406  00E22A  C0B2  F057         	movff	_fila,Seleccionar_Dato@fila
  5407  00E22E  C0B3  F058         	movff	_fila+1,Seleccionar_Dato@fila+1
  5408  00E232  C0AC  F059         	movff	_columna,Seleccionar_Dato@columna
  5409  00E236  C0AD  F05A         	movff	_columna+1,Seleccionar_Dato@columna+1
  5410  00E23A  C087  F05B         	movff	Configurar_Hora@inicio_1204,Seleccionar_Dato@inicio
  5411  00E23E  C088  F05C         	movff	Configurar_Hora@inicio_1204+1,Seleccionar_Dato@inicio+1
  5412  00E242  C089  F05D         	movff	Configurar_Hora@limite_1205,Seleccionar_Dato@limite
  5413  00E246  C08A  F05E         	movff	Configurar_Hora@limite_1205+1,Seleccionar_Dato@limite+1
  5414  00E24A  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  5415  00E24E  C055  F0E7         	movff	?_Seleccionar_Dato,_minuto
  5416  00E252  C056  F0E8         	movff	?_Seleccionar_Dato+1,_minuto+1
  5417                           
  5418                           ;monografia_main.c: 502: if(PORTAbits.RA3 == 0){
  5419  00E256  B680               	btfsc	3968,3,c	;volatile
  5420  00E258  D00D               	goto	l340
  5421                           
  5422                           ;monografia_main.c: 503: aux_hora = 1;
  5423  00E25A  0E00               	movlw	0
  5424  00E25C  0100               	movlb	0	; () banked
  5425  00E25E  6F82               	movwf	(Configurar_Hora@aux_hora+1)& (0+255),b
  5426  00E260  0E01               	movlw	1
  5427  00E262  6F81               	movwf	Configurar_Hora@aux_hora& (0+255),b
  5428                           
  5429                           ;monografia_main.c: 504: estado =0;
  5430  00E264  0E00               	movlw	0
  5431  00E266  0100               	movlb	0	; () banked
  5432  00E268  6F8E               	movwf	(Configurar_Hora@estado_1203+1)& (0+255),b
  5433  00E26A  0E00               	movlw	0
  5434  00E26C  6F8D               	movwf	Configurar_Hora@estado_1203& (0+255),b
  5435                           
  5436                           ;monografia_main.c: 505: while(PORTAbits.RA3 == 0);
  5437  00E26E  D000               	goto	l341
  5438  00E270                     l341:
  5439  00E270  A680               	btfss	3968,3,c	;volatile
  5440  00E272  D7FE               	goto	l341
  5441  00E274                     l340:
  5442                           
  5443                           ;monografia_main.c: 506: }
  5444                           ;monografia_main.c: 507: if(PORTAbits.RA0 == 0){
  5445  00E274  B080               	btfsc	3968,0,c	;volatile
  5446  00E276  D01E               	goto	l344
  5447                           
  5448                           ;monografia_main.c: 508: aux_hora++;
  5449  00E278  0100               	movlb	0	; () banked
  5450  00E27A  4B81               	infsnz	Configurar_Hora@aux_hora& (0+255),f,b
  5451  00E27C  2B82               	incf	(Configurar_Hora@aux_hora+1)& (0+255),f,b
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;monografia_main.c: 509: config = 4;
  5455  00E27E  0E00               	movlw	0
  5456  00E280  0100               	movlb	0	; () banked
  5457  00E282  6FAF               	movwf	(_config+1)& (0+255),b
  5458  00E284  0E04               	movlw	4
  5459  00E286  6FAE               	movwf	_config& (0+255),b
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;monografia_main.c: 510: estado =0;
  5463  00E288  0E00               	movlw	0
  5464  00E28A  0100               	movlb	0	; () banked
  5465  00E28C  6F8E               	movwf	(Configurar_Hora@estado_1203+1)& (0+255),b
  5466  00E28E  0E00               	movlw	0
  5467  00E290  6F8D               	movwf	Configurar_Hora@estado_1203& (0+255),b
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;monografia_main.c: 511: Lcd_Out(3,15,"");
  5471  00E292  0E0F               	movlw	15
  5472  00E294  6E04               	movwf	Lcd_Out@x,c
  5473  00E296  0EA0               	movlw	low (STR_38+9)
  5474  00E298  6E05               	movwf	Lcd_Out@buffer,c
  5475  00E29A  0EFF               	movlw	high (STR_38+9)
  5476  00E29C  6E06               	movwf	Lcd_Out@buffer+1,c
  5477  00E29E  0E03               	movlw	3
  5478  00E2A0  ECCB  F061         	call	_Lcd_Out
  5479                           
  5480                           ;monografia_main.c: 512: config_hora = 0;
  5481  00E2A4  0E00               	movlw	0
  5482  00E2A6  0100               	movlb	0	; () banked
  5483  00E2A8  6F90               	movwf	(Configurar_Hora@config_hora+1)& (0+255),b
  5484  00E2AA  0E00               	movlw	0
  5485  00E2AC  6F8F               	movwf	Configurar_Hora@config_hora& (0+255),b
  5486                           
  5487                           ;monografia_main.c: 513: while(PORTAbits.RA0 == 0);
  5488  00E2AE  D000               	goto	l345
  5489  00E2B0                     l345:
  5490  00E2B0  A080               	btfss	3968,0,c	;volatile
  5491  00E2B2  D7FE               	goto	l345
  5492  00E2B4                     l344:
  5493                           
  5494                           ;monografia_main.c: 514: }
  5495                           ;monografia_main.c: 515: if(PORTAbits.RA2 == 0 ){
  5496  00E2B4  B480               	btfsc	3968,2,c	;volatile
  5497  00E2B6  D01A               	goto	l5128
  5498                           
  5499                           ;monografia_main.c: 516: aux_hora++;
  5500  00E2B8  0100               	movlb	0	; () banked
  5501  00E2BA  4B81               	infsnz	Configurar_Hora@aux_hora& (0+255),f,b
  5502  00E2BC  2B82               	incf	(Configurar_Hora@aux_hora+1)& (0+255),f,b
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;monografia_main.c: 517: config = 5;
  5506  00E2BE  0E00               	movlw	0
  5507  00E2C0  0100               	movlb	0	; () banked
  5508  00E2C2  6FAF               	movwf	(_config+1)& (0+255),b
  5509  00E2C4  0E05               	movlw	5
  5510  00E2C6  6FAE               	movwf	_config& (0+255),b
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;monografia_main.c: 518: Lcd_Cmd(0x0C);
  5514  00E2C8  0E0C               	movlw	12
  5515  00E2CA  EC92  F066         	call	_Lcd_Cmd
  5516                           
  5517                           ;monografia_main.c: 519: estado=0;
  5518  00E2CE  0E00               	movlw	0
  5519  00E2D0  0100               	movlb	0	; () banked
  5520  00E2D2  6F8E               	movwf	(Configurar_Hora@estado_1203+1)& (0+255),b
  5521  00E2D4  0E00               	movlw	0
  5522  00E2D6  6F8D               	movwf	Configurar_Hora@estado_1203& (0+255),b
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;monografia_main.c: 520: config_hora=0;
  5526  00E2D8  0E00               	movlw	0
  5527  00E2DA  0100               	movlb	0	; () banked
  5528  00E2DC  6F90               	movwf	(Configurar_Hora@config_hora+1)& (0+255),b
  5529  00E2DE  0E00               	movlw	0
  5530  00E2E0  6F8F               	movwf	Configurar_Hora@config_hora& (0+255),b
  5531                           
  5532                           ;monografia_main.c: 521: while(PORTAbits.RA2 == 0);
  5533  00E2E2  D000               	goto	l349
  5534  00E2E4                     l349:
  5535  00E2E4  B480               	btfsc	3968,2,c	;volatile
  5536  00E2E6  D002               	goto	l5128
  5537  00E2E8  D7FD               	goto	l349
  5538  00E2EA  D000               	goto	l5128
  5539  00E2EC                     l5128:
  5540  00E2EC  0100               	movlb	0	; () banked
  5541  00E2EE  BF8E               	btfsc	(Configurar_Hora@estado_1203+1)& (0+255),7,b
  5542  00E2F0  D009               	goto	l5130
  5543  00E2F2  0100               	movlb	0	; () banked
  5544  00E2F4  518E               	movf	(Configurar_Hora@estado_1203+1)& (0+255),w,b
  5545  00E2F6  E18D               	bnz	l339
  5546  00E2F8  0100               	movlb	0	; () banked
  5547  00E2FA  058D               	decf	Configurar_Hora@estado_1203& (0+255),w,b
  5548  00E2FC  A0D8               	btfss	status,0,c
  5549  00E2FE  D002               	goto	l5130
  5550  00E300  D788               	goto	l339
  5551                           
  5552                           ; BSR set to: 0
  5553                           
  5554                           ; BSR set to: 0
  5555  00E302  D000               	goto	l5130
  5556  00E304                     l5130:
  5557                           
  5558                           ; BSR set to: 0
  5559  00E304  0E03               	movlw	3
  5560  00E306  0100               	movlb	0	; () banked
  5561  00E308  198F               	xorwf	Configurar_Hora@config_hora& (0+255),w,b
  5562  00E30A  0100               	movlb	0	; () banked
  5563  00E30C  1190               	iorwf	(Configurar_Hora@config_hora+1)& (0+255),w,b
  5564  00E30E  B4D8               	btfsc	status,2,c
  5565  00E310  D6CE               	goto	l5052
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;monografia_main.c: 522: }
  5569                           ;monografia_main.c: 523: }
  5570                           ;monografia_main.c: 524: }
  5571                           ;monografia_main.c: 525: }
  5572                           ;monografia_main.c: 526: Write_RTC();
  5573                           
  5574                           ; BSR set to: 0
  5575  00E312  EC78  F06D         	call	_Write_RTC	;wreg free
  5576  00E316  0012               	return		;funcret
  5577  00E318                     __end_of_Configurar_Hora:
  5578                           	opt stack 0
  5579                           tblptru	equ	0xFF8
  5580                           tblptrh	equ	0xFF7
  5581                           tblptrl	equ	0xFF6
  5582                           tablat	equ	0xFF5
  5583                           prodh	equ	0xFF4
  5584                           prodl	equ	0xFF3
  5585                           postinc0	equ	0xFEE
  5586                           wreg	equ	0xFE8
  5587                           postdec1	equ	0xFE5
  5588                           fsr1l	equ	0xFE1
  5589                           indf2	equ	0xFDF
  5590                           fsr2h	equ	0xFDA
  5591                           fsr2l	equ	0xFD9
  5592                           status	equ	0xFD8
  5593                           
  5594 ;; *************** function _Configurar_Fecha *****************
  5595 ;; Defined at:
  5596 ;;		line 362 in file "../monografia_main.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;  opcion          2   31[BANK0 ] int 
  5599 ;;  aux_fecha       2   33[BANK0 ] int 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  limite          2   45[BANK0 ] int 
  5602 ;;  inicio          2   43[BANK0 ] int 
  5603 ;;  limite          2   41[BANK0 ] int 
  5604 ;;  inicio          2   39[BANK0 ] int 
  5605 ;;  limite          2   37[BANK0 ] int 
  5606 ;;  inicio          2   35[BANK0 ] int 
  5607 ;;  estado          2   49[BANK0 ] int 
  5608 ;;  estado          2   51[BANK0 ] int 
  5609 ;;  estado          2   47[BANK0 ] int 
  5610 ;;  config_fecha    2   53[BANK0 ] int 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;		None               void
  5613 ;; Registers used:
  5614 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5620 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5621 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5623 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5624 ;;Total ram usage:       24 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    5
  5627 ;; This function calls:
  5628 ;;		_Lcd_Out
  5629 ;;		_Seleccionar_Dato
  5630 ;;		_Write_RTC
  5631 ;; This function is called by:
  5632 ;;		_Configurar_Pantalla
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           	psect	text19
  5637  00E906                     __ptext19:
  5638                           	opt stack 0
  5639  00E906                     _Configurar_Fecha:
  5640                           	opt stack 24
  5641                           
  5642                           ;monografia_main.c: 364: aux_fecha++;
  5643                           
  5644                           ;incstack = 0
  5645  00E906  0100               	movlb	0	; () banked
  5646  00E908  4B81               	infsnz	Configurar_Fecha@aux_fecha& (0+255),f,b
  5647  00E90A  2B82               	incf	(Configurar_Fecha@aux_fecha+1)& (0+255),f,b
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;monografia_main.c: 365: int config_fecha= opcion;
  5651  00E90C  C07F  F095         	movff	Configurar_Fecha@opcion,Configurar_Fecha@config_fecha
  5652  00E910  C080  F096         	movff	Configurar_Fecha@opcion+1,Configurar_Fecha@config_fecha+1
  5653                           
  5654                           ;monografia_main.c: 367: while(config_fecha == 2){
  5655  00E914  D1A3               	goto	l5044
  5656  00E916                     l4946:
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;monografia_main.c: 369: if(config_fecha ==2 && aux_fecha == 1){
  5660  00E916  0E02               	movlw	2
  5661  00E918  0100               	movlb	0	; () banked
  5662  00E91A  1995               	xorwf	Configurar_Fecha@config_fecha& (0+255),w,b
  5663  00E91C  0100               	movlb	0	; () banked
  5664  00E91E  1196               	iorwf	(Configurar_Fecha@config_fecha+1)& (0+255),w,b
  5665  00E920  A4D8               	btfss	status,2,c
  5666  00E922  D079               	goto	l4978
  5667                           
  5668                           ; BSR set to: 0
  5669  00E924  0100               	movlb	0	; () banked
  5670  00E926  0581               	decf	Configurar_Fecha@aux_fecha& (0+255),w,b
  5671  00E928  0100               	movlb	0	; () banked
  5672  00E92A  1182               	iorwf	(Configurar_Fecha@aux_fecha+1)& (0+255),w,b
  5673  00E92C  A4D8               	btfss	status,2,c
  5674  00E92E  D073               	goto	l4978
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;monografia_main.c: 370: Lcd_Out(2,10,"");
  5678  00E930  0E0A               	movlw	10
  5679  00E932  6E04               	movwf	Lcd_Out@x,c
  5680  00E934  0EA0               	movlw	low (STR_38+9)
  5681  00E936  6E05               	movwf	Lcd_Out@buffer,c
  5682  00E938  0EFF               	movlw	high (STR_38+9)
  5683  00E93A  6E06               	movwf	Lcd_Out@buffer+1,c
  5684  00E93C  0E02               	movlw	2
  5685  00E93E  ECCB  F061         	call	_Lcd_Out
  5686                           
  5687                           ;monografia_main.c: 371: fila =2;
  5688  00E942  0E00               	movlw	0
  5689  00E944  0100               	movlb	0	; () banked
  5690  00E946  6FB3               	movwf	(_fila+1)& (0+255),b
  5691  00E948  0E02               	movlw	2
  5692  00E94A  6FB2               	movwf	_fila& (0+255),b
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;monografia_main.c: 372: columna =10;
  5696  00E94C  0E00               	movlw	0
  5697  00E94E  0100               	movlb	0	; () banked
  5698  00E950  6FAD               	movwf	(_columna+1)& (0+255),b
  5699  00E952  0E0A               	movlw	10
  5700  00E954  6FAC               	movwf	_columna& (0+255),b
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;monografia_main.c: 373: int estado =1;
  5704  00E956  0E00               	movlw	0
  5705  00E958  0100               	movlb	0	; () banked
  5706  00E95A  6F90               	movwf	(Configurar_Fecha@estado+1)& (0+255),b
  5707  00E95C  0E01               	movlw	1
  5708  00E95E  6F8F               	movwf	Configurar_Fecha@estado& (0+255),b
  5709                           
  5710                           ;monografia_main.c: 375: while(estado > 0){
  5711  00E960  D04E               	goto	l4976
  5712  00E962                     l4958:
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;monografia_main.c: 377: int inicio=0;
  5716  00E962  0E00               	movlw	0
  5717  00E964  0100               	movlb	0	; () banked
  5718  00E966  6F84               	movwf	(Configurar_Fecha@inicio+1)& (0+255),b
  5719  00E968  0E00               	movlw	0
  5720  00E96A  6F83               	movwf	Configurar_Fecha@inicio& (0+255),b
  5721                           
  5722                           ;monografia_main.c: 378: int limite=32;
  5723  00E96C  0E00               	movlw	0
  5724  00E96E  0100               	movlb	0	; () banked
  5725  00E970  6F86               	movwf	(Configurar_Fecha@limite+1)& (0+255),b
  5726  00E972  0E20               	movlw	32
  5727  00E974  6F85               	movwf	Configurar_Fecha@limite& (0+255),b
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;monografia_main.c: 379: dia= Seleccionar_Dato(dia,fila,columna,inicio,limite);
  5731  00E976  C0DB  F055         	movff	_dia,Seleccionar_Dato@datos
  5732  00E97A  C0DC  F056         	movff	_dia+1,Seleccionar_Dato@datos+1
  5733  00E97E  C0B2  F057         	movff	_fila,Seleccionar_Dato@fila
  5734  00E982  C0B3  F058         	movff	_fila+1,Seleccionar_Dato@fila+1
  5735  00E986  C0AC  F059         	movff	_columna,Seleccionar_Dato@columna
  5736  00E98A  C0AD  F05A         	movff	_columna+1,Seleccionar_Dato@columna+1
  5737  00E98E  C083  F05B         	movff	Configurar_Fecha@inicio,Seleccionar_Dato@inicio
  5738  00E992  C084  F05C         	movff	Configurar_Fecha@inicio+1,Seleccionar_Dato@inicio+1
  5739  00E996  C085  F05D         	movff	Configurar_Fecha@limite,Seleccionar_Dato@limite
  5740  00E99A  C086  F05E         	movff	Configurar_Fecha@limite+1,Seleccionar_Dato@limite+1
  5741  00E99E  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  5742  00E9A2  C055  F0DB         	movff	?_Seleccionar_Dato,_dia
  5743  00E9A6  C056  F0DC         	movff	?_Seleccionar_Dato+1,_dia+1
  5744                           
  5745                           ;monografia_main.c: 381: if(PORTAbits.RA0 == 0 && aux_fecha == 1){
  5746  00E9AA  B080               	btfsc	3968,0,c	;volatile
  5747  00E9AC  D011               	goto	l282
  5748  00E9AE  0100               	movlb	0	; () banked
  5749  00E9B0  0581               	decf	Configurar_Fecha@aux_fecha& (0+255),w,b
  5750  00E9B2  0100               	movlb	0	; () banked
  5751  00E9B4  1182               	iorwf	(Configurar_Fecha@aux_fecha+1)& (0+255),w,b
  5752  00E9B6  A4D8               	btfss	status,2,c
  5753  00E9B8  D00B               	goto	l282
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;monografia_main.c: 382: aux_fecha++;
  5757  00E9BA  0100               	movlb	0	; () banked
  5758  00E9BC  4B81               	infsnz	Configurar_Fecha@aux_fecha& (0+255),f,b
  5759  00E9BE  2B82               	incf	(Configurar_Fecha@aux_fecha+1)& (0+255),f,b
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;monografia_main.c: 383: estado=0;
  5763  00E9C0  0E00               	movlw	0
  5764  00E9C2  0100               	movlb	0	; () banked
  5765  00E9C4  6F90               	movwf	(Configurar_Fecha@estado+1)& (0+255),b
  5766  00E9C6  0E00               	movlw	0
  5767  00E9C8  6F8F               	movwf	Configurar_Fecha@estado& (0+255),b
  5768                           
  5769                           ;monografia_main.c: 384: while(PORTAbits.RA0 == 0);
  5770  00E9CA  D000               	goto	l283
  5771  00E9CC                     l283:
  5772  00E9CC  A080               	btfss	3968,0,c	;volatile
  5773  00E9CE  D7FE               	goto	l283
  5774  00E9D0                     l282:
  5775                           
  5776                           ;monografia_main.c: 385: }
  5777                           ;monografia_main.c: 386: if(PORTAbits.RA2 == 0 ){
  5778  00E9D0  B480               	btfsc	3968,2,c	;volatile
  5779  00E9D2  D015               	goto	l4976
  5780                           
  5781                           ;monografia_main.c: 387: config_fecha=0;
  5782  00E9D4  0E00               	movlw	0
  5783  00E9D6  0100               	movlb	0	; () banked
  5784  00E9D8  6F96               	movwf	(Configurar_Fecha@config_fecha+1)& (0+255),b
  5785  00E9DA  0E00               	movlw	0
  5786  00E9DC  6F95               	movwf	Configurar_Fecha@config_fecha& (0+255),b
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;monografia_main.c: 388: aux_fecha++;
  5790  00E9DE  0100               	movlb	0	; () banked
  5791  00E9E0  4B81               	infsnz	Configurar_Fecha@aux_fecha& (0+255),f,b
  5792  00E9E2  2B82               	incf	(Configurar_Fecha@aux_fecha+1)& (0+255),f,b
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;monografia_main.c: 389: config++;
  5796  00E9E4  0100               	movlb	0	; () banked
  5797  00E9E6  4BAE               	infsnz	_config& (0+255),f,b
  5798  00E9E8  2BAF               	incf	(_config+1)& (0+255),f,b
  5799                           
  5800                           ;monografia_main.c: 390: estado=0;
  5801  00E9EA  0E00               	movlw	0
  5802  00E9EC  0100               	movlb	0	; () banked
  5803  00E9EE  6F90               	movwf	(Configurar_Fecha@estado+1)& (0+255),b
  5804  00E9F0  0E00               	movlw	0
  5805  00E9F2  6F8F               	movwf	Configurar_Fecha@estado& (0+255),b
  5806                           
  5807                           ;monografia_main.c: 391: while(PORTAbits.RA2 == 0);
  5808  00E9F4  D000               	goto	l287
  5809  00E9F6                     l287:
  5810  00E9F6  B480               	btfsc	3968,2,c	;volatile
  5811  00E9F8  D002               	goto	l4976
  5812  00E9FA  D7FD               	goto	l287
  5813  00E9FC  D000               	goto	l4976
  5814  00E9FE                     l4976:
  5815  00E9FE  0100               	movlb	0	; () banked
  5816  00EA00  BF90               	btfsc	(Configurar_Fecha@estado+1)& (0+255),7,b
  5817  00EA02  D009               	goto	l4978
  5818  00EA04  0100               	movlb	0	; () banked
  5819  00EA06  5190               	movf	(Configurar_Fecha@estado+1)& (0+255),w,b
  5820  00EA08  E1AC               	bnz	l4958
  5821  00EA0A  0100               	movlb	0	; () banked
  5822  00EA0C  058F               	decf	Configurar_Fecha@estado& (0+255),w,b
  5823  00EA0E  A0D8               	btfss	status,0,c
  5824  00EA10  D002               	goto	l4978
  5825  00EA12  D7A7               	goto	l4958
  5826                           
  5827                           ; BSR set to: 0
  5828  00EA14  D000               	goto	l4978
  5829  00EA16                     l4978:
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;monografia_main.c: 392: }
  5833                           ;monografia_main.c: 393: }
  5834                           ;monografia_main.c: 394: }
  5835                           ;monografia_main.c: 396: if( config_fecha ==2 && aux_fecha == 2){
  5836  00EA16  0E02               	movlw	2
  5837  00EA18  0100               	movlb	0	; () banked
  5838  00EA1A  1995               	xorwf	Configurar_Fecha@config_fecha& (0+255),w,b
  5839  00EA1C  0100               	movlb	0	; () banked
  5840  00EA1E  1196               	iorwf	(Configurar_Fecha@config_fecha+1)& (0+255),w,b
  5841  00EA20  A4D8               	btfss	status,2,c
  5842  00EA22  D08D               	goto	l5010
  5843                           
  5844                           ; BSR set to: 0
  5845  00EA24  0E02               	movlw	2
  5846  00EA26  0100               	movlb	0	; () banked
  5847  00EA28  1981               	xorwf	Configurar_Fecha@aux_fecha& (0+255),w,b
  5848  00EA2A  0100               	movlb	0	; () banked
  5849  00EA2C  1182               	iorwf	(Configurar_Fecha@aux_fecha+1)& (0+255),w,b
  5850  00EA2E  A4D8               	btfss	status,2,c
  5851  00EA30  D086               	goto	l5010
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;monografia_main.c: 398: fila =2;
  5855  00EA32  0E00               	movlw	0
  5856  00EA34  0100               	movlb	0	; () banked
  5857  00EA36  6FB3               	movwf	(_fila+1)& (0+255),b
  5858  00EA38  0E02               	movlw	2
  5859  00EA3A  6FB2               	movwf	_fila& (0+255),b
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;monografia_main.c: 399: columna =columna +3;
  5863  00EA3C  0E03               	movlw	3
  5864  00EA3E  0100               	movlb	0	; () banked
  5865  00EA40  25AC               	addwf	_columna& (0+255),w,b
  5866  00EA42  0100               	movlb	0	; () banked
  5867  00EA44  6FAC               	movwf	_columna& (0+255),b
  5868  00EA46  0E00               	movlw	0
  5869  00EA48  0100               	movlb	0	; () banked
  5870  00EA4A  21AD               	addwfc	(_columna+1)& (0+255),w,b
  5871  00EA4C  0100               	movlb	0	; () banked
  5872  00EA4E  6FAD               	movwf	(_columna+1)& (0+255),b
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;monografia_main.c: 400: Lcd_Out(fila,columna,"");
  5876  00EA50  C0AC  F004         	movff	_columna,Lcd_Out@x
  5877  00EA54  0EA0               	movlw	low (STR_38+9)
  5878  00EA56  6E05               	movwf	Lcd_Out@buffer,c
  5879  00EA58  0EFF               	movlw	high (STR_38+9)
  5880  00EA5A  6E06               	movwf	Lcd_Out@buffer+1,c
  5881  00EA5C  0100               	movlb	0	; () banked
  5882  00EA5E  51B2               	movf	_fila& (0+255),w,b
  5883  00EA60  ECCB  F061         	call	_Lcd_Out
  5884                           
  5885                           ;monografia_main.c: 401: int estado =1;
  5886  00EA64  0E00               	movlw	0
  5887  00EA66  0100               	movlb	0	; () banked
  5888  00EA68  6F94               	movwf	(Configurar_Fecha@estado_1187+1)& (0+255),b
  5889  00EA6A  0E01               	movlw	1
  5890  00EA6C  6F93               	movwf	Configurar_Fecha@estado_1187& (0+255),b
  5891                           
  5892                           ;monografia_main.c: 402: while(estado > 0){
  5893  00EA6E  D05B               	goto	l5008
  5894  00EA70                     l4990:
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;monografia_main.c: 404: int inicio =0;
  5898  00EA70  0E00               	movlw	0
  5899  00EA72  0100               	movlb	0	; () banked
  5900  00EA74  6F88               	movwf	(Configurar_Fecha@inicio_1188+1)& (0+255),b
  5901  00EA76  0E00               	movlw	0
  5902  00EA78  6F87               	movwf	Configurar_Fecha@inicio_1188& (0+255),b
  5903                           
  5904                           ;monografia_main.c: 405: int limite =13;
  5905  00EA7A  0E00               	movlw	0
  5906  00EA7C  0100               	movlb	0	; () banked
  5907  00EA7E  6F8A               	movwf	(Configurar_Fecha@limite_1189+1)& (0+255),b
  5908  00EA80  0E0D               	movlw	13
  5909  00EA82  6F89               	movwf	Configurar_Fecha@limite_1189& (0+255),b
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;monografia_main.c: 406: mes= Seleccionar_Dato(mes,fila,columna,inicio,limite);
  5913  00EA84  C0E5  F055         	movff	_mes,Seleccionar_Dato@datos
  5914  00EA88  C0E6  F056         	movff	_mes+1,Seleccionar_Dato@datos+1
  5915  00EA8C  C0B2  F057         	movff	_fila,Seleccionar_Dato@fila
  5916  00EA90  C0B3  F058         	movff	_fila+1,Seleccionar_Dato@fila+1
  5917  00EA94  C0AC  F059         	movff	_columna,Seleccionar_Dato@columna
  5918  00EA98  C0AD  F05A         	movff	_columna+1,Seleccionar_Dato@columna+1
  5919  00EA9C  C087  F05B         	movff	Configurar_Fecha@inicio_1188,Seleccionar_Dato@inicio
  5920  00EAA0  C088  F05C         	movff	Configurar_Fecha@inicio_1188+1,Seleccionar_Dato@inicio+1
  5921  00EAA4  C089  F05D         	movff	Configurar_Fecha@limite_1189,Seleccionar_Dato@limite
  5922  00EAA8  C08A  F05E         	movff	Configurar_Fecha@limite_1189+1,Seleccionar_Dato@limite+1
  5923  00EAAC  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  5924  00EAB0  C055  F0E5         	movff	?_Seleccionar_Dato,_mes
  5925  00EAB4  C056  F0E6         	movff	?_Seleccionar_Dato+1,_mes+1
  5926                           
  5927                           ;monografia_main.c: 407: if(PORTAbits.RA3 == 0){
  5928  00EAB8  B680               	btfsc	3968,3,c	;volatile
  5929  00EABA  D00D               	goto	l294
  5930                           
  5931                           ;monografia_main.c: 408: aux_fecha = 1;
  5932  00EABC  0E00               	movlw	0
  5933  00EABE  0100               	movlb	0	; () banked
  5934  00EAC0  6F82               	movwf	(Configurar_Fecha@aux_fecha+1)& (0+255),b
  5935  00EAC2  0E01               	movlw	1
  5936  00EAC4  6F81               	movwf	Configurar_Fecha@aux_fecha& (0+255),b
  5937                           
  5938                           ;monografia_main.c: 409: estado =0;
  5939  00EAC6  0E00               	movlw	0
  5940  00EAC8  0100               	movlb	0	; () banked
  5941  00EACA  6F94               	movwf	(Configurar_Fecha@estado_1187+1)& (0+255),b
  5942  00EACC  0E00               	movlw	0
  5943  00EACE  6F93               	movwf	Configurar_Fecha@estado_1187& (0+255),b
  5944                           
  5945                           ;monografia_main.c: 410: while(PORTAbits.RA3 == 0);
  5946  00EAD0  D000               	goto	l295
  5947  00EAD2                     l295:
  5948  00EAD2  A680               	btfss	3968,3,c	;volatile
  5949  00EAD4  D7FE               	goto	l295
  5950  00EAD6                     l294:
  5951                           
  5952                           ;monografia_main.c: 411: }
  5953                           ;monografia_main.c: 412: if(PORTAbits.RA0 == 0 && aux_fecha == 2 ){
  5954  00EAD6  B080               	btfsc	3968,0,c	;volatile
  5955  00EAD8  D012               	goto	l298
  5956  00EADA  0E02               	movlw	2
  5957  00EADC  0100               	movlb	0	; () banked
  5958  00EADE  1981               	xorwf	Configurar_Fecha@aux_fecha& (0+255),w,b
  5959  00EAE0  0100               	movlb	0	; () banked
  5960  00EAE2  1182               	iorwf	(Configurar_Fecha@aux_fecha+1)& (0+255),w,b
  5961  00EAE4  A4D8               	btfss	status,2,c
  5962  00EAE6  D00B               	goto	l298
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;monografia_main.c: 413: aux_fecha++;
  5966  00EAE8  0100               	movlb	0	; () banked
  5967  00EAEA  4B81               	infsnz	Configurar_Fecha@aux_fecha& (0+255),f,b
  5968  00EAEC  2B82               	incf	(Configurar_Fecha@aux_fecha+1)& (0+255),f,b
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;monografia_main.c: 414: estado=0;
  5972  00EAEE  0E00               	movlw	0
  5973  00EAF0  0100               	movlb	0	; () banked
  5974  00EAF2  6F94               	movwf	(Configurar_Fecha@estado_1187+1)& (0+255),b
  5975  00EAF4  0E00               	movlw	0
  5976  00EAF6  6F93               	movwf	Configurar_Fecha@estado_1187& (0+255),b
  5977                           
  5978                           ;monografia_main.c: 415: while(PORTAbits.RA0 == 0);
  5979  00EAF8  D000               	goto	l299
  5980  00EAFA                     l299:
  5981  00EAFA  A080               	btfss	3968,0,c	;volatile
  5982  00EAFC  D7FE               	goto	l299
  5983  00EAFE                     l298:
  5984                           
  5985                           ;monografia_main.c: 416: }
  5986                           ;monografia_main.c: 417: if(PORTAbits.RA2 == 0 ){
  5987  00EAFE  B480               	btfsc	3968,2,c	;volatile
  5988  00EB00  D012               	goto	l5008
  5989                           
  5990                           ;monografia_main.c: 418: config_fecha=0;
  5991  00EB02  0E00               	movlw	0
  5992  00EB04  0100               	movlb	0	; () banked
  5993  00EB06  6F96               	movwf	(Configurar_Fecha@config_fecha+1)& (0+255),b
  5994  00EB08  0E00               	movlw	0
  5995  00EB0A  6F95               	movwf	Configurar_Fecha@config_fecha& (0+255),b
  5996                           
  5997                           ;monografia_main.c: 419: estado=0;
  5998  00EB0C  0E00               	movlw	0
  5999  00EB0E  0100               	movlb	0	; () banked
  6000  00EB10  6F94               	movwf	(Configurar_Fecha@estado_1187+1)& (0+255),b
  6001  00EB12  0E00               	movlw	0
  6002  00EB14  6F93               	movwf	Configurar_Fecha@estado_1187& (0+255),b
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;monografia_main.c: 420: config++;
  6006  00EB16  0100               	movlb	0	; () banked
  6007  00EB18  4BAE               	infsnz	_config& (0+255),f,b
  6008  00EB1A  2BAF               	incf	(_config+1)& (0+255),f,b
  6009                           
  6010                           ;monografia_main.c: 421: while(PORTAbits.RA2 == 0);
  6011  00EB1C  D000               	goto	l303
  6012  00EB1E                     l303:
  6013  00EB1E  B480               	btfsc	3968,2,c	;volatile
  6014  00EB20  D002               	goto	l5008
  6015  00EB22  D7FD               	goto	l303
  6016  00EB24  D000               	goto	l5008
  6017  00EB26                     l5008:
  6018  00EB26  0100               	movlb	0	; () banked
  6019  00EB28  BF94               	btfsc	(Configurar_Fecha@estado_1187+1)& (0+255),7,b
  6020  00EB2A  D009               	goto	l5010
  6021  00EB2C  0100               	movlb	0	; () banked
  6022  00EB2E  5194               	movf	(Configurar_Fecha@estado_1187+1)& (0+255),w,b
  6023  00EB30  E19F               	bnz	l4990
  6024  00EB32  0100               	movlb	0	; () banked
  6025  00EB34  0593               	decf	Configurar_Fecha@estado_1187& (0+255),w,b
  6026  00EB36  A0D8               	btfss	status,0,c
  6027  00EB38  D002               	goto	l5010
  6028  00EB3A  D79A               	goto	l4990
  6029                           
  6030                           ; BSR set to: 0
  6031  00EB3C  D000               	goto	l5010
  6032  00EB3E                     l5010:
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;monografia_main.c: 422: }
  6036                           ;monografia_main.c: 423: }
  6037                           ;monografia_main.c: 424: }
  6038                           ;monografia_main.c: 426: if(config_fecha == 2 && aux_fecha == 3){
  6039  00EB3E  0E02               	movlw	2
  6040  00EB40  0100               	movlb	0	; () banked
  6041  00EB42  1995               	xorwf	Configurar_Fecha@config_fecha& (0+255),w,b
  6042  00EB44  0100               	movlb	0	; () banked
  6043  00EB46  1196               	iorwf	(Configurar_Fecha@config_fecha+1)& (0+255),w,b
  6044  00EB48  A4D8               	btfss	status,2,c
  6045  00EB4A  D088               	goto	l5044
  6046                           
  6047                           ; BSR set to: 0
  6048  00EB4C  0E03               	movlw	3
  6049  00EB4E  0100               	movlb	0	; () banked
  6050  00EB50  1981               	xorwf	Configurar_Fecha@aux_fecha& (0+255),w,b
  6051  00EB52  0100               	movlb	0	; () banked
  6052  00EB54  1182               	iorwf	(Configurar_Fecha@aux_fecha+1)& (0+255),w,b
  6053  00EB56  A4D8               	btfss	status,2,c
  6054  00EB58  D081               	goto	l5044
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;monografia_main.c: 427: fila =2;
  6058  00EB5A  0E00               	movlw	0
  6059  00EB5C  0100               	movlb	0	; () banked
  6060  00EB5E  6FB3               	movwf	(_fila+1)& (0+255),b
  6061  00EB60  0E02               	movlw	2
  6062  00EB62  6FB2               	movwf	_fila& (0+255),b
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;monografia_main.c: 428: columna =columna +3;
  6066  00EB64  0E03               	movlw	3
  6067  00EB66  0100               	movlb	0	; () banked
  6068  00EB68  25AC               	addwf	_columna& (0+255),w,b
  6069  00EB6A  0100               	movlb	0	; () banked
  6070  00EB6C  6FAC               	movwf	_columna& (0+255),b
  6071  00EB6E  0E00               	movlw	0
  6072  00EB70  0100               	movlb	0	; () banked
  6073  00EB72  21AD               	addwfc	(_columna+1)& (0+255),w,b
  6074  00EB74  0100               	movlb	0	; () banked
  6075  00EB76  6FAD               	movwf	(_columna+1)& (0+255),b
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;monografia_main.c: 429: Lcd_Out(fila,columna,"");
  6079  00EB78  C0AC  F004         	movff	_columna,Lcd_Out@x
  6080  00EB7C  0EA0               	movlw	low (STR_38+9)
  6081  00EB7E  6E05               	movwf	Lcd_Out@buffer,c
  6082  00EB80  0EFF               	movlw	high (STR_38+9)
  6083  00EB82  6E06               	movwf	Lcd_Out@buffer+1,c
  6084  00EB84  0100               	movlb	0	; () banked
  6085  00EB86  51B2               	movf	_fila& (0+255),w,b
  6086  00EB88  ECCB  F061         	call	_Lcd_Out
  6087                           
  6088                           ;monografia_main.c: 430: int estado =1;
  6089  00EB8C  0E00               	movlw	0
  6090  00EB8E  0100               	movlb	0	; () banked
  6091  00EB90  6F92               	movwf	(Configurar_Fecha@estado_1191+1)& (0+255),b
  6092  00EB92  0E01               	movlw	1
  6093  00EB94  6F91               	movwf	Configurar_Fecha@estado_1191& (0+255),b
  6094                           
  6095                           ;monografia_main.c: 431: while(estado > 0){
  6096  00EB96  D056               	goto	l5042
  6097  00EB98                     l5022:
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;monografia_main.c: 433: int inicio=0;
  6101  00EB98  0E00               	movlw	0
  6102  00EB9A  0100               	movlb	0	; () banked
  6103  00EB9C  6F8C               	movwf	(Configurar_Fecha@inicio_1192+1)& (0+255),b
  6104  00EB9E  0E00               	movlw	0
  6105  00EBA0  6F8B               	movwf	Configurar_Fecha@inicio_1192& (0+255),b
  6106                           
  6107                           ;monografia_main.c: 434: int limite=100;
  6108  00EBA2  0E00               	movlw	0
  6109  00EBA4  0100               	movlb	0	; () banked
  6110  00EBA6  6F8E               	movwf	(Configurar_Fecha@limite_1193+1)& (0+255),b
  6111  00EBA8  0E64               	movlw	100
  6112  00EBAA  6F8D               	movwf	Configurar_Fecha@limite_1193& (0+255),b
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;monografia_main.c: 435: anio= Seleccionar_Dato(anio,fila,columna,inicio,limite);
  6116  00EBAC  C0D9  F055         	movff	_anio,Seleccionar_Dato@datos
  6117  00EBB0  C0DA  F056         	movff	_anio+1,Seleccionar_Dato@datos+1
  6118  00EBB4  C0B2  F057         	movff	_fila,Seleccionar_Dato@fila
  6119  00EBB8  C0B3  F058         	movff	_fila+1,Seleccionar_Dato@fila+1
  6120  00EBBC  C0AC  F059         	movff	_columna,Seleccionar_Dato@columna
  6121  00EBC0  C0AD  F05A         	movff	_columna+1,Seleccionar_Dato@columna+1
  6122  00EBC4  C08B  F05B         	movff	Configurar_Fecha@inicio_1192,Seleccionar_Dato@inicio
  6123  00EBC8  C08C  F05C         	movff	Configurar_Fecha@inicio_1192+1,Seleccionar_Dato@inicio+1
  6124  00EBCC  C08D  F05D         	movff	Configurar_Fecha@limite_1193,Seleccionar_Dato@limite
  6125  00EBD0  C08E  F05E         	movff	Configurar_Fecha@limite_1193+1,Seleccionar_Dato@limite+1
  6126  00EBD4  ECDF  F068         	call	_Seleccionar_Dato	;wreg free
  6127  00EBD8  C055  F0D9         	movff	?_Seleccionar_Dato,_anio
  6128  00EBDC  C056  F0DA         	movff	?_Seleccionar_Dato+1,_anio+1
  6129                           
  6130                           ;monografia_main.c: 436: if(PORTAbits.RA3 == 0){
  6131  00EBE0  B680               	btfsc	3968,3,c	;volatile
  6132  00EBE2  D01C               	goto	l310
  6133                           
  6134                           ;monografia_main.c: 437: fila =2;
  6135  00EBE4  0E00               	movlw	0
  6136  00EBE6  0100               	movlb	0	; () banked
  6137  00EBE8  6FB3               	movwf	(_fila+1)& (0+255),b
  6138  00EBEA  0E02               	movlw	2
  6139  00EBEC  6FB2               	movwf	_fila& (0+255),b
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;monografia_main.c: 438: columna =columna -6;
  6143  00EBEE  0EFA               	movlw	250
  6144  00EBF0  0100               	movlb	0	; () banked
  6145  00EBF2  25AC               	addwf	_columna& (0+255),w,b
  6146  00EBF4  0100               	movlb	0	; () banked
  6147  00EBF6  6FAC               	movwf	_columna& (0+255),b
  6148  00EBF8  0EFF               	movlw	255
  6149  00EBFA  0100               	movlb	0	; () banked
  6150  00EBFC  21AD               	addwfc	(_columna+1)& (0+255),w,b
  6151  00EBFE  0100               	movlb	0	; () banked
  6152  00EC00  6FAD               	movwf	(_columna+1)& (0+255),b
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;monografia_main.c: 439: aux_fecha=2;
  6156  00EC02  0E00               	movlw	0
  6157  00EC04  0100               	movlb	0	; () banked
  6158  00EC06  6F82               	movwf	(Configurar_Fecha@aux_fecha+1)& (0+255),b
  6159  00EC08  0E02               	movlw	2
  6160  00EC0A  6F81               	movwf	Configurar_Fecha@aux_fecha& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;monografia_main.c: 440: estado=0;
  6164  00EC0C  0E00               	movlw	0
  6165  00EC0E  0100               	movlb	0	; () banked
  6166  00EC10  6F92               	movwf	(Configurar_Fecha@estado_1191+1)& (0+255),b
  6167  00EC12  0E00               	movlw	0
  6168  00EC14  6F91               	movwf	Configurar_Fecha@estado_1191& (0+255),b
  6169                           
  6170                           ;monografia_main.c: 441: while(PORTAbits.RA3 == 0);
  6171  00EC16  D000               	goto	l311
  6172  00EC18                     l311:
  6173  00EC18  A680               	btfss	3968,3,c	;volatile
  6174  00EC1A  D7FE               	goto	l311
  6175  00EC1C                     l310:
  6176                           
  6177                           ;monografia_main.c: 442: }
  6178                           ;monografia_main.c: 443: if(PORTAbits.RA2 == 0 ){
  6179  00EC1C  B480               	btfsc	3968,2,c	;volatile
  6180  00EC1E  D012               	goto	l5042
  6181                           
  6182                           ;monografia_main.c: 444: config_fecha=0;
  6183  00EC20  0E00               	movlw	0
  6184  00EC22  0100               	movlb	0	; () banked
  6185  00EC24  6F96               	movwf	(Configurar_Fecha@config_fecha+1)& (0+255),b
  6186  00EC26  0E00               	movlw	0
  6187  00EC28  6F95               	movwf	Configurar_Fecha@config_fecha& (0+255),b
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;monografia_main.c: 445: config++;
  6191  00EC2A  0100               	movlb	0	; () banked
  6192  00EC2C  4BAE               	infsnz	_config& (0+255),f,b
  6193  00EC2E  2BAF               	incf	(_config+1)& (0+255),f,b
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;monografia_main.c: 446: estado=0;
  6197  00EC30  0E00               	movlw	0
  6198  00EC32  0100               	movlb	0	; () banked
  6199  00EC34  6F92               	movwf	(Configurar_Fecha@estado_1191+1)& (0+255),b
  6200  00EC36  0E00               	movlw	0
  6201  00EC38  6F91               	movwf	Configurar_Fecha@estado_1191& (0+255),b
  6202                           
  6203                           ;monografia_main.c: 447: while(PORTAbits.RA2 == 0);
  6204  00EC3A  D000               	goto	l315
  6205  00EC3C                     l315:
  6206  00EC3C  B480               	btfsc	3968,2,c	;volatile
  6207  00EC3E  D002               	goto	l5042
  6208  00EC40  D7FD               	goto	l315
  6209  00EC42  D000               	goto	l5042
  6210  00EC44                     l5042:
  6211  00EC44  0100               	movlb	0	; () banked
  6212  00EC46  BF92               	btfsc	(Configurar_Fecha@estado_1191+1)& (0+255),7,b
  6213  00EC48  D009               	goto	l5044
  6214  00EC4A  0100               	movlb	0	; () banked
  6215  00EC4C  5192               	movf	(Configurar_Fecha@estado_1191+1)& (0+255),w,b
  6216  00EC4E  E1A4               	bnz	l5022
  6217  00EC50  0100               	movlb	0	; () banked
  6218  00EC52  0591               	decf	Configurar_Fecha@estado_1191& (0+255),w,b
  6219  00EC54  A0D8               	btfss	status,0,c
  6220  00EC56  D002               	goto	l5044
  6221  00EC58  D79F               	goto	l5022
  6222                           
  6223                           ; BSR set to: 0
  6224                           
  6225                           ; BSR set to: 0
  6226  00EC5A  D000               	goto	l5044
  6227  00EC5C                     l5044:
  6228                           
  6229                           ; BSR set to: 0
  6230  00EC5C  0E02               	movlw	2
  6231  00EC5E  0100               	movlb	0	; () banked
  6232  00EC60  1995               	xorwf	Configurar_Fecha@config_fecha& (0+255),w,b
  6233  00EC62  0100               	movlb	0	; () banked
  6234  00EC64  1196               	iorwf	(Configurar_Fecha@config_fecha+1)& (0+255),w,b
  6235  00EC66  B4D8               	btfsc	status,2,c
  6236  00EC68  D656               	goto	l4946
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;monografia_main.c: 448: }
  6240                           ;monografia_main.c: 449: }
  6241                           ;monografia_main.c: 450: }
  6242                           ;monografia_main.c: 451: }
  6243                           ;monografia_main.c: 452: Write_RTC();
  6244                           
  6245                           ; BSR set to: 0
  6246  00EC6A  EC78  F06D         	call	_Write_RTC	;wreg free
  6247  00EC6E  0012               	return		;funcret
  6248  00EC70                     __end_of_Configurar_Fecha:
  6249                           	opt stack 0
  6250                           tblptru	equ	0xFF8
  6251                           tblptrh	equ	0xFF7
  6252                           tblptrl	equ	0xFF6
  6253                           tablat	equ	0xFF5
  6254                           prodh	equ	0xFF4
  6255                           prodl	equ	0xFF3
  6256                           postinc0	equ	0xFEE
  6257                           wreg	equ	0xFE8
  6258                           postdec1	equ	0xFE5
  6259                           fsr1l	equ	0xFE1
  6260                           indf2	equ	0xFDF
  6261                           fsr2h	equ	0xFDA
  6262                           fsr2l	equ	0xFD9
  6263                           status	equ	0xFD8
  6264                           
  6265 ;; *************** function _Seleccionar_Dato *****************
  6266 ;; Defined at:
  6267 ;;		line 534 in file "../monografia_main.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;  datos           2   84[COMRAM] int 
  6270 ;;  fila            2   86[COMRAM] int 
  6271 ;;  columna         2   88[COMRAM] int 
  6272 ;;  inicio          2   90[COMRAM] int 
  6273 ;;  limite          2   92[COMRAM] int 
  6274 ;; Auto vars:     Size  Location     Type
  6275 ;;  dato            2   29[BANK0 ] int 
  6276 ;; Return value:  Size  Location     Type
  6277 ;;                  2   84[COMRAM] int 
  6278 ;; Registers used:
  6279 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6280 ;; Tracked objects:
  6281 ;;		On entry : 0/0
  6282 ;;		On exit  : 0/0
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6285 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6286 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6287 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6288 ;;      Totals:        11       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6289 ;;Total ram usage:       13 bytes
  6290 ;; Hardware stack levels used:    1
  6291 ;; Hardware stack levels required when called:    4
  6292 ;; This function calls:
  6293 ;;		_Lcd_Cmd
  6294 ;;		_Lcd_Out
  6295 ;;		_sprintf
  6296 ;; This function is called by:
  6297 ;;		_Configurar_Fecha
  6298 ;;		_Configurar_Hora
  6299 ;;		_Programar_Temperatura
  6300 ;;		_Configurar_Hora_Grl
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text20
  6305  00D1BE                     __ptext20:
  6306                           	opt stack 0
  6307  00D1BE                     _Seleccionar_Dato:
  6308                           	opt stack 24
  6309                           
  6310                           ;monografia_main.c: 536: int dato =datos;
  6311                           
  6312                           ;incstack = 0
  6313  00D1BE  C055  F07D         	movff	Seleccionar_Dato@datos,Seleccionar_Dato@dato
  6314  00D1C2  C056  F07E         	movff	Seleccionar_Dato@datos+1,Seleccionar_Dato@dato+1
  6315                           
  6316                           ;monografia_main.c: 537: if(PORTAbits.RA5 == 0){
  6317  00D1C6  BA80               	btfsc	3968,5,c	;volatile
  6318  00D1C8  D046               	goto	l357
  6319                           
  6320                           ;monografia_main.c: 538: dato ++;
  6321  00D1CA  0100               	movlb	0	; () banked
  6322  00D1CC  4B7D               	infsnz	Seleccionar_Dato@dato& (0+255),f,b
  6323  00D1CE  2B7E               	incf	(Seleccionar_Dato@dato+1)& (0+255),f,b
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;monografia_main.c: 539: if(dato > inicio && dato < limite){
  6327  00D1D0  0100               	movlb	0	; () banked
  6328  00D1D2  517D               	movf	Seleccionar_Dato@dato& (0+255),w,b
  6329  00D1D4  5C5B               	subwf	Seleccionar_Dato@inicio,w,c
  6330  00D1D6  505C               	movf	Seleccionar_Dato@inicio+1,w,c
  6331  00D1D8  0A80               	xorlw	128
  6332  00D1DA  6E5F               	movwf	??_Seleccionar_Dato& (0+255),c
  6333  00D1DC  0100               	movlb	0	; () banked
  6334  00D1DE  517E               	movf	(Seleccionar_Dato@dato+1)& (0+255),w,b
  6335  00D1E0  0A80               	xorlw	128
  6336  00D1E2  585F               	subwfb	??_Seleccionar_Dato& (0+255),w,c
  6337  00D1E4  B0D8               	btfsc	status,0,c
  6338  00D1E6  D030               	goto	l4794
  6339                           
  6340                           ; BSR set to: 0
  6341  00D1E8  505D               	movf	Seleccionar_Dato@limite,w,c
  6342  00D1EA  0100               	movlb	0	; () banked
  6343  00D1EC  5D7D               	subwf	Seleccionar_Dato@dato& (0+255),w,b
  6344  00D1EE  0100               	movlb	0	; () banked
  6345  00D1F0  517E               	movf	(Seleccionar_Dato@dato+1)& (0+255),w,b
  6346  00D1F2  0A80               	xorlw	128
  6347  00D1F4  6E5F               	movwf	??_Seleccionar_Dato& (0+255),c
  6348  00D1F6  505E               	movf	Seleccionar_Dato@limite+1,w,c
  6349  00D1F8  0A80               	xorlw	128
  6350  00D1FA  585F               	subwfb	??_Seleccionar_Dato& (0+255),w,c
  6351  00D1FC  B0D8               	btfsc	status,0,c
  6352  00D1FE  D024               	goto	l4794
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;monografia_main.c: 541: sprintf(buffer1,"%02u",dato);
  6356  00D200  0EB9               	movlw	low _buffer1
  6357  00D202  6E43               	movwf	sprintf@sp,c
  6358  00D204  0E00               	movlw	high _buffer1
  6359  00D206  6E44               	movwf	sprintf@sp+1,c
  6360  00D208  0E14               	movlw	low (STR_12+17)
  6361  00D20A  6E45               	movwf	sprintf@f,c
  6362  00D20C  0EFF               	movlw	high (STR_12+17)
  6363  00D20E  6E46               	movwf	sprintf@f+1,c
  6364  00D210  C07D  F047         	movff	Seleccionar_Dato@dato,?_sprintf+4
  6365  00D214  C07E  F048         	movff	Seleccionar_Dato@dato+1,?_sprintf+5
  6366  00D218  EC37  F078         	call	_sprintf	;wreg free
  6367                           
  6368                           ;monografia_main.c: 542: Lcd_Out(fila,columna,buffer1);
  6369  00D21C  C059  F004         	movff	Seleccionar_Dato@columna,Lcd_Out@x
  6370  00D220  0EB9               	movlw	low _buffer1
  6371  00D222  6E05               	movwf	Lcd_Out@buffer,c
  6372  00D224  0E00               	movlw	high _buffer1
  6373  00D226  6E06               	movwf	Lcd_Out@buffer+1,c
  6374  00D228  5057               	movf	Seleccionar_Dato@fila,w,c
  6375  00D22A  ECCB  F061         	call	_Lcd_Out
  6376                           
  6377                           ;monografia_main.c: 543: Lcd_Out(fila,columna,"");
  6378  00D22E  C059  F004         	movff	Seleccionar_Dato@columna,Lcd_Out@x
  6379  00D232  0EA0               	movlw	low (STR_38+9)
  6380  00D234  6E05               	movwf	Lcd_Out@buffer,c
  6381  00D236  0EFF               	movlw	high (STR_38+9)
  6382  00D238  6E06               	movwf	Lcd_Out@buffer+1,c
  6383  00D23A  5057               	movf	Seleccionar_Dato@fila,w,c
  6384  00D23C  ECCB  F061         	call	_Lcd_Out
  6385                           
  6386                           ;monografia_main.c: 544: Lcd_Cmd( 15);
  6387  00D240  0E0F               	movlw	15
  6388  00D242  EC92  F066         	call	_Lcd_Cmd
  6389                           
  6390                           ;monografia_main.c: 545: }else{
  6391  00D246  D005               	goto	l360
  6392  00D248                     l4794:
  6393                           
  6394                           ;monografia_main.c: 546: dato--;
  6395  00D248  0100               	movlb	0	; () banked
  6396  00D24A  077D               	decf	Seleccionar_Dato@dato& (0+255),f,b
  6397  00D24C  A0D8               	btfss	status,0,c
  6398  00D24E  077E               	decf	(Seleccionar_Dato@dato+1)& (0+255),f,b
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;monografia_main.c: 547: }
  6402                           ;monografia_main.c: 548: while(PORTAbits.RA5 == 0);
  6403  00D250  D000               	goto	l360
  6404  00D252                     l360:
  6405  00D252  AA80               	btfss	3968,5,c	;volatile
  6406  00D254  D7FE               	goto	l360
  6407  00D256                     l357:
  6408                           
  6409                           ;monografia_main.c: 549: }
  6410                           ;monografia_main.c: 550: if(PORTAbits.RA1 == 0){
  6411  00D256  B280               	btfsc	3968,1,c	;volatile
  6412  00D258  D046               	goto	l363
  6413                           
  6414                           ;monografia_main.c: 551: dato -- ;
  6415  00D25A  0100               	movlb	0	; () banked
  6416  00D25C  077D               	decf	Seleccionar_Dato@dato& (0+255),f,b
  6417  00D25E  A0D8               	btfss	status,0,c
  6418  00D260  077E               	decf	(Seleccionar_Dato@dato+1)& (0+255),f,b
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;monografia_main.c: 552: if(dato > inicio && dato < limite){
  6422  00D262  0100               	movlb	0	; () banked
  6423  00D264  517D               	movf	Seleccionar_Dato@dato& (0+255),w,b
  6424  00D266  5C5B               	subwf	Seleccionar_Dato@inicio,w,c
  6425  00D268  505C               	movf	Seleccionar_Dato@inicio+1,w,c
  6426  00D26A  0A80               	xorlw	128
  6427  00D26C  6E5F               	movwf	??_Seleccionar_Dato& (0+255),c
  6428  00D26E  0100               	movlb	0	; () banked
  6429  00D270  517E               	movf	(Seleccionar_Dato@dato+1)& (0+255),w,b
  6430  00D272  0A80               	xorlw	128
  6431  00D274  585F               	subwfb	??_Seleccionar_Dato& (0+255),w,c
  6432  00D276  B0D8               	btfsc	status,0,c
  6433  00D278  D030               	goto	l4810
  6434                           
  6435                           ; BSR set to: 0
  6436  00D27A  505D               	movf	Seleccionar_Dato@limite,w,c
  6437  00D27C  0100               	movlb	0	; () banked
  6438  00D27E  5D7D               	subwf	Seleccionar_Dato@dato& (0+255),w,b
  6439  00D280  0100               	movlb	0	; () banked
  6440  00D282  517E               	movf	(Seleccionar_Dato@dato+1)& (0+255),w,b
  6441  00D284  0A80               	xorlw	128
  6442  00D286  6E5F               	movwf	??_Seleccionar_Dato& (0+255),c
  6443  00D288  505E               	movf	Seleccionar_Dato@limite+1,w,c
  6444  00D28A  0A80               	xorlw	128
  6445  00D28C  585F               	subwfb	??_Seleccionar_Dato& (0+255),w,c
  6446  00D28E  B0D8               	btfsc	status,0,c
  6447  00D290  D024               	goto	l4810
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;monografia_main.c: 554: sprintf(buffer1,"%02u",dato);
  6451  00D292  0EB9               	movlw	low _buffer1
  6452  00D294  6E43               	movwf	sprintf@sp,c
  6453  00D296  0E00               	movlw	high _buffer1
  6454  00D298  6E44               	movwf	sprintf@sp+1,c
  6455  00D29A  0E14               	movlw	low (STR_12+17)
  6456  00D29C  6E45               	movwf	sprintf@f,c
  6457  00D29E  0EFF               	movlw	high (STR_12+17)
  6458  00D2A0  6E46               	movwf	sprintf@f+1,c
  6459  00D2A2  C07D  F047         	movff	Seleccionar_Dato@dato,?_sprintf+4
  6460  00D2A6  C07E  F048         	movff	Seleccionar_Dato@dato+1,?_sprintf+5
  6461  00D2AA  EC37  F078         	call	_sprintf	;wreg free
  6462                           
  6463                           ;monografia_main.c: 555: Lcd_Out(fila,columna,buffer1);
  6464  00D2AE  C059  F004         	movff	Seleccionar_Dato@columna,Lcd_Out@x
  6465  00D2B2  0EB9               	movlw	low _buffer1
  6466  00D2B4  6E05               	movwf	Lcd_Out@buffer,c
  6467  00D2B6  0E00               	movlw	high _buffer1
  6468  00D2B8  6E06               	movwf	Lcd_Out@buffer+1,c
  6469  00D2BA  5057               	movf	Seleccionar_Dato@fila,w,c
  6470  00D2BC  ECCB  F061         	call	_Lcd_Out
  6471                           
  6472                           ;monografia_main.c: 556: Lcd_Out(fila,columna,"");
  6473  00D2C0  C059  F004         	movff	Seleccionar_Dato@columna,Lcd_Out@x
  6474  00D2C4  0EA0               	movlw	low (STR_38+9)
  6475  00D2C6  6E05               	movwf	Lcd_Out@buffer,c
  6476  00D2C8  0EFF               	movlw	high (STR_38+9)
  6477  00D2CA  6E06               	movwf	Lcd_Out@buffer+1,c
  6478  00D2CC  5057               	movf	Seleccionar_Dato@fila,w,c
  6479  00D2CE  ECCB  F061         	call	_Lcd_Out
  6480                           
  6481                           ;monografia_main.c: 557: Lcd_Cmd( 15);
  6482  00D2D2  0E0F               	movlw	15
  6483  00D2D4  EC92  F066         	call	_Lcd_Cmd
  6484                           
  6485                           ;monografia_main.c: 558: }else{
  6486  00D2D8  D004               	goto	l366
  6487  00D2DA                     l4810:
  6488                           
  6489                           ;monografia_main.c: 559: dato++;
  6490  00D2DA  0100               	movlb	0	; () banked
  6491  00D2DC  4B7D               	infsnz	Seleccionar_Dato@dato& (0+255),f,b
  6492  00D2DE  2B7E               	incf	(Seleccionar_Dato@dato+1)& (0+255),f,b
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;monografia_main.c: 560: }
  6496                           ;monografia_main.c: 561: while(PORTAbits.RA1 == 0);
  6497  00D2E0  D000               	goto	l366
  6498  00D2E2                     l366:
  6499  00D2E2  A280               	btfss	3968,1,c	;volatile
  6500  00D2E4  D7FE               	goto	l366
  6501  00D2E6                     l363:
  6502                           
  6503                           ;monografia_main.c: 562: }
  6504                           ;monografia_main.c: 563: return dato;
  6505  00D2E6  C07D  F055         	movff	Seleccionar_Dato@dato,?_Seleccionar_Dato
  6506  00D2EA  C07E  F056         	movff	Seleccionar_Dato@dato+1,?_Seleccionar_Dato+1
  6507  00D2EE  0012               	return		;funcret
  6508  00D2F0                     __end_of_Seleccionar_Dato:
  6509                           	opt stack 0
  6510                           tblptru	equ	0xFF8
  6511                           tblptrh	equ	0xFF7
  6512                           tblptrl	equ	0xFF6
  6513                           tablat	equ	0xFF5
  6514                           prodh	equ	0xFF4
  6515                           prodl	equ	0xFF3
  6516                           postinc0	equ	0xFEE
  6517                           wreg	equ	0xFE8
  6518                           postdec1	equ	0xFE5
  6519                           fsr1l	equ	0xFE1
  6520                           indf2	equ	0xFDF
  6521                           fsr2h	equ	0xFDA
  6522                           fsr2l	equ	0xFD9
  6523                           status	equ	0xFD8
  6524                           
  6525 ;; *************** function _Configurar_Dia *****************
  6526 ;; Defined at:
  6527 ;;		line 312 in file "../monografia_main.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;		None
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;  estado          2   86[COMRAM] int 
  6532 ;; Return value:  Size  Location     Type
  6533 ;;		None               void
  6534 ;; Registers used:
  6535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6545 ;;Total ram usage:        2 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    5
  6548 ;; This function calls:
  6549 ;;		_Conseguir_Dia
  6550 ;;		_Lcd_Cmd
  6551 ;;		_Lcd_Out
  6552 ;;		_Write_RTC
  6553 ;; This function is called by:
  6554 ;;		_Configurar_Pantalla
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           	psect	text21
  6559  00D08C                     __ptext21:
  6560                           	opt stack 0
  6561  00D08C                     _Configurar_Dia:
  6562                           	opt stack 24
  6563                           
  6564                           ;monografia_main.c: 314: diasem=0;
  6565                           
  6566                           ;incstack = 0
  6567  00D08C  0E00               	movlw	0
  6568  00D08E  0100               	movlb	0	; () banked
  6569  00D090  6FDE               	movwf	(_diasem+1)& (0+255),b
  6570  00D092  0E00               	movlw	0
  6571  00D094  6FDD               	movwf	_diasem& (0+255),b
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;monografia_main.c: 315: Conseguir_Dia();
  6575  00D096  EC93  F064         	call	_Conseguir_Dia	;wreg free
  6576                           
  6577                           ;monografia_main.c: 316: int estado = 1;
  6578  00D09A  0E00               	movlw	0
  6579  00D09C  6E58               	movwf	Configurar_Dia@estado+1,c
  6580  00D09E  0E01               	movlw	1
  6581  00D0A0  6E57               	movwf	Configurar_Dia@estado,c
  6582                           
  6583                           ;monografia_main.c: 317: Lcd_Out(2,0,"");
  6584  00D0A2  0E00               	movlw	0
  6585  00D0A4  6E04               	movwf	Lcd_Out@x,c
  6586  00D0A6  0EA0               	movlw	low (STR_38+9)
  6587  00D0A8  6E05               	movwf	Lcd_Out@buffer,c
  6588  00D0AA  0EFF               	movlw	high (STR_38+9)
  6589  00D0AC  6E06               	movwf	Lcd_Out@buffer+1,c
  6590  00D0AE  0E02               	movlw	2
  6591  00D0B0  ECCB  F061         	call	_Lcd_Out
  6592                           
  6593                           ;monografia_main.c: 318: Lcd_Cmd(15);
  6594  00D0B4  0E0F               	movlw	15
  6595  00D0B6  EC92  F066         	call	_Lcd_Cmd
  6596                           
  6597                           ;monografia_main.c: 319: while(estado > 0){
  6598  00D0BA  D077               	goto	l4938
  6599  00D0BC                     l253:
  6600                           
  6601                           ;monografia_main.c: 321: if(PORTAbits.RA1 == 0){
  6602  00D0BC  B280               	btfsc	3968,1,c	;volatile
  6603  00D0BE  D023               	goto	l254
  6604                           
  6605                           ;monografia_main.c: 322: if(diasem > 0){
  6606  00D0C0  0100               	movlb	0	; () banked
  6607  00D0C2  BFDE               	btfsc	(_diasem+1)& (0+255),7,b
  6608  00D0C4  D00E               	goto	l4912
  6609  00D0C6  0100               	movlb	0	; () banked
  6610  00D0C8  51DE               	movf	(_diasem+1)& (0+255),w,b
  6611  00D0CA  E104               	bnz	u5410
  6612  00D0CC  0100               	movlb	0	; () banked
  6613  00D0CE  05DD               	decf	_diasem& (0+255),w,b
  6614  00D0D0  A0D8               	btfss	status,0,c
  6615  00D0D2  D007               	goto	l4912
  6616  00D0D4                     u5410:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;monografia_main.c: 323: diasem --;
  6620  00D0D4  0100               	movlb	0	; () banked
  6621  00D0D6  07DD               	decf	_diasem& (0+255),f,b
  6622  00D0D8  A0D8               	btfss	status,0,c
  6623  00D0DA  07DE               	decf	(_diasem+1)& (0+255),f,b
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;monografia_main.c: 324: Conseguir_Dia();
  6627  00D0DC  EC93  F064         	call	_Conseguir_Dia	;wreg free
  6628                           
  6629                           ;monografia_main.c: 325: }else{
  6630  00D0E0  D003               	goto	l4914
  6631  00D0E2                     l4912:
  6632                           
  6633                           ;monografia_main.c: 326: Conseguir_Dia();
  6634  00D0E2  EC93  F064         	call	_Conseguir_Dia	;wreg free
  6635  00D0E6  D000               	goto	l4914
  6636  00D0E8                     l4914:
  6637                           
  6638                           ;monografia_main.c: 327: }
  6639                           ;monografia_main.c: 328: Lcd_Out(2,0,"");
  6640  00D0E8  0E00               	movlw	0
  6641  00D0EA  6E04               	movwf	Lcd_Out@x,c
  6642  00D0EC  0EA0               	movlw	low (STR_38+9)
  6643  00D0EE  6E05               	movwf	Lcd_Out@buffer,c
  6644  00D0F0  0EFF               	movlw	high (STR_38+9)
  6645  00D0F2  6E06               	movwf	Lcd_Out@buffer+1,c
  6646  00D0F4  0E02               	movlw	2
  6647  00D0F6  ECCB  F061         	call	_Lcd_Out
  6648                           
  6649                           ;monografia_main.c: 329: Lcd_Cmd(15);
  6650  00D0FA  0E0F               	movlw	15
  6651  00D0FC  EC92  F066         	call	_Lcd_Cmd
  6652                           
  6653                           ;monografia_main.c: 330: while(PORTAbits.RA1 == 0);
  6654  00D100  D000               	goto	l257
  6655  00D102                     l257:
  6656  00D102  A280               	btfss	3968,1,c	;volatile
  6657  00D104  D7FE               	goto	l257
  6658  00D106                     l254:
  6659                           
  6660                           ;monografia_main.c: 331: }
  6661                           ;monografia_main.c: 332: if(PORTAbits.RA5 == 0){
  6662  00D106  BA80               	btfsc	3968,5,c	;volatile
  6663  00D108  D020               	goto	l260
  6664                           
  6665                           ;monografia_main.c: 333: if(diasem < 7){
  6666  00D10A  0100               	movlb	0	; () banked
  6667  00D10C  BFDE               	btfsc	(_diasem+1)& (0+255),7,b
  6668  00D10E  D008               	goto	l4920
  6669  00D110  0100               	movlb	0	; () banked
  6670  00D112  51DE               	movf	(_diasem+1)& (0+255),w,b
  6671  00D114  E10B               	bnz	l4924
  6672  00D116  0E07               	movlw	7
  6673  00D118  0100               	movlb	0	; () banked
  6674  00D11A  5DDD               	subwf	_diasem& (0+255),w,b
  6675  00D11C  B0D8               	btfsc	status,0,c
  6676  00D11E  D006               	goto	l4924
  6677  00D120                     l4920:
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;monografia_main.c: 334: diasem++;
  6681  00D120  0100               	movlb	0	; () banked
  6682  00D122  4BDD               	infsnz	_diasem& (0+255),f,b
  6683  00D124  2BDE               	incf	(_diasem+1)& (0+255),f,b
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;monografia_main.c: 335: Conseguir_Dia();
  6687  00D126  EC93  F064         	call	_Conseguir_Dia	;wreg free
  6688  00D12A  D000               	goto	l4924
  6689  00D12C                     l4924:
  6690                           
  6691                           ;monografia_main.c: 336: }
  6692                           ;monografia_main.c: 337: Lcd_Out(2,0,"");
  6693  00D12C  0E00               	movlw	0
  6694  00D12E  6E04               	movwf	Lcd_Out@x,c
  6695  00D130  0EA0               	movlw	low (STR_38+9)
  6696  00D132  6E05               	movwf	Lcd_Out@buffer,c
  6697  00D134  0EFF               	movlw	high (STR_38+9)
  6698  00D136  6E06               	movwf	Lcd_Out@buffer+1,c
  6699  00D138  0E02               	movlw	2
  6700  00D13A  ECCB  F061         	call	_Lcd_Out
  6701                           
  6702                           ;monografia_main.c: 338: Lcd_Cmd(15);
  6703  00D13E  0E0F               	movlw	15
  6704  00D140  EC92  F066         	call	_Lcd_Cmd
  6705                           
  6706                           ;monografia_main.c: 339: while(PORTAbits.RA5 == 0);
  6707  00D144  D000               	goto	l262
  6708  00D146                     l262:
  6709  00D146  AA80               	btfss	3968,5,c	;volatile
  6710  00D148  D7FE               	goto	l262
  6711  00D14A                     l260:
  6712                           
  6713                           ;monografia_main.c: 340: }
  6714                           ;monografia_main.c: 341: if(PORTAbits.RA0 == 0){
  6715  00D14A  B080               	btfsc	3968,0,c	;volatile
  6716  00D14C  D018               	goto	l265
  6717                           
  6718                           ;monografia_main.c: 342: config=2;
  6719  00D14E  0E00               	movlw	0
  6720  00D150  0100               	movlb	0	; () banked
  6721  00D152  6FAF               	movwf	(_config+1)& (0+255),b
  6722  00D154  0E02               	movlw	2
  6723  00D156  6FAE               	movwf	_config& (0+255),b
  6724                           
  6725                           ;monografia_main.c: 343: estado=0;
  6726  00D158  0E00               	movlw	0
  6727  00D15A  6E58               	movwf	Configurar_Dia@estado+1,c
  6728  00D15C  0E00               	movlw	0
  6729  00D15E  6E57               	movwf	Configurar_Dia@estado,c
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;monografia_main.c: 344: Lcd_Out(2,11,"");
  6733  00D160  0E0B               	movlw	11
  6734  00D162  6E04               	movwf	Lcd_Out@x,c
  6735  00D164  0EA0               	movlw	low (STR_38+9)
  6736  00D166  6E05               	movwf	Lcd_Out@buffer,c
  6737  00D168  0EFF               	movlw	high (STR_38+9)
  6738  00D16A  6E06               	movwf	Lcd_Out@buffer+1,c
  6739  00D16C  0E02               	movlw	2
  6740  00D16E  ECCB  F061         	call	_Lcd_Out
  6741                           
  6742                           ;monografia_main.c: 345: Lcd_Cmd( 16);
  6743  00D172  0E10               	movlw	16
  6744  00D174  EC92  F066         	call	_Lcd_Cmd
  6745                           
  6746                           ;monografia_main.c: 346: while(PORTAbits.RA0 == 0);
  6747  00D178  D000               	goto	l266
  6748  00D17A                     l266:
  6749  00D17A  A080               	btfss	3968,0,c	;volatile
  6750  00D17C  D7FE               	goto	l266
  6751  00D17E                     l265:
  6752                           
  6753                           ;monografia_main.c: 347: }
  6754                           ;monografia_main.c: 348: if(PORTAbits.RA2 == 0 && config == 1){
  6755  00D17E  B480               	btfsc	3968,2,c	;volatile
  6756  00D180  D014               	goto	l4938
  6757  00D182  0100               	movlb	0	; () banked
  6758  00D184  05AE               	decf	_config& (0+255),w,b
  6759  00D186  0100               	movlb	0	; () banked
  6760  00D188  11AF               	iorwf	(_config+1)& (0+255),w,b
  6761  00D18A  A4D8               	btfss	status,2,c
  6762  00D18C  D00E               	goto	l4938
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;monografia_main.c: 349: config=3;
  6766  00D18E  0E00               	movlw	0
  6767  00D190  0100               	movlb	0	; () banked
  6768  00D192  6FAF               	movwf	(_config+1)& (0+255),b
  6769  00D194  0E03               	movlw	3
  6770  00D196  6FAE               	movwf	_config& (0+255),b
  6771                           
  6772                           ;monografia_main.c: 350: estado=0;
  6773  00D198  0E00               	movlw	0
  6774  00D19A  6E58               	movwf	Configurar_Dia@estado+1,c
  6775  00D19C  0E00               	movlw	0
  6776  00D19E  6E57               	movwf	Configurar_Dia@estado,c
  6777                           
  6778                           ;monografia_main.c: 351: while(PORTAbits.RA2 == 0);
  6779  00D1A0  D000               	goto	l270
  6780  00D1A2                     l270:
  6781  00D1A2  B480               	btfsc	3968,2,c	;volatile
  6782  00D1A4  D002               	goto	l4938
  6783  00D1A6  D7FD               	goto	l270
  6784  00D1A8  D000               	goto	l4938
  6785  00D1AA                     l4938:
  6786  00D1AA  BE58               	btfsc	Configurar_Dia@estado+1,7,c
  6787  00D1AC  D005               	goto	l4940
  6788  00D1AE  5058               	movf	Configurar_Dia@estado+1,w,c
  6789  00D1B0  E185               	bnz	l253
  6790  00D1B2  0457               	decf	Configurar_Dia@estado,w,c
  6791  00D1B4  B0D8               	btfsc	status,0,c
  6792  00D1B6  D782               	goto	l253
  6793  00D1B8                     l4940:
  6794                           
  6795                           ;monografia_main.c: 352: }
  6796                           ;monografia_main.c: 353: }
  6797                           ;monografia_main.c: 354: Write_RTC();
  6798  00D1B8  EC78  F06D         	call	_Write_RTC	;wreg free
  6799  00D1BC  0012               	return		;funcret
  6800  00D1BE                     __end_of_Configurar_Dia:
  6801                           	opt stack 0
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           postinc0	equ	0xFEE
  6809                           wreg	equ	0xFE8
  6810                           postdec1	equ	0xFE5
  6811                           fsr1l	equ	0xFE1
  6812                           indf2	equ	0xFDF
  6813                           fsr2h	equ	0xFDA
  6814                           fsr2l	equ	0xFD9
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _Write_RTC *****************
  6818 ;; Defined at:
  6819 ;;		line 789 in file "../monografia_main.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;		None
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;		None
  6824 ;; Return value:  Size  Location     Type
  6825 ;;		None               void
  6826 ;; Registers used:
  6827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6837 ;;Total ram usage:        0 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    2
  6840 ;; This function calls:
  6841 ;;		_RtccWrOn
  6842 ;;		_RtccWriteDate
  6843 ;;		_RtccWriteTime
  6844 ;;		___awdiv
  6845 ;; This function is called by:
  6846 ;;		_main
  6847 ;;		_Configurar_Dia
  6848 ;;		_Configurar_Fecha
  6849 ;;		_Configurar_Hora
  6850 ;;		_Configurar_Hora_Grl
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text22
  6855  00DAF0                     __ptext22:
  6856                           	opt stack 0
  6857  00DAF0                     _Write_RTC:
  6858                           	opt stack 28
  6859                           
  6860                           ;monografia_main.c: 791: RtccWrOn();
  6861                           
  6862                           ;incstack = 0
  6863  00DAF0  EC3C  F05F         	call	_RtccWrOn	;wreg free
  6864                           
  6865                           ;monografia_main.c: 793: PIE3bits.RTCCIE=1;
  6866  00DAF4  80A3               	bsf	4003,0,c	;volatile
  6867                           
  6868                           ;monografia_main.c: 794: segundo_d=segundo/10;
  6869  00DAF6  C0B6  F007         	movff	_segundo,___awdiv@dividend
  6870  00DAFA  C0B7  F008         	movff	_segundo+1,___awdiv@dividend+1
  6871  00DAFE  0E00               	movlw	0
  6872  00DB00  6E0A               	movwf	___awdiv@divisor+1,c
  6873  00DB02  0E0A               	movlw	10
  6874  00DB04  6E09               	movwf	___awdiv@divisor,c
  6875  00DB06  EC60  F062         	call	___awdiv	;wreg free
  6876  00DB0A  5007               	movf	?___awdiv,w,c
  6877  00DB0C  0100               	movlb	0	; () banked
  6878  00DB0E  6FF8               	movwf	_segundo_d& (0+255),b
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;monografia_main.c: 795: segundo_u=segundo-segundo_d*10;
  6882  00DB10  0100               	movlb	0	; () banked
  6883  00DB12  51F8               	movf	_segundo_d& (0+255),w,b
  6884  00DB14  0D0A               	mullw	10
  6885  00DB16  50F3               	movf	prodl,w,c
  6886  00DB18  0800               	sublw	0
  6887  00DB1A  0100               	movlb	0	; () banked
  6888  00DB1C  25B6               	addwf	_segundo& (0+255),w,b
  6889  00DB1E  0100               	movlb	0	; () banked
  6890  00DB20  6FF9               	movwf	_segundo_u& (0+255),b
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;monografia_main.c: 796: RtccTime.f.sec =segundo_d*16+segundo_u;
  6894  00DB22  0100               	movlb	0	; () banked
  6895  00DB24  51F8               	movf	_segundo_d& (0+255),w,b
  6896  00DB26  0D10               	mullw	16
  6897  00DB28  50F3               	movf	prodl,w,c
  6898  00DB2A  0100               	movlb	0	; () banked
  6899  00DB2C  25F9               	addwf	_segundo_u& (0+255),w,b
  6900  00DB2E  0100               	movlb	0	; () banked
  6901  00DB30  6FD2               	movwf	(_RtccTime+1)& (0+255),b
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;monografia_main.c: 797: minuto_d=minuto/10;
  6905  00DB32  C0E7  F007         	movff	_minuto,___awdiv@dividend
  6906  00DB36  C0E8  F008         	movff	_minuto+1,___awdiv@dividend+1
  6907  00DB3A  0E00               	movlw	0
  6908  00DB3C  6E0A               	movwf	___awdiv@divisor+1,c
  6909  00DB3E  0E0A               	movlw	10
  6910  00DB40  6E09               	movwf	___awdiv@divisor,c
  6911  00DB42  EC60  F062         	call	___awdiv	;wreg free
  6912  00DB46  5007               	movf	?___awdiv,w,c
  6913  00DB48  0100               	movlb	0	; () banked
  6914  00DB4A  6FF6               	movwf	_minuto_d& (0+255),b
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;monografia_main.c: 798: minuto_u=minuto-minuto_d*10;
  6918  00DB4C  0100               	movlb	0	; () banked
  6919  00DB4E  51F6               	movf	_minuto_d& (0+255),w,b
  6920  00DB50  0D0A               	mullw	10
  6921  00DB52  50F3               	movf	prodl,w,c
  6922  00DB54  0800               	sublw	0
  6923  00DB56  0100               	movlb	0	; () banked
  6924  00DB58  25E7               	addwf	_minuto& (0+255),w,b
  6925  00DB5A  0100               	movlb	0	; () banked
  6926  00DB5C  6FF7               	movwf	_minuto_u& (0+255),b
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;monografia_main.c: 799: RtccTime.f.min =minuto_d*16+minuto_u;
  6930  00DB5E  0100               	movlb	0	; () banked
  6931  00DB60  51F6               	movf	_minuto_d& (0+255),w,b
  6932  00DB62  0D10               	mullw	16
  6933  00DB64  50F3               	movf	prodl,w,c
  6934  00DB66  0100               	movlb	0	; () banked
  6935  00DB68  25F7               	addwf	_minuto_u& (0+255),w,b
  6936  00DB6A  0100               	movlb	0	; () banked
  6937  00DB6C  6FD3               	movwf	(_RtccTime+2)& (0+255),b
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;monografia_main.c: 800: hora_d=hora/10;
  6941  00DB6E  C0DF  F007         	movff	_hora,___awdiv@dividend
  6942  00DB72  C0E0  F008         	movff	_hora+1,___awdiv@dividend+1
  6943  00DB76  0E00               	movlw	0
  6944  00DB78  6E0A               	movwf	___awdiv@divisor+1,c
  6945  00DB7A  0E0A               	movlw	10
  6946  00DB7C  6E09               	movwf	___awdiv@divisor,c
  6947  00DB7E  EC60  F062         	call	___awdiv	;wreg free
  6948  00DB82  5007               	movf	?___awdiv,w,c
  6949  00DB84  0100               	movlb	0	; () banked
  6950  00DB86  6FF2               	movwf	_hora_d& (0+255),b
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;monografia_main.c: 801: hora_u=hora-hora_d*10;
  6954  00DB88  0100               	movlb	0	; () banked
  6955  00DB8A  51F2               	movf	_hora_d& (0+255),w,b
  6956  00DB8C  0D0A               	mullw	10
  6957  00DB8E  50F3               	movf	prodl,w,c
  6958  00DB90  0800               	sublw	0
  6959  00DB92  0100               	movlb	0	; () banked
  6960  00DB94  25DF               	addwf	_hora& (0+255),w,b
  6961  00DB96  0100               	movlb	0	; () banked
  6962  00DB98  6FF3               	movwf	_hora_u& (0+255),b
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;monografia_main.c: 802: RtccTime.f.hour=hora_d*16+hora_u;
  6966  00DB9A  0100               	movlb	0	; () banked
  6967  00DB9C  51F2               	movf	_hora_d& (0+255),w,b
  6968  00DB9E  0D10               	mullw	16
  6969  00DBA0  50F3               	movf	prodl,w,c
  6970  00DBA2  0100               	movlb	0	; () banked
  6971  00DBA4  25F3               	addwf	_hora_u& (0+255),w,b
  6972  00DBA6  0100               	movlb	0	; () banked
  6973  00DBA8  6FD4               	movwf	(_RtccTime+3)& (0+255),b
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;monografia_main.c: 803: anio_d=anio/10;
  6977  00DBAA  C0D9  F007         	movff	_anio,___awdiv@dividend
  6978  00DBAE  C0DA  F008         	movff	_anio+1,___awdiv@dividend+1
  6979  00DBB2  0E00               	movlw	0
  6980  00DBB4  6E0A               	movwf	___awdiv@divisor+1,c
  6981  00DBB6  0E0A               	movlw	10
  6982  00DBB8  6E09               	movwf	___awdiv@divisor,c
  6983  00DBBA  EC60  F062         	call	___awdiv	;wreg free
  6984  00DBBE  5007               	movf	?___awdiv,w,c
  6985  00DBC0  0100               	movlb	0	; () banked
  6986  00DBC2  6FED               	movwf	_anio_d& (0+255),b
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;monografia_main.c: 804: anio_u=anio-anio_d*10;
  6990  00DBC4  0100               	movlb	0	; () banked
  6991  00DBC6  51ED               	movf	_anio_d& (0+255),w,b
  6992  00DBC8  0D0A               	mullw	10
  6993  00DBCA  50F3               	movf	prodl,w,c
  6994  00DBCC  0800               	sublw	0
  6995  00DBCE  0100               	movlb	0	; () banked
  6996  00DBD0  25D9               	addwf	_anio& (0+255),w,b
  6997  00DBD2  0100               	movlb	0	; () banked
  6998  00DBD4  6FEE               	movwf	_anio_u& (0+255),b
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;monografia_main.c: 805: RtccDate.f.year=anio_d*16+anio_u;
  7002  00DBD6  0100               	movlb	0	; () banked
  7003  00DBD8  51ED               	movf	_anio_d& (0+255),w,b
  7004  00DBDA  0D10               	mullw	16
  7005  00DBDC  50F3               	movf	prodl,w,c
  7006  00DBDE  0100               	movlb	0	; () banked
  7007  00DBE0  25EE               	addwf	_anio_u& (0+255),w,b
  7008  00DBE2  0100               	movlb	0	; () banked
  7009  00DBE4  6FD0               	movwf	(_RtccDate+3)& (0+255),b
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;monografia_main.c: 806: mes_d=mes/10;
  7013  00DBE6  C0E5  F007         	movff	_mes,___awdiv@dividend
  7014  00DBEA  C0E6  F008         	movff	_mes+1,___awdiv@dividend+1
  7015  00DBEE  0E00               	movlw	0
  7016  00DBF0  6E0A               	movwf	___awdiv@divisor+1,c
  7017  00DBF2  0E0A               	movlw	10
  7018  00DBF4  6E09               	movwf	___awdiv@divisor,c
  7019  00DBF6  EC60  F062         	call	___awdiv	;wreg free
  7020  00DBFA  5007               	movf	?___awdiv,w,c
  7021  00DBFC  0100               	movlb	0	; () banked
  7022  00DBFE  6FF4               	movwf	_mes_d& (0+255),b
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;monografia_main.c: 807: mes_u=mes-mes_d*10;
  7026  00DC00  0100               	movlb	0	; () banked
  7027  00DC02  51F4               	movf	_mes_d& (0+255),w,b
  7028  00DC04  0D0A               	mullw	10
  7029  00DC06  50F3               	movf	prodl,w,c
  7030  00DC08  0800               	sublw	0
  7031  00DC0A  0100               	movlb	0	; () banked
  7032  00DC0C  25E5               	addwf	_mes& (0+255),w,b
  7033  00DC0E  0100               	movlb	0	; () banked
  7034  00DC10  6FF5               	movwf	_mes_u& (0+255),b
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;monografia_main.c: 808: RtccDate.f.mon=mes_d*16+mes_u;
  7038  00DC12  0100               	movlb	0	; () banked
  7039  00DC14  51F4               	movf	_mes_d& (0+255),w,b
  7040  00DC16  0D10               	mullw	16
  7041  00DC18  50F3               	movf	prodl,w,c
  7042  00DC1A  0100               	movlb	0	; () banked
  7043  00DC1C  25F5               	addwf	_mes_u& (0+255),w,b
  7044  00DC1E  0100               	movlb	0	; () banked
  7045  00DC20  6FCF               	movwf	(_RtccDate+2)& (0+255),b
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;monografia_main.c: 809: fecha_d=dia/10;
  7049  00DC22  C0DB  F007         	movff	_dia,___awdiv@dividend
  7050  00DC26  C0DC  F008         	movff	_dia+1,___awdiv@dividend+1
  7051  00DC2A  0E00               	movlw	0
  7052  00DC2C  6E0A               	movwf	___awdiv@divisor+1,c
  7053  00DC2E  0E0A               	movlw	10
  7054  00DC30  6E09               	movwf	___awdiv@divisor,c
  7055  00DC32  EC60  F062         	call	___awdiv	;wreg free
  7056  00DC36  5007               	movf	?___awdiv,w,c
  7057  00DC38  0100               	movlb	0	; () banked
  7058  00DC3A  6FF0               	movwf	_fecha_d& (0+255),b
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;monografia_main.c: 810: fecha_u=dia-fecha_d*10;
  7062  00DC3C  0100               	movlb	0	; () banked
  7063  00DC3E  51F0               	movf	_fecha_d& (0+255),w,b
  7064  00DC40  0D0A               	mullw	10
  7065  00DC42  50F3               	movf	prodl,w,c
  7066  00DC44  0800               	sublw	0
  7067  00DC46  0100               	movlb	0	; () banked
  7068  00DC48  25DB               	addwf	_dia& (0+255),w,b
  7069  00DC4A  0100               	movlb	0	; () banked
  7070  00DC4C  6FF1               	movwf	_fecha_u& (0+255),b
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;monografia_main.c: 811: RtccDate.f.mday=fecha_d*16+fecha_u;
  7074  00DC4E  0100               	movlb	0	; () banked
  7075  00DC50  51F0               	movf	_fecha_d& (0+255),w,b
  7076  00DC52  0D10               	mullw	16
  7077  00DC54  50F3               	movf	prodl,w,c
  7078  00DC56  0100               	movlb	0	; () banked
  7079  00DC58  25F1               	addwf	_fecha_u& (0+255),w,b
  7080  00DC5A  0100               	movlb	0	; () banked
  7081  00DC5C  6FCE               	movwf	(_RtccDate+1)& (0+255),b
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;monografia_main.c: 812: dia_semana=diasem;
  7085  00DC5E  C0DD  F0EF         	movff	_diasem,_dia_semana
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;monografia_main.c: 813: RtccDate.f.wday =diasem;
  7089  00DC62  C0DD  F0CD         	movff	_diasem,_RtccDate
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;monografia_main.c: 815: RtccWriteTime(&RtccTime,1);
  7093  00DC66  0ED1               	movlw	low _RtccTime
  7094  00DC68  6E01               	movwf	RtccWriteTime@pTm,c
  7095  00DC6A  0E00               	movlw	high _RtccTime
  7096  00DC6C  6E02               	movwf	RtccWriteTime@pTm+1,c
  7097  00DC6E  0E01               	movlw	1
  7098  00DC70  6E03               	movwf	RtccWriteTime@di,c
  7099  00DC72  EC0C  F066         	call	_RtccWriteTime	;wreg free
  7100                           
  7101                           ;monografia_main.c: 816: RtccWriteDate(&RtccDate,1);
  7102  00DC76  0ECD               	movlw	low _RtccDate
  7103  00DC78  6E01               	movwf	RtccWriteDate@pDt,c
  7104  00DC7A  0E00               	movlw	high _RtccDate
  7105  00DC7C  6E02               	movwf	RtccWriteDate@pDt+1,c
  7106  00DC7E  0E01               	movlw	1
  7107  00DC80  6E03               	movwf	RtccWriteDate@di,c
  7108  00DC82  ECAF  F06A         	call	_RtccWriteDate	;wreg free
  7109                           
  7110                           ;monografia_main.c: 817: (RTCCFGbits.RTCEN=1);
  7111  00DC86  010F               	movlb	15	; () banked
  7112  00DC88  8F3F               	bsf	63,7,b	;volatile
  7113                           
  7114                           ; BSR set to: 15
  7115  00DC8A  0012               	return		;funcret
  7116  00DC8C                     __end_of_Write_RTC:
  7117                           	opt stack 0
  7118                           tblptru	equ	0xFF8
  7119                           tblptrh	equ	0xFF7
  7120                           tblptrl	equ	0xFF6
  7121                           tablat	equ	0xFF5
  7122                           prodh	equ	0xFF4
  7123                           prodl	equ	0xFF3
  7124                           postinc0	equ	0xFEE
  7125                           wreg	equ	0xFE8
  7126                           postdec1	equ	0xFE5
  7127                           fsr1l	equ	0xFE1
  7128                           indf2	equ	0xFDF
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _RtccWriteTime *****************
  7134 ;; Defined at:
  7135 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  pTm             2    0[COMRAM] PTR const struct .
  7138 ;;		 -> RtccTime(4), 
  7139 ;;  di              1    2[COMRAM] enum E7121
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;  tempHourWDay    2    9[COMRAM] struct .
  7142 ;;  tempMinSec      2    7[COMRAM] struct .
  7143 ;;  wasWrEn         1    6[COMRAM] enum E7121
  7144 ;;  wasAlrm         1    5[COMRAM] enum E7121
  7145 ;;  wasOn           1    4[COMRAM] enum E7121
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  1    wreg      enum E7337
  7148 ;; Registers used:
  7149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7155 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7156 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7158 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7159 ;;Total ram usage:       11 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    1
  7162 ;; This function calls:
  7163 ;;		_RtccWrOn
  7164 ;; This function is called by:
  7165 ;;		_Write_RTC
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text23
  7170  00CC18                     __ptext23:
  7171                           	opt stack 0
  7172  00CC18                     _RtccWriteTime:
  7173                           	opt stack 28
  7174                           
  7175                           ; BSR set to: 15
  7176                           ;incstack = 0
  7177  00CC18  0E00               	movlw	0
  7178  00CC1A  6E06               	movwf	RtccWriteTime@wasAlrm,c
  7179  00CC1C  EE20 F002          	lfsr	2,2
  7180  00CC20  5001               	movf	RtccWriteTime@pTm,w,c
  7181  00CC22  26D9               	addwf	fsr2l,f,c
  7182  00CC24  5002               	movf	RtccWriteTime@pTm+1,w,c
  7183  00CC26  22DA               	addwfc	fsr2h,f,c
  7184  00CC28  0E5A               	movlw	90
  7185  00CC2A  60DF               	cpfslt	indf2,c
  7186  00CC2C  0012               	return	
  7187  00CC2E  EE20 F001          	lfsr	2,1
  7188  00CC32  5001               	movf	RtccWriteTime@pTm,w,c
  7189  00CC34  26D9               	addwf	fsr2l,f,c
  7190  00CC36  5002               	movf	RtccWriteTime@pTm+1,w,c
  7191  00CC38  22DA               	addwfc	fsr2h,f,c
  7192  00CC3A  0E5A               	movlw	90
  7193  00CC3C  60DF               	cpfslt	indf2,c
  7194  00CC3E  0012               	return	
  7195  00CC40  EE20 F003          	lfsr	2,3
  7196  00CC44  5001               	movf	RtccWriteTime@pTm,w,c
  7197  00CC46  26D9               	addwf	fsr2l,f,c
  7198  00CC48  5002               	movf	RtccWriteTime@pTm+1,w,c
  7199  00CC4A  22DA               	addwfc	fsr2h,f,c
  7200  00CC4C  0E24               	movlw	36
  7201  00CC4E  64DF               	cpfsgt	indf2,c
  7202  00CC50  D002               	goto	l4446
  7203  00CC52  0012               	return	
  7204                           
  7205                           ;	Return value of _RtccWriteTime is never used
  7206  00CC54  0012               	return	
  7207  00CC56                     l4446:
  7208  00CC56  EE20 F002          	lfsr	2,2
  7209  00CC5A  5001               	movf	RtccWriteTime@pTm,w,c
  7210  00CC5C  26D9               	addwf	fsr2l,f,c
  7211  00CC5E  5002               	movf	RtccWriteTime@pTm+1,w,c
  7212  00CC60  22DA               	addwfc	fsr2h,f,c
  7213  00CC62  50DF               	movf	indf2,w,c
  7214  00CC64  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  7215  00CC66  EE20 F001          	lfsr	2,1
  7216  00CC6A  5001               	movf	RtccWriteTime@pTm,w,c
  7217  00CC6C  26D9               	addwf	fsr2l,f,c
  7218  00CC6E  5002               	movf	RtccWriteTime@pTm+1,w,c
  7219  00CC70  22DA               	addwfc	fsr2h,f,c
  7220  00CC72  50DF               	movf	indf2,w,c
  7221  00CC74  6E08               	movwf	RtccWriteTime@tempMinSec,c
  7222  00CC76  5003               	movf	RtccWriteTime@di,w,c
  7223  00CC78  B4D8               	btfsc	status,2,c
  7224  00CC7A  D002               	goto	l4452
  7225  00CC7C  9CF2               	bcf	intcon,6,c	;volatile
  7226  00CC7E  D000               	goto	l4452
  7227  00CC80                     l4452:
  7228  00CC80  0E00               	movlw	0
  7229  00CC82  BB3F               	btfsc	63,5,b	;volatile
  7230  00CC84  0E01               	movlw	1
  7231  00CC86  6E07               	movwf	RtccWriteTime@wasWrEn,c
  7232  00CC88  5007               	movf	RtccWriteTime@wasWrEn,w,c
  7233  00CC8A  A4D8               	btfss	status,2,c
  7234  00CC8C  D003               	goto	l4456
  7235  00CC8E  EC3C  F05F         	call	_RtccWrOn	;wreg free
  7236  00CC92  D000               	goto	l4456
  7237  00CC94                     l4456:
  7238  00CC94  0E00               	movlw	0
  7239  00CC96  BF3F               	btfsc	63,7,b	;volatile
  7240  00CC98  0E01               	movlw	1
  7241  00CC9A  6E05               	movwf	RtccWriteTime@wasOn,c
  7242  00CC9C  5005               	movf	RtccWriteTime@wasOn,w,c
  7243  00CC9E  B4D8               	btfsc	status,2,c
  7244  00CCA0  D007               	goto	l4462
  7245  00CCA2  0E00               	movlw	0
  7246  00CCA4  BE91               	btfsc	3985,7,c	;volatile
  7247  00CCA6  0E01               	movlw	1
  7248  00CCA8  6E06               	movwf	RtccWriteTime@wasAlrm,c
  7249  00CCAA  010F               	movlb	15	; () banked
  7250  00CCAC  9F3F               	bcf	63,7,b	;volatile
  7251  00CCAE  D000               	goto	l4462
  7252  00CCB0                     l4462:
  7253  00CCB0  0EFC               	movlw	252
  7254  00CCB2  010F               	movlb	15	; () banked
  7255  00CCB4  173F               	andwf	63,f,b	;volatile
  7256  00CCB6  010F               	movlb	15	; () banked
  7257  00CCB8  813F               	bsf	63,0,b	;volatile
  7258                           
  7259                           ; BSR set to: 15
  7260  00CCBA  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  7261                           
  7262                           ; BSR set to: 15
  7263  00CCBE  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  7264                           
  7265                           ; BSR set to: 15
  7266  00CCC2  EE20 F003          	lfsr	2,3
  7267  00CCC6  5001               	movf	RtccWriteTime@pTm,w,c
  7268  00CCC8  26D9               	addwf	fsr2l,f,c
  7269  00CCCA  5002               	movf	RtccWriteTime@pTm+1,w,c
  7270  00CCCC  22DA               	addwfc	fsr2h,f,c
  7271  00CCCE  50DF               	movf	indf2,w,c
  7272  00CCD0  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  7273                           
  7274                           ; BSR set to: 15
  7275  00CCD2  0EFC               	movlw	252
  7276  00CCD4  010F               	movlb	15	; () banked
  7277  00CCD6  173F               	andwf	63,f,b	;volatile
  7278                           
  7279                           ; BSR set to: 15
  7280  00CCD8  010F               	movlb	15	; () banked
  7281  00CCDA  813F               	bsf	63,0,b	;volatile
  7282                           
  7283                           ; BSR set to: 15
  7284  00CCDC  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  7285                           
  7286                           ; BSR set to: 15
  7287  00CCE0  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  7288                           
  7289                           ; BSR set to: 15
  7290  00CCE4  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  7291                           
  7292                           ; BSR set to: 15
  7293  00CCE8  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  7294                           
  7295                           ; BSR set to: 15
  7296  00CCEC  5005               	movf	RtccWriteTime@wasOn,w,c
  7297  00CCEE  B4D8               	btfsc	status,2,c
  7298  00CCF0  D00D               	goto	l4494
  7299                           
  7300                           ; BSR set to: 15
  7301  00CCF2  010F               	movlb	15	; () banked
  7302  00CCF4  8F3F               	bsf	63,7,b	;volatile
  7303                           
  7304                           ; BSR set to: 15
  7305  00CCF6  5006               	movf	RtccWriteTime@wasAlrm,w,c
  7306  00CCF8  B4D8               	btfsc	status,2,c
  7307  00CCFA  D002               	goto	l4490
  7308                           
  7309                           ; BSR set to: 15
  7310  00CCFC  8E91               	bsf	3985,7,c	;volatile
  7311  00CCFE  D000               	goto	l4490
  7312  00CD00                     l4490:
  7313                           
  7314                           ; BSR set to: 15
  7315  00CD00  5007               	movf	RtccWriteTime@wasWrEn,w,c
  7316  00CD02  B4D8               	btfsc	status,2,c
  7317  00CD04  D009               	goto	l4498
  7318                           
  7319                           ; BSR set to: 15
  7320  00CD06  EC3C  F05F         	call	_RtccWrOn	;wreg free
  7321  00CD0A  D006               	goto	l4498
  7322  00CD0C                     l4494:
  7323  00CD0C  5007               	movf	RtccWriteTime@wasWrEn,w,c
  7324  00CD0E  A4D8               	btfss	status,2,c
  7325  00CD10  D003               	goto	l4498
  7326  00CD12  010F               	movlb	15	; () banked
  7327  00CD14  9B3F               	bcf	63,5,b	;volatile
  7328                           
  7329                           ; BSR set to: 15
  7330  00CD16  D000               	goto	l4498
  7331  00CD18                     l4498:
  7332  00CD18  5003               	movf	RtccWriteTime@di,w,c
  7333  00CD1A  B4D8               	btfsc	status,2,c
  7334  00CD1C  0012               	return	
  7335  00CD1E  8CF2               	bsf	intcon,6,c	;volatile
  7336  00CD20  0012               	return	
  7337                           
  7338                           ;	Return value of _RtccWriteTime is never used
  7339  00CD22  0012               	return		;funcret
  7340  00CD24                     __end_of_RtccWriteTime:
  7341                           	opt stack 0
  7342                           tblptru	equ	0xFF8
  7343                           tblptrh	equ	0xFF7
  7344                           tblptrl	equ	0xFF6
  7345                           tablat	equ	0xFF5
  7346                           prodh	equ	0xFF4
  7347                           prodl	equ	0xFF3
  7348                           intcon	equ	0xFF2
  7349                           postinc0	equ	0xFEE
  7350                           wreg	equ	0xFE8
  7351                           postdec1	equ	0xFE5
  7352                           fsr1l	equ	0xFE1
  7353                           indf2	equ	0xFDF
  7354                           fsr2h	equ	0xFDA
  7355                           fsr2l	equ	0xFD9
  7356                           status	equ	0xFD8
  7357                           
  7358 ;; *************** function _RtccWriteDate *****************
  7359 ;; Defined at:
  7360 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  pDt             2    0[COMRAM] PTR const struct .
  7363 ;;		 -> RtccDate(4), 
  7364 ;;  di              1    2[COMRAM] enum E7121
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;  tempHourWDay    2   11[COMRAM] struct .
  7367 ;;  tempDayMonth    2    9[COMRAM] struct .
  7368 ;;  tempYear        2    6[COMRAM] struct .
  7369 ;;  wasWrEn         1    8[COMRAM] enum E7121
  7370 ;;  wasAlrm         1    5[COMRAM] enum E7121
  7371 ;;  wasOn           1    4[COMRAM] enum E7121
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  1    wreg      enum E7337
  7374 ;; Registers used:
  7375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7381 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7382 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7383 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7384 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7385 ;;Total ram usage:       13 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; Hardware stack levels required when called:    1
  7388 ;; This function calls:
  7389 ;;		_RtccWrOn
  7390 ;; This function is called by:
  7391 ;;		_Write_RTC
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           	psect	text24
  7396  00D55E                     __ptext24:
  7397                           	opt stack 0
  7398  00D55E                     _RtccWriteDate:
  7399                           	opt stack 28
  7400                           
  7401                           ;incstack = 0
  7402  00D55E  0E00               	movlw	0
  7403  00D560  6E06               	movwf	RtccWriteDate@wasAlrm,c
  7404  00D562  EE20 F002          	lfsr	2,2
  7405  00D566  5001               	movf	RtccWriteDate@pDt,w,c
  7406  00D568  26D9               	addwf	fsr2l,f,c
  7407  00D56A  5002               	movf	RtccWriteDate@pDt+1,w,c
  7408  00D56C  22DA               	addwfc	fsr2h,f,c
  7409  00D56E  0E13               	movlw	19
  7410  00D570  60DF               	cpfslt	indf2,c
  7411  00D572  0012               	return	
  7412  00D574  EE20 F002          	lfsr	2,2
  7413  00D578  5001               	movf	RtccWriteDate@pDt,w,c
  7414  00D57A  26D9               	addwf	fsr2l,f,c
  7415  00D57C  5002               	movf	RtccWriteDate@pDt+1,w,c
  7416  00D57E  22DA               	addwfc	fsr2h,f,c
  7417  00D580  50DF               	movf	indf2,w,c
  7418  00D582  B4D8               	btfsc	status,2,c
  7419  00D584  0012               	return	
  7420  00D586  EE20 F001          	lfsr	2,1
  7421  00D58A  5001               	movf	RtccWriteDate@pDt,w,c
  7422  00D58C  26D9               	addwf	fsr2l,f,c
  7423  00D58E  5002               	movf	RtccWriteDate@pDt+1,w,c
  7424  00D590  22DA               	addwfc	fsr2h,f,c
  7425  00D592  0E32               	movlw	50
  7426  00D594  60DF               	cpfslt	indf2,c
  7427  00D596  0012               	return	
  7428  00D598  EE20 F001          	lfsr	2,1
  7429  00D59C  5001               	movf	RtccWriteDate@pDt,w,c
  7430  00D59E  26D9               	addwf	fsr2l,f,c
  7431  00D5A0  5002               	movf	RtccWriteDate@pDt+1,w,c
  7432  00D5A2  22DA               	addwfc	fsr2h,f,c
  7433  00D5A4  50DF               	movf	indf2,w,c
  7434  00D5A6  B4D8               	btfsc	status,2,c
  7435  00D5A8  0012               	return	
  7436  00D5AA  EE20 F003          	lfsr	2,3
  7437  00D5AE  5001               	movf	RtccWriteDate@pDt,w,c
  7438  00D5B0  26D9               	addwf	fsr2l,f,c
  7439  00D5B2  5002               	movf	RtccWriteDate@pDt+1,w,c
  7440  00D5B4  22DA               	addwfc	fsr2h,f,c
  7441  00D5B6  0E99               	movlw	153
  7442  00D5B8  64DF               	cpfsgt	indf2,c
  7443  00D5BA  D002               	goto	l4514
  7444  00D5BC  0012               	return	
  7445                           
  7446                           ;	Return value of _RtccWriteDate is never used
  7447  00D5BE  0012               	return	
  7448  00D5C0                     l4514:
  7449  00D5C0  EE20 F003          	lfsr	2,3
  7450  00D5C4  5001               	movf	RtccWriteDate@pDt,w,c
  7451  00D5C6  26D9               	addwf	fsr2l,f,c
  7452  00D5C8  5002               	movf	RtccWriteDate@pDt+1,w,c
  7453  00D5CA  22DA               	addwfc	fsr2h,f,c
  7454  00D5CC  50DF               	movf	indf2,w,c
  7455  00D5CE  6E07               	movwf	RtccWriteDate@tempYear,c
  7456  00D5D0  EE20 F001          	lfsr	2,1
  7457  00D5D4  5001               	movf	RtccWriteDate@pDt,w,c
  7458  00D5D6  26D9               	addwf	fsr2l,f,c
  7459  00D5D8  5002               	movf	RtccWriteDate@pDt+1,w,c
  7460  00D5DA  22DA               	addwfc	fsr2h,f,c
  7461  00D5DC  50DF               	movf	indf2,w,c
  7462  00D5DE  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  7463  00D5E0  EE20 F002          	lfsr	2,2
  7464  00D5E4  5001               	movf	RtccWriteDate@pDt,w,c
  7465  00D5E6  26D9               	addwf	fsr2l,f,c
  7466  00D5E8  5002               	movf	RtccWriteDate@pDt+1,w,c
  7467  00D5EA  22DA               	addwfc	fsr2h,f,c
  7468  00D5EC  50DF               	movf	indf2,w,c
  7469  00D5EE  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  7470  00D5F0  5003               	movf	RtccWriteDate@di,w,c
  7471  00D5F2  B4D8               	btfsc	status,2,c
  7472  00D5F4  D002               	goto	l4520
  7473  00D5F6  9CF2               	bcf	intcon,6,c	;volatile
  7474  00D5F8  D000               	goto	l4520
  7475  00D5FA                     l4520:
  7476  00D5FA  0E00               	movlw	0
  7477  00D5FC  BB3F               	btfsc	63,5,b	;volatile
  7478  00D5FE  0E01               	movlw	1
  7479  00D600  6E09               	movwf	RtccWriteDate@wasWrEn,c
  7480  00D602  5009               	movf	RtccWriteDate@wasWrEn,w,c
  7481  00D604  A4D8               	btfss	status,2,c
  7482  00D606  D003               	goto	l4524
  7483  00D608  EC3C  F05F         	call	_RtccWrOn	;wreg free
  7484  00D60C  D000               	goto	l4524
  7485  00D60E                     l4524:
  7486  00D60E  0E00               	movlw	0
  7487  00D610  BF3F               	btfsc	63,7,b	;volatile
  7488  00D612  0E01               	movlw	1
  7489  00D614  6E05               	movwf	RtccWriteDate@wasOn,c
  7490  00D616  5005               	movf	RtccWriteDate@wasOn,w,c
  7491  00D618  B4D8               	btfsc	status,2,c
  7492  00D61A  D007               	goto	l4530
  7493  00D61C  0E00               	movlw	0
  7494  00D61E  BE91               	btfsc	3985,7,c	;volatile
  7495  00D620  0E01               	movlw	1
  7496  00D622  6E06               	movwf	RtccWriteDate@wasAlrm,c
  7497  00D624  010F               	movlb	15	; () banked
  7498  00D626  9F3F               	bcf	63,7,b	;volatile
  7499  00D628  D000               	goto	l4530
  7500  00D62A                     l4530:
  7501  00D62A  0EFC               	movlw	252
  7502  00D62C  010F               	movlb	15	; () banked
  7503  00D62E  173F               	andwf	63,f,b	;volatile
  7504  00D630  010F               	movlb	15	; () banked
  7505  00D632  813F               	bsf	63,0,b	;volatile
  7506                           
  7507                           ; BSR set to: 15
  7508  00D634  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  7509                           
  7510                           ; BSR set to: 15
  7511  00D638  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  7512                           
  7513                           ; BSR set to: 15
  7514  00D63C  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  7515  00D640  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  7516  00D644  50DF               	movf	indf2,w,c
  7517  00D646  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  7518                           
  7519                           ; BSR set to: 15
  7520  00D648  0EFC               	movlw	252
  7521  00D64A  010F               	movlb	15	; () banked
  7522  00D64C  173F               	andwf	63,f,b	;volatile
  7523                           
  7524                           ; BSR set to: 15
  7525  00D64E  0E03               	movlw	3
  7526  00D650  010F               	movlb	15	; () banked
  7527  00D652  133F               	iorwf	63,f,b	;volatile
  7528                           
  7529                           ; BSR set to: 15
  7530  00D654  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  7531                           
  7532                           ; BSR set to: 15
  7533  00D658  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  7534                           
  7535                           ; BSR set to: 15
  7536  00D65C  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  7537                           
  7538                           ; BSR set to: 15
  7539  00D660  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  7540                           
  7541                           ; BSR set to: 15
  7542  00D664  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  7543                           
  7544                           ; BSR set to: 15
  7545  00D668  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  7546                           
  7547                           ; BSR set to: 15
  7548  00D66C  5005               	movf	RtccWriteDate@wasOn,w,c
  7549  00D66E  B4D8               	btfsc	status,2,c
  7550  00D670  D00D               	goto	l4566
  7551                           
  7552                           ; BSR set to: 15
  7553  00D672  010F               	movlb	15	; () banked
  7554  00D674  8F3F               	bsf	63,7,b	;volatile
  7555                           
  7556                           ; BSR set to: 15
  7557  00D676  5006               	movf	RtccWriteDate@wasAlrm,w,c
  7558  00D678  B4D8               	btfsc	status,2,c
  7559  00D67A  D002               	goto	l4562
  7560                           
  7561                           ; BSR set to: 15
  7562  00D67C  8E91               	bsf	3985,7,c	;volatile
  7563  00D67E  D000               	goto	l4562
  7564  00D680                     l4562:
  7565                           
  7566                           ; BSR set to: 15
  7567  00D680  5009               	movf	RtccWriteDate@wasWrEn,w,c
  7568  00D682  B4D8               	btfsc	status,2,c
  7569  00D684  D009               	goto	l4570
  7570                           
  7571                           ; BSR set to: 15
  7572  00D686  EC3C  F05F         	call	_RtccWrOn	;wreg free
  7573  00D68A  D006               	goto	l4570
  7574  00D68C                     l4566:
  7575  00D68C  5009               	movf	RtccWriteDate@wasWrEn,w,c
  7576  00D68E  A4D8               	btfss	status,2,c
  7577  00D690  D003               	goto	l4570
  7578  00D692  010F               	movlb	15	; () banked
  7579  00D694  9B3F               	bcf	63,5,b	;volatile
  7580                           
  7581                           ; BSR set to: 15
  7582  00D696  D000               	goto	l4570
  7583  00D698                     l4570:
  7584  00D698  5003               	movf	RtccWriteDate@di,w,c
  7585  00D69A  B4D8               	btfsc	status,2,c
  7586  00D69C  0012               	return	
  7587  00D69E  9CF2               	bcf	intcon,6,c	;volatile
  7588  00D6A0  0012               	return	
  7589                           
  7590                           ;	Return value of _RtccWriteDate is never used
  7591  00D6A2  0012               	return		;funcret
  7592  00D6A4                     __end_of_RtccWriteDate:
  7593                           	opt stack 0
  7594                           tblptru	equ	0xFF8
  7595                           tblptrh	equ	0xFF7
  7596                           tblptrl	equ	0xFF6
  7597                           tablat	equ	0xFF5
  7598                           prodh	equ	0xFF4
  7599                           prodl	equ	0xFF3
  7600                           intcon	equ	0xFF2
  7601                           postinc0	equ	0xFEE
  7602                           wreg	equ	0xFE8
  7603                           postdec1	equ	0xFE5
  7604                           fsr1l	equ	0xFE1
  7605                           indf2	equ	0xFDF
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610 ;; *************** function _RtccWrOn *****************
  7611 ;; Defined at:
  7612 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;		None
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;  data            2    0        unsigned int 
  7617 ;; Return value:  Size  Location     Type
  7618 ;;		None               void
  7619 ;; Registers used:
  7620 ;;		wreg, status,2
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7630 ;;Total ram usage:        0 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; This function calls:
  7633 ;;		Nothing
  7634 ;; This function is called by:
  7635 ;;		_Write_RTC
  7636 ;;		_RtccWriteDate
  7637 ;;		_RtccWriteTime
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           	psect	text25
  7642  00BE78                     __ptext25:
  7643                           	opt stack 0
  7644  00BE78                     _RtccWrOn:
  7645                           	opt stack 28
  7646                           
  7647                           ;incstack = 0
  7648  00BE78  9CF2               	bcf	intcon,6,c	;volatile
  7649  00BE7A  0E55               	movlw	85
  7650  00BE7C  6EA7               	movwf	4007,c	;volatile
  7651  00BE7E  0EAA               	movlw	170
  7652  00BE80  6EA7               	movwf	4007,c	;volatile
  7653  00BE82  010F               	movlb	15	; () banked
  7654  00BE84  8B3F               	bsf	63,5,b	;volatile
  7655                           
  7656                           ; BSR set to: 15
  7657  00BE86  8CF2               	bsf	intcon,6,c	;volatile
  7658                           
  7659                           ; BSR set to: 15
  7660  00BE88  0012               	return		;funcret
  7661  00BE8A                     __end_of_RtccWrOn:
  7662                           	opt stack 0
  7663                           tblptru	equ	0xFF8
  7664                           tblptrh	equ	0xFF7
  7665                           tblptrl	equ	0xFF6
  7666                           tablat	equ	0xFF5
  7667                           prodh	equ	0xFF4
  7668                           prodl	equ	0xFF3
  7669                           intcon	equ	0xFF2
  7670                           postinc0	equ	0xFEE
  7671                           wreg	equ	0xFE8
  7672                           postdec1	equ	0xFE5
  7673                           fsr1l	equ	0xFE1
  7674                           indf2	equ	0xFDF
  7675                           fsr2h	equ	0xFDA
  7676                           fsr2l	equ	0xFD9
  7677                           status	equ	0xFD8
  7678                           
  7679 ;; *************** function _Conseguir_Dia *****************
  7680 ;; Defined at:
  7681 ;;		line 567 in file "../monografia_main.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;		None
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;		None
  7686 ;; Return value:  Size  Location     Type
  7687 ;;		None               void
  7688 ;; Registers used:
  7689 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7699 ;;Total ram usage:        2 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    4
  7702 ;; This function calls:
  7703 ;;		_Lcd_Out
  7704 ;;		_sprintf
  7705 ;; This function is called by:
  7706 ;;		_Configurar_Dia
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           	psect	text26
  7711  00C926                     __ptext26:
  7712                           	opt stack 0
  7713  00C926                     _Conseguir_Dia:
  7714                           	opt stack 24
  7715                           
  7716                           ;monografia_main.c: 569: switch(diasem)
  7717                           
  7718                           ; BSR set to: 15
  7719                           ;incstack = 0
  7720  00C926  D04D               	goto	l4770
  7721  00C928                     l4754:
  7722                           
  7723                           ;monografia_main.c: 572: sprintf(buffer1,"Domingo  ");
  7724  00C928  0EB9               	movlw	low _buffer1
  7725  00C92A  6E43               	movwf	sprintf@sp,c
  7726  00C92C  0E00               	movlw	high _buffer1
  7727  00C92E  6E44               	movwf	sprintf@sp+1,c
  7728  00C930  0EB5               	movlw	low STR_32
  7729  00C932  6E45               	movwf	sprintf@f,c
  7730  00C934  0EFF               	movlw	high STR_32
  7731  00C936  6E46               	movwf	sprintf@f+1,c
  7732  00C938  EC37  F078         	call	_sprintf	;wreg free
  7733                           
  7734                           ;monografia_main.c: 573: break;
  7735  00C93C  D061               	goto	l4772
  7736  00C93E                     l4756:
  7737                           
  7738                           ;monografia_main.c: 575: sprintf(buffer1,"Lunes   ");
  7739  00C93E  0EB9               	movlw	low _buffer1
  7740  00C940  6E43               	movwf	sprintf@sp,c
  7741  00C942  0E00               	movlw	high _buffer1
  7742  00C944  6E44               	movwf	sprintf@sp+1,c
  7743  00C946  0ED3               	movlw	low STR_33
  7744  00C948  6E45               	movwf	sprintf@f,c
  7745  00C94A  0EFF               	movlw	high STR_33
  7746  00C94C  6E46               	movwf	sprintf@f+1,c
  7747  00C94E  EC37  F078         	call	_sprintf	;wreg free
  7748                           
  7749                           ;monografia_main.c: 576: break;
  7750  00C952  D056               	goto	l4772
  7751  00C954                     l4758:
  7752                           
  7753                           ;monografia_main.c: 578: sprintf(buffer1,"Martes   ");
  7754  00C954  0EB9               	movlw	low _buffer1
  7755  00C956  6E43               	movwf	sprintf@sp,c
  7756  00C958  0E00               	movlw	high _buffer1
  7757  00C95A  6E44               	movwf	sprintf@sp+1,c
  7758  00C95C  0EA1               	movlw	low STR_34
  7759  00C95E  6E45               	movwf	sprintf@f,c
  7760  00C960  0EFF               	movlw	high STR_34
  7761  00C962  6E46               	movwf	sprintf@f+1,c
  7762  00C964  EC37  F078         	call	_sprintf	;wreg free
  7763                           
  7764                           ;monografia_main.c: 579: break;
  7765  00C968  D04B               	goto	l4772
  7766  00C96A                     l4760:
  7767                           
  7768                           ;monografia_main.c: 581: sprintf(buffer1,"Miercoles");
  7769  00C96A  0EB9               	movlw	low _buffer1
  7770  00C96C  6E43               	movwf	sprintf@sp,c
  7771  00C96E  0E00               	movlw	high _buffer1
  7772  00C970  6E44               	movwf	sprintf@sp+1,c
  7773  00C972  0EC9               	movlw	low STR_35
  7774  00C974  6E45               	movwf	sprintf@f,c
  7775  00C976  0EFF               	movlw	high STR_35
  7776  00C978  6E46               	movwf	sprintf@f+1,c
  7777  00C97A  EC37  F078         	call	_sprintf	;wreg free
  7778                           
  7779                           ;monografia_main.c: 582: break;
  7780  00C97E  D040               	goto	l4772
  7781  00C980                     l4762:
  7782                           
  7783                           ;monografia_main.c: 584: sprintf(buffer1,"Jueves   ");
  7784  00C980  0EB9               	movlw	low _buffer1
  7785  00C982  6E43               	movwf	sprintf@sp,c
  7786  00C984  0E00               	movlw	high _buffer1
  7787  00C986  6E44               	movwf	sprintf@sp+1,c
  7788  00C988  0EAB               	movlw	low STR_36
  7789  00C98A  6E45               	movwf	sprintf@f,c
  7790  00C98C  0EFF               	movlw	high STR_36
  7791  00C98E  6E46               	movwf	sprintf@f+1,c
  7792  00C990  EC37  F078         	call	_sprintf	;wreg free
  7793                           
  7794                           ;monografia_main.c: 585: break;
  7795  00C994  D035               	goto	l4772
  7796  00C996                     l4764:
  7797                           
  7798                           ;monografia_main.c: 587: sprintf(buffer1,"Viernes  ");
  7799  00C996  0EB9               	movlw	low _buffer1
  7800  00C998  6E43               	movwf	sprintf@sp,c
  7801  00C99A  0E00               	movlw	high _buffer1
  7802  00C99C  6E44               	movwf	sprintf@sp+1,c
  7803  00C99E  0EBF               	movlw	low STR_37
  7804  00C9A0  6E45               	movwf	sprintf@f,c
  7805  00C9A2  0EFF               	movlw	high STR_37
  7806  00C9A4  6E46               	movwf	sprintf@f+1,c
  7807  00C9A6  EC37  F078         	call	_sprintf	;wreg free
  7808                           
  7809                           ;monografia_main.c: 588: break;
  7810  00C9AA  D02A               	goto	l4772
  7811  00C9AC                     l4766:
  7812                           
  7813                           ;monografia_main.c: 590: sprintf(buffer1,"Sabado   ");
  7814  00C9AC  0EB9               	movlw	low _buffer1
  7815  00C9AE  6E43               	movwf	sprintf@sp,c
  7816  00C9B0  0E00               	movlw	high _buffer1
  7817  00C9B2  6E44               	movwf	sprintf@sp+1,c
  7818  00C9B4  0E97               	movlw	low STR_38
  7819  00C9B6  6E45               	movwf	sprintf@f,c
  7820  00C9B8  0EFF               	movlw	high STR_38
  7821  00C9BA  6E46               	movwf	sprintf@f+1,c
  7822  00C9BC  EC37  F078         	call	_sprintf	;wreg free
  7823                           
  7824                           ;monografia_main.c: 592: }
  7825                           
  7826                           ;monografia_main.c: 591: break;
  7827  00C9C0  D01F               	goto	l4772
  7828  00C9C2                     l4770:
  7829  00C9C2  C0DD  F055         	movff	_diasem,??_Conseguir_Dia
  7830  00C9C6  C0DE  F056         	movff	_diasem+1,??_Conseguir_Dia+1
  7831                           
  7832                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7833                           ; Switch size 1, requested type "space"
  7834                           ; Number of cases is 1, Range of values is 0 to 0
  7835                           ; switch strategies available:
  7836                           ; Name         Instructions Cycles
  7837                           ; simple_byte            4     3 (average)
  7838                           ;	Chosen strategy is simple_byte
  7839  00C9CA  5056               	movf	??_Conseguir_Dia+1,w,c
  7840  00C9CC  0A00               	xorlw	0	; case 0
  7841  00C9CE  A4D8               	btfss	status,2,c
  7842  00C9D0  D017               	goto	l4772
  7843                           
  7844                           ; Switch size 1, requested type "space"
  7845                           ; Number of cases is 7, Range of values is 0 to 6
  7846                           ; switch strategies available:
  7847                           ; Name         Instructions Cycles
  7848                           ; simple_byte           22    12 (average)
  7849                           ;	Chosen strategy is simple_byte
  7850  00C9D2  5055               	movf	??_Conseguir_Dia,w,c
  7851  00C9D4  0A00               	xorlw	0	; case 0
  7852  00C9D6  B4D8               	btfsc	status,2,c
  7853  00C9D8  D7A7               	goto	l4754
  7854  00C9DA  0A01               	xorlw	1	; case 1
  7855  00C9DC  B4D8               	btfsc	status,2,c
  7856  00C9DE  D7AF               	goto	l4756
  7857  00C9E0  0A03               	xorlw	3	; case 2
  7858  00C9E2  B4D8               	btfsc	status,2,c
  7859  00C9E4  D7B7               	goto	l4758
  7860  00C9E6  0A01               	xorlw	1	; case 3
  7861  00C9E8  B4D8               	btfsc	status,2,c
  7862  00C9EA  D7BF               	goto	l4760
  7863  00C9EC  0A07               	xorlw	7	; case 4
  7864  00C9EE  B4D8               	btfsc	status,2,c
  7865  00C9F0  D7C7               	goto	l4762
  7866  00C9F2  0A01               	xorlw	1	; case 5
  7867  00C9F4  B4D8               	btfsc	status,2,c
  7868  00C9F6  D7CF               	goto	l4764
  7869  00C9F8  0A03               	xorlw	3	; case 6
  7870  00C9FA  B4D8               	btfsc	status,2,c
  7871  00C9FC  D7D7               	goto	l4766
  7872  00C9FE  D000               	goto	l4772
  7873  00CA00                     l4772:
  7874                           
  7875                           ;monografia_main.c: 593: Lcd_Out(2,0,buffer1);
  7876  00CA00  0E00               	movlw	0
  7877  00CA02  6E04               	movwf	Lcd_Out@x,c
  7878  00CA04  0EB9               	movlw	low _buffer1
  7879  00CA06  6E05               	movwf	Lcd_Out@buffer,c
  7880  00CA08  0E00               	movlw	high _buffer1
  7881  00CA0A  6E06               	movwf	Lcd_Out@buffer+1,c
  7882  00CA0C  0E02               	movlw	2
  7883  00CA0E  ECCB  F061         	call	_Lcd_Out
  7884  00CA12  0012               	return		;funcret
  7885  00CA14                     __end_of_Conseguir_Dia:
  7886                           	opt stack 0
  7887                           tblptru	equ	0xFF8
  7888                           tblptrh	equ	0xFF7
  7889                           tblptrl	equ	0xFF6
  7890                           tablat	equ	0xFF5
  7891                           prodh	equ	0xFF4
  7892                           prodl	equ	0xFF3
  7893                           intcon	equ	0xFF2
  7894                           postinc0	equ	0xFEE
  7895                           wreg	equ	0xFE8
  7896                           postdec1	equ	0xFE5
  7897                           fsr1l	equ	0xFE1
  7898                           indf2	equ	0xFDF
  7899                           fsr2h	equ	0xFDA
  7900                           fsr2l	equ	0xFD9
  7901                           status	equ	0xFD8
  7902                           
  7903 ;; *************** function _sprintf *****************
  7904 ;; Defined at:
  7905 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  sp              2   66[COMRAM] PTR unsigned char 
  7908 ;;		 -> buffer1(20), 
  7909 ;;  f               2   68[COMRAM] PTR const unsigned char 
  7910 ;;		 -> STR_38(10), STR_37(10), STR_36(10), STR_35(10), 
  7911 ;;		 -> STR_34(10), STR_33(9), STR_32(10), STR_30(5), 
  7912 ;;		 -> STR_28(5), STR_17(29), STR_16(14), STR_15(11), 
  7913 ;;		 -> STR_14(15), STR_12(22), STR_11(23), STR_10(22), 
  7914 ;;		 -> STR_9(25), STR_8(22), STR_7(21), STR_6(23), 
  7915 ;;		 -> STR_5(29), STR_4(11), STR_3(14), STR_2(4), 
  7916 ;;		 -> STR_1(16), 
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;  tmpval          4   13[BANK0 ] struct .
  7919 ;;  val             4    9[BANK0 ] unsigned long 
  7920 ;;  fval            3   21[BANK0 ] unsigned long 
  7921 ;;  prec            2   26[BANK0 ] int 
  7922 ;;  width           2   24[BANK0 ] int 
  7923 ;;  flag            2   19[BANK0 ] unsigned short 
  7924 ;;  exp             2   17[BANK0 ] int 
  7925 ;;  len             2    7[BANK0 ] unsigned int 
  7926 ;;  ap              2    5[BANK0 ] PTR void [1]
  7927 ;;		 -> ?_sprintf(2), 
  7928 ;;  cp              2    3[BANK0 ] PTR const unsigned char 
  7929 ;;		 -> NULL(0), STR_47(7), STR_42(9), STR_41(7), 
  7930 ;;		 -> STR_40(7), STR_39(7), lectura_temp(1), 
  7931 ;;  c               1   28[BANK0 ] char 
  7932 ;;  d               1    0        unsigned char 
  7933 ;; Return value:  Size  Location     Type
  7934 ;;                  2   66[COMRAM] int 
  7935 ;; Registers used:
  7936 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7937 ;; Tracked objects:
  7938 ;;		On entry : 0/0
  7939 ;;		On exit  : 0/0
  7940 ;;		Unchanged: 0/0
  7941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7942 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7943 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7944 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7945 ;;      Totals:        18      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7946 ;;Total ram usage:       47 bytes
  7947 ;; Hardware stack levels used:    1
  7948 ;; Hardware stack levels required when called:    3
  7949 ;; This function calls:
  7950 ;;		___awdiv
  7951 ;;		___ftadd
  7952 ;;		___ftge
  7953 ;;		___ftmul
  7954 ;;		___ftneg
  7955 ;;		___ftsub
  7956 ;;		___fttol
  7957 ;;		___lldiv
  7958 ;;		___llmod
  7959 ;;		___lltoft
  7960 ;;		___wmul
  7961 ;;		__div_to_l_
  7962 ;;		__tdiv_to_l_
  7963 ;;		_fround
  7964 ;;		_isdigit
  7965 ;;		_scale
  7966 ;; This function is called by:
  7967 ;;		_Iniciar_Display
  7968 ;;		_Mostrar_DiaYfecha
  7969 ;;		_Configurar_Pantalla
  7970 ;;		_Seleccionar_Dato
  7971 ;;		_Conseguir_Dia
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text27
  7976  00F06E                     __ptext27:
  7977                           	opt stack 0
  7978  00F06E                     _sprintf:
  7979                           	opt stack 26
  7980                           
  7981                           ;doprnt.c: 494: va_list ap;
  7982                           ;doprnt.c: 499: signed char c;
  7983                           ;doprnt.c: 501: int width;
  7984                           ;doprnt.c: 504: int prec;
  7985                           ;doprnt.c: 508: unsigned short flag;
  7986                           ;doprnt.c: 515: char d;
  7987                           ;doprnt.c: 516: double fval;
  7988                           ;doprnt.c: 517: int exp;
  7989                           ;doprnt.c: 523: union {
  7990                           ;doprnt.c: 524: unsigned long vd;
  7991                           ;doprnt.c: 525: double integ;
  7992                           ;doprnt.c: 526: } tmpval;
  7993                           ;doprnt.c: 528: unsigned long val;
  7994                           ;doprnt.c: 529: unsigned len;
  7995                           ;doprnt.c: 530: const char * cp;
  7996                           ;doprnt.c: 533: *ap = __va_start();
  7997                           
  7998                           ;incstack = 0
  7999  00F06E  0E47               	movlw	low (?_sprintf+4)
  8000  00F070  0100               	movlb	0	; () banked
  8001  00F072  6F65               	movwf	sprintf@ap& (0+255),b
  8002  00F074  0E00               	movlw	high (?_sprintf+4)
  8003  00F076  0100               	movlb	0	; () banked
  8004  00F078  6F66               	movwf	(sprintf@ap+1)& (0+255),b
  8005                           
  8006                           ;doprnt.c: 536: while(c = *f++) {
  8007  00F07A  EFFC  F07E         	goto	l4432
  8008  00F07E                     l4072:
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;doprnt.c: 538: if(c != '%')
  8012  00F07E  0E25               	movlw	37
  8013  00F080  0100               	movlb	0	; () banked
  8014  00F082  197C               	xorwf	sprintf@c& (0+255),w,b
  8015  00F084  B4D8               	btfsc	status,2,c
  8016  00F086  D00A               	goto	l4078
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;doprnt.c: 540: {
  8020                           ;doprnt.c: 541: ((*sp++ = (c)));
  8021  00F088  C043  FFD9         	movff	sprintf@sp,fsr2l
  8022  00F08C  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  8023  00F090  C07C  FFDF         	movff	sprintf@c,indf2
  8024                           
  8025                           ; BSR set to: 0
  8026  00F094  4A43               	infsnz	sprintf@sp,f,c
  8027  00F096  2A44               	incf	sprintf@sp+1,f,c
  8028                           
  8029                           ;doprnt.c: 542: continue;
  8030  00F098  EFFC  F07E         	goto	l4432
  8031  00F09C                     l4078:
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;doprnt.c: 543: }
  8035                           ;doprnt.c: 546: width = 0;
  8036  00F09C  0E00               	movlw	0
  8037  00F09E  0100               	movlb	0	; () banked
  8038  00F0A0  6F79               	movwf	(sprintf@width+1)& (0+255),b
  8039  00F0A2  0E00               	movlw	0
  8040  00F0A4  6F78               	movwf	sprintf@width& (0+255),b
  8041                           
  8042                           ;doprnt.c: 548: flag = 0;
  8043  00F0A6  0E00               	movlw	0
  8044  00F0A8  0100               	movlb	0	; () banked
  8045  00F0AA  6F74               	movwf	(sprintf@flag+1)& (0+255),b
  8046  00F0AC  0E00               	movlw	0
  8047  00F0AE  6F73               	movwf	sprintf@flag& (0+255),b
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;doprnt.c: 551: switch(*f) {
  8051                           
  8052                           ;doprnt.c: 550: for(;;) {
  8053  00F0B0  D006               	goto	l4084
  8054  00F0B2                     l4080:
  8055                           
  8056                           ;doprnt.c: 580: flag |= 0x04;
  8057  00F0B2  0100               	movlb	0	; () banked
  8058  00F0B4  8573               	bsf	sprintf@flag& (0+255),2,b
  8059                           
  8060                           ;doprnt.c: 581: f++;
  8061  00F0B6  4A45               	infsnz	sprintf@f,f,c
  8062  00F0B8  2A46               	incf	sprintf@f+1,f,c
  8063                           
  8064                           ;doprnt.c: 582: continue;
  8065  00F0BA  D001               	goto	l4084
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;doprnt.c: 584: }
  8069  00F0BC  D00B               	goto	l4086
  8070  00F0BE                     l4084:
  8071  00F0BE  C045  FFF6         	movff	sprintf@f,tblptrl
  8072  00F0C2  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8073  00F0C6                     	if	0	;tblptru may be non-zero
  8074  00F0C6                     	endif
  8075  00F0C6                     	if	0	;tblptru may be non-zero
  8076  00F0C6                     	endif
  8077  00F0C6  0008               	tblrd		*
  8078  00F0C8  50F5               	movf	tablat,w,c
  8079                           
  8080                           ; Switch size 1, requested type "space"
  8081                           ; Number of cases is 1, Range of values is 48 to 48
  8082                           ; switch strategies available:
  8083                           ; Name         Instructions Cycles
  8084                           ; simple_byte            4     3 (average)
  8085                           ;	Chosen strategy is simple_byte
  8086  00F0CA  0A30               	xorlw	48	; case 48
  8087  00F0CC  B4D8               	btfsc	status,2,c
  8088  00F0CE  D7F1               	goto	l4080
  8089                           
  8090                           ;doprnt.c: 585: break;
  8091  00F0D0  D001               	goto	l4086
  8092                           
  8093                           ;doprnt.c: 586: }
  8094  00F0D2  D7F5               	goto	l4084
  8095  00F0D4                     l4086:
  8096                           
  8097                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8098  00F0D4  C045  FFF6         	movff	sprintf@f,tblptrl
  8099  00F0D8  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8100  00F0DC                     	if	0	;tblptru may be non-zero
  8101  00F0DC                     	endif
  8102  00F0DC                     	if	0	;tblptru may be non-zero
  8103  00F0DC                     	endif
  8104  00F0DC  0008               	tblrd		*
  8105  00F0DE  50F5               	movf	tablat,w,c
  8106  00F0E0  EC5E  F05F         	call	_isdigit
  8107  00F0E4  A0D8               	btfss	status,0,c
  8108  00F0E6  D038               	goto	l4098
  8109                           
  8110                           ;doprnt.c: 598: width = 0;
  8111  00F0E8  0E00               	movlw	0
  8112  00F0EA  0100               	movlb	0	; () banked
  8113  00F0EC  6F79               	movwf	(sprintf@width+1)& (0+255),b
  8114  00F0EE  0E00               	movlw	0
  8115  00F0F0  6F78               	movwf	sprintf@width& (0+255),b
  8116  00F0F2  D000               	goto	l4090
  8117  00F0F4                     l4090:
  8118                           
  8119                           ;doprnt.c: 600: width *= 10;
  8120  00F0F4  C078  F00F         	movff	sprintf@width,___wmul@multiplier
  8121  00F0F8  C079  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  8122  00F0FC  0E00               	movlw	0
  8123  00F0FE  6E12               	movwf	___wmul@multiplicand+1,c
  8124  00F100  0E0A               	movlw	10
  8125  00F102  6E11               	movwf	___wmul@multiplicand,c
  8126  00F104  EC94  F05F         	call	___wmul	;wreg free
  8127  00F108  C00F  F078         	movff	?___wmul,sprintf@width
  8128  00F10C  C010  F079         	movff	?___wmul+1,sprintf@width+1
  8129                           
  8130                           ;doprnt.c: 601: width += *f++ - '0';
  8131  00F110  0ED0               	movlw	208
  8132  00F112  6E4F               	movwf	??_sprintf& (0+255),c
  8133  00F114  0EFF               	movlw	255
  8134  00F116  6E50               	movwf	(??_sprintf+1)& (0+255),c
  8135  00F118  C045  FFF6         	movff	sprintf@f,tblptrl
  8136  00F11C  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8137  00F120                     	if	0	;tblptru may be non-zero
  8138  00F120                     	endif
  8139  00F120                     	if	0	;tblptru may be non-zero
  8140  00F120                     	endif
  8141  00F120  0008               	tblrd		*
  8142  00F122  50F5               	movf	tablat,w,c
  8143  00F124  6E51               	movwf	(??_sprintf+2)& (0+255),c
  8144  00F126  6A52               	clrf	(??_sprintf+3)& (0+255),c
  8145  00F128  504F               	movf	??_sprintf,w,c
  8146  00F12A  2651               	addwf	??_sprintf+2,f,c
  8147  00F12C  5050               	movf	??_sprintf+1,w,c
  8148  00F12E  2252               	addwfc	??_sprintf+3,f,c
  8149  00F130  5051               	movf	??_sprintf+2,w,c
  8150  00F132  0100               	movlb	0	; () banked
  8151  00F134  2778               	addwf	sprintf@width& (0+255),f,b
  8152  00F136  5052               	movf	??_sprintf+3,w,c
  8153  00F138  0100               	movlb	0	; () banked
  8154  00F13A  2379               	addwfc	(sprintf@width+1)& (0+255),f,b
  8155                           
  8156                           ; BSR set to: 0
  8157  00F13C  4A45               	infsnz	sprintf@f,f,c
  8158  00F13E  2A46               	incf	sprintf@f+1,f,c
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8162  00F140  C045  FFF6         	movff	sprintf@f,tblptrl
  8163  00F144  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8164  00F148                     	if	0	;tblptru may be non-zero
  8165  00F148                     	endif
  8166  00F148                     	if	0	;tblptru may be non-zero
  8167  00F148                     	endif
  8168  00F148  0008               	tblrd		*
  8169  00F14A  50F5               	movf	tablat,w,c
  8170  00F14C  EC5E  F05F         	call	_isdigit
  8171  00F150  A0D8               	btfss	status,0,c
  8172  00F152  D002               	goto	l4098
  8173  00F154  D7CF               	goto	l4090
  8174  00F156  D000               	goto	l4098
  8175  00F158                     l4098:
  8176                           
  8177                           ;doprnt.c: 608: }
  8178                           ;doprnt.c: 611: if(*f == '.') {
  8179  00F158  C045  FFF6         	movff	sprintf@f,tblptrl
  8180  00F15C  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8181  00F160                     	if	0	;tblptru may be non-zero
  8182  00F160                     	endif
  8183  00F160                     	if	0	;tblptru may be non-zero
  8184  00F160                     	endif
  8185  00F160  0008               	tblrd		*
  8186  00F162  50F5               	movf	tablat,w,c
  8187  00F164  0A2E               	xorlw	46
  8188  00F166  A4D8               	btfss	status,2,c
  8189  00F168  D034               	goto	l4110
  8190                           
  8191                           ;doprnt.c: 612: flag |= 0x4000;
  8192  00F16A  0100               	movlb	0	; () banked
  8193  00F16C  8D74               	bsf	(sprintf@flag+1)& (0+255),6,b
  8194                           
  8195                           ;doprnt.c: 613: f++;
  8196  00F16E  4A45               	infsnz	sprintf@f,f,c
  8197  00F170  2A46               	incf	sprintf@f+1,f,c
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;doprnt.c: 620: {
  8201                           ;doprnt.c: 621: prec = 0;
  8202  00F172  0E00               	movlw	0
  8203  00F174  0100               	movlb	0	; () banked
  8204  00F176  6F7B               	movwf	(sprintf@prec+1)& (0+255),b
  8205  00F178  0E00               	movlw	0
  8206  00F17A  6F7A               	movwf	sprintf@prec& (0+255),b
  8207                           
  8208                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  8209  00F17C  D01E               	goto	l4108
  8210  00F17E                     l4104:
  8211                           
  8212                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  8213  00F17E  C07A  F00F         	movff	sprintf@prec,___wmul@multiplier
  8214  00F182  C07B  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  8215  00F186  0E00               	movlw	0
  8216  00F188  6E12               	movwf	___wmul@multiplicand+1,c
  8217  00F18A  0E0A               	movlw	10
  8218  00F18C  6E11               	movwf	___wmul@multiplicand,c
  8219  00F18E  EC94  F05F         	call	___wmul	;wreg free
  8220  00F192  C045  FFF6         	movff	sprintf@f,tblptrl
  8221  00F196  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8222  00F19A                     	if	0	;tblptru may be non-zero
  8223  00F19A                     	endif
  8224  00F19A                     	if	0	;tblptru may be non-zero
  8225  00F19A                     	endif
  8226  00F19A  0008               	tblrd		*
  8227  00F19C  50F5               	movf	tablat,w,c
  8228  00F19E  260F               	addwf	?___wmul,f,c
  8229  00F1A0  0E00               	movlw	0
  8230  00F1A2  2210               	addwfc	?___wmul+1,f,c
  8231  00F1A4  0ED0               	movlw	208
  8232  00F1A6  240F               	addwf	?___wmul,w,c
  8233  00F1A8  0100               	movlb	0	; () banked
  8234  00F1AA  6F7A               	movwf	sprintf@prec& (0+255),b
  8235  00F1AC  0EFF               	movlw	255
  8236  00F1AE  2010               	addwfc	?___wmul+1,w,c
  8237  00F1B0  0100               	movlb	0	; () banked
  8238  00F1B2  6F7B               	movwf	(sprintf@prec+1)& (0+255),b
  8239                           
  8240                           ; BSR set to: 0
  8241  00F1B4  4A45               	infsnz	sprintf@f,f,c
  8242  00F1B6  2A46               	incf	sprintf@f+1,f,c
  8243  00F1B8  D000               	goto	l4108
  8244  00F1BA                     l4108:
  8245                           
  8246                           ; BSR set to: 0
  8247  00F1BA  C045  FFF6         	movff	sprintf@f,tblptrl
  8248  00F1BE  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8249  00F1C2                     	if	0	;tblptru may be non-zero
  8250  00F1C2                     	endif
  8251  00F1C2                     	if	0	;tblptru may be non-zero
  8252  00F1C2                     	endif
  8253  00F1C2  0008               	tblrd		*
  8254  00F1C4  50F5               	movf	tablat,w,c
  8255  00F1C6  EC5E  F05F         	call	_isdigit
  8256  00F1CA  A0D8               	btfss	status,0,c
  8257  00F1CC  D0C2               	goto	l4160
  8258  00F1CE  D7D7               	goto	l4104
  8259                           
  8260                           ;doprnt.c: 624: }
  8261                           ;doprnt.c: 625: } else {
  8262  00F1D0  D0C0               	goto	l4160
  8263  00F1D2                     l4110:
  8264                           
  8265                           ;doprnt.c: 626: prec = 0;
  8266  00F1D2  0E00               	movlw	0
  8267  00F1D4  0100               	movlb	0	; () banked
  8268  00F1D6  6F7B               	movwf	(sprintf@prec+1)& (0+255),b
  8269  00F1D8  0E00               	movlw	0
  8270  00F1DA  6F7A               	movwf	sprintf@prec& (0+255),b
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;doprnt.c: 628: flag |= 0x1000;
  8274  00F1DC  0100               	movlb	0	; () banked
  8275  00F1DE  8974               	bsf	(sprintf@flag+1)& (0+255),4,b
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;doprnt.c: 630: }
  8279                           ;doprnt.c: 635: switch(c = *f++) {
  8280  00F1E0  D0B8               	goto	l4160
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;doprnt.c: 638: goto alldone;
  8284                           
  8285                           ;doprnt.c: 637: case 0:
  8286  00F1E2  EF0C  F07F         	goto	l4434
  8287  00F1E6                     l4114:
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;doprnt.c: 663: flag |= 0x400;
  8291  00F1E6  0100               	movlb	0	; () banked
  8292  00F1E8  8574               	bsf	(sprintf@flag+1)& (0+255),2,b
  8293                           
  8294                           ;doprnt.c: 664: break;
  8295  00F1EA  D0CD               	goto	l4162
  8296  00F1EC                     l4116:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8300  00F1EC  C065  FFD9         	movff	sprintf@ap,fsr2l
  8301  00F1F0  C066  FFDA         	movff	sprintf@ap+1,fsr2h
  8302  00F1F4  CFDE F063          	movff	postinc2,sprintf@cp
  8303  00F1F8  CFDD F064          	movff	postdec2,sprintf@cp+1
  8304                           
  8305                           ; BSR set to: 0
  8306  00F1FC  0E02               	movlw	2
  8307  00F1FE  0100               	movlb	0	; () banked
  8308  00F200  2765               	addwf	sprintf@ap& (0+255),f,b
  8309  00F202  0E00               	movlw	0
  8310  00F204  2366               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;doprnt.c: 740: if(!cp)
  8314  00F206  0100               	movlb	0	; () banked
  8315  00F208  5163               	movf	sprintf@cp& (0+255),w,b
  8316  00F20A  0100               	movlb	0	; () banked
  8317  00F20C  1164               	iorwf	(sprintf@cp+1)& (0+255),w,b
  8318  00F20E  A4D8               	btfss	status,2,c
  8319  00F210  D007               	goto	l4124
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;doprnt.c: 741: cp = "(null)";
  8323  00F212  0EE5               	movlw	low STR_47
  8324  00F214  0100               	movlb	0	; () banked
  8325  00F216  6F63               	movwf	sprintf@cp& (0+255),b
  8326  00F218  0EFF               	movlw	high STR_47
  8327  00F21A  0100               	movlb	0	; () banked
  8328  00F21C  6F64               	movwf	(sprintf@cp+1)& (0+255),b
  8329  00F21E  D000               	goto	l4124
  8330  00F220                     l4124:
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;doprnt.c: 745: len = 0;
  8334  00F220  0E00               	movlw	0
  8335  00F222  0100               	movlb	0	; () banked
  8336  00F224  6F68               	movwf	(sprintf@len+1)& (0+255),b
  8337  00F226  0E00               	movlw	0
  8338  00F228  6F67               	movwf	sprintf@len& (0+255),b
  8339                           
  8340                           ;doprnt.c: 746: while(cp[len])
  8341  00F22A  D004               	goto	l4128
  8342  00F22C                     l4126:
  8343                           
  8344                           ;doprnt.c: 747: len++;
  8345  00F22C  0100               	movlb	0	; () banked
  8346  00F22E  4B67               	infsnz	sprintf@len& (0+255),f,b
  8347  00F230  2B68               	incf	(sprintf@len+1)& (0+255),f,b
  8348  00F232  D000               	goto	l4128
  8349  00F234                     l4128:
  8350                           
  8351                           ; BSR set to: 0
  8352  00F234  0100               	movlb	0	; () banked
  8353  00F236  5167               	movf	sprintf@len& (0+255),w,b
  8354  00F238  0100               	movlb	0	; () banked
  8355  00F23A  2563               	addwf	sprintf@cp& (0+255),w,b
  8356  00F23C  6E4F               	movwf	??_sprintf& (0+255),c
  8357  00F23E  0100               	movlb	0	; () banked
  8358  00F240  5168               	movf	(sprintf@len+1)& (0+255),w,b
  8359  00F242  0100               	movlb	0	; () banked
  8360  00F244  2164               	addwfc	(sprintf@cp+1)& (0+255),w,b
  8361  00F246  6E50               	movwf	(??_sprintf+1)& (0+255),c
  8362  00F248  C04F  FFF6         	movff	??_sprintf,tblptrl
  8363  00F24C  C050  FFF7         	movff	??_sprintf+1,tblptrh
  8364  00F250  6AF8               	clrf	tblptru,c
  8365  00F252  0E0E               	movlw	(high __ramtop+-1)
  8366  00F254  64F7               	cpfsgt	tblptrh,c
  8367  00F256  D003               	bra	u4267
  8368  00F258  0008               	tblrd		*
  8369  00F25A  50F5               	movf	tablat,w,c
  8370  00F25C  D005               	bra	u4260
  8371  00F25E                     u4267:
  8372  00F25E  CFF6 FFE9          	movff	tblptrl,fsr0l
  8373  00F262  CFF7 FFEA          	movff	tblptrh,fsr0h
  8374  00F266  50EF               	movf	indf0,w,c
  8375  00F268                     u4260:
  8376  00F268  0900               	iorlw	0
  8377  00F26A  A4D8               	btfss	status,2,c
  8378  00F26C  D7DF               	goto	l4126
  8379                           
  8380                           ;doprnt.c: 753: if(prec && prec < len)
  8381  00F26E  0100               	movlb	0	; () banked
  8382  00F270  517A               	movf	sprintf@prec& (0+255),w,b
  8383  00F272  0100               	movlb	0	; () banked
  8384  00F274  117B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  8385  00F276  B4D8               	btfsc	status,2,c
  8386  00F278  D00F               	goto	l4136
  8387                           
  8388                           ; BSR set to: 0
  8389  00F27A  0100               	movlb	0	; () banked
  8390  00F27C  5167               	movf	sprintf@len& (0+255),w,b
  8391  00F27E  0100               	movlb	0	; () banked
  8392  00F280  5D7A               	subwf	sprintf@prec& (0+255),w,b
  8393  00F282  0100               	movlb	0	; () banked
  8394  00F284  5168               	movf	(sprintf@len+1)& (0+255),w,b
  8395  00F286  0100               	movlb	0	; () banked
  8396  00F288  597B               	subwfb	(sprintf@prec+1)& (0+255),w,b
  8397  00F28A  B0D8               	btfsc	status,0,c
  8398  00F28C  D005               	goto	l4136
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;doprnt.c: 754: len = prec;
  8402  00F28E  C07A  F067         	movff	sprintf@prec,sprintf@len
  8403  00F292  C07B  F068         	movff	sprintf@prec+1,sprintf@len+1
  8404  00F296  D000               	goto	l4136
  8405  00F298                     l4136:
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;doprnt.c: 757: if(width > len)
  8409  00F298  0100               	movlb	0	; () banked
  8410  00F29A  5178               	movf	sprintf@width& (0+255),w,b
  8411  00F29C  0100               	movlb	0	; () banked
  8412  00F29E  5D67               	subwf	sprintf@len& (0+255),w,b
  8413  00F2A0  0100               	movlb	0	; () banked
  8414  00F2A2  5179               	movf	(sprintf@width+1)& (0+255),w,b
  8415  00F2A4  0100               	movlb	0	; () banked
  8416  00F2A6  5968               	subwfb	(sprintf@len+1)& (0+255),w,b
  8417  00F2A8  B0D8               	btfsc	status,0,c
  8418  00F2AA  D009               	goto	l4140
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;doprnt.c: 758: width -= len;
  8422  00F2AC  0100               	movlb	0	; () banked
  8423  00F2AE  5167               	movf	sprintf@len& (0+255),w,b
  8424  00F2B0  0100               	movlb	0	; () banked
  8425  00F2B2  5F78               	subwf	sprintf@width& (0+255),f,b
  8426  00F2B4  0100               	movlb	0	; () banked
  8427  00F2B6  5168               	movf	(sprintf@len+1)& (0+255),w,b
  8428  00F2B8  0100               	movlb	0	; () banked
  8429  00F2BA  5B79               	subwfb	(sprintf@width+1)& (0+255),f,b
  8430  00F2BC  D00F               	goto	l4146
  8431  00F2BE                     l4140:
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;doprnt.c: 759: else
  8435                           ;doprnt.c: 760: width = 0;
  8436  00F2BE  0E00               	movlw	0
  8437  00F2C0  0100               	movlb	0	; () banked
  8438  00F2C2  6F79               	movwf	(sprintf@width+1)& (0+255),b
  8439  00F2C4  0E00               	movlw	0
  8440  00F2C6  6F78               	movwf	sprintf@width& (0+255),b
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;doprnt.c: 764: while(width--)
  8444  00F2C8  D009               	goto	l4146
  8445  00F2CA                     l4142:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;doprnt.c: 765: ((*sp++ = (' ')));
  8449  00F2CA  C043  FFD9         	movff	sprintf@sp,fsr2l
  8450  00F2CE  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  8451  00F2D2  0E20               	movlw	32
  8452  00F2D4  6EDF               	movwf	indf2,c
  8453                           
  8454                           ; BSR set to: 0
  8455  00F2D6  4A43               	infsnz	sprintf@sp,f,c
  8456  00F2D8  2A44               	incf	sprintf@sp+1,f,c
  8457  00F2DA  D000               	goto	l4146
  8458  00F2DC                     l4146:
  8459                           
  8460                           ; BSR set to: 0
  8461  00F2DC  0100               	movlb	0	; () banked
  8462  00F2DE  0778               	decf	sprintf@width& (0+255),f,b
  8463  00F2E0  A0D8               	btfss	status,0,c
  8464  00F2E2  0779               	decf	(sprintf@width+1)& (0+255),f,b
  8465  00F2E4  0100               	movlb	0	; () banked
  8466  00F2E6  2978               	incf	sprintf@width& (0+255),w,b
  8467  00F2E8  E1F0               	bnz	l4142
  8468  00F2EA  0100               	movlb	0	; () banked
  8469  00F2EC  2979               	incf	(sprintf@width+1)& (0+255),w,b
  8470  00F2EE  B4D8               	btfsc	status,2,c
  8471  00F2F0  D01D               	goto	l4154
  8472  00F2F2  D7EB               	goto	l4142
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;doprnt.c: 767: while(len--)
  8476  00F2F4  D01B               	goto	l4154
  8477  00F2F6                     l4148:
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  8481  00F2F6  C063  FFF6         	movff	sprintf@cp,tblptrl
  8482  00F2FA  C064  FFF7         	movff	sprintf@cp+1,tblptrh
  8483  00F2FE  6AF8               	clrf	tblptru,c
  8484  00F300  C043  FFD9         	movff	sprintf@sp,fsr2l
  8485  00F304  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  8486  00F308  0E0E               	movlw	(high __ramtop+-1)
  8487  00F30A  64F7               	cpfsgt	tblptrh,c
  8488  00F30C  D003               	bra	u4327
  8489  00F30E  0008               	tblrd		*
  8490  00F310  50F5               	movf	tablat,w,c
  8491  00F312  D005               	bra	u4320
  8492  00F314                     u4327:
  8493  00F314  CFF6 FFE9          	movff	tblptrl,fsr0l
  8494  00F318  CFF7 FFEA          	movff	tblptrh,fsr0h
  8495  00F31C  50EF               	movf	indf0,w,c
  8496  00F31E                     u4320:
  8497  00F31E  6EDF               	movwf	indf2,c
  8498  00F320  0100               	movlb	0	; () banked
  8499  00F322  4B63               	infsnz	sprintf@cp& (0+255),f,b
  8500  00F324  2B64               	incf	(sprintf@cp+1)& (0+255),f,b
  8501                           
  8502                           ; BSR set to: 0
  8503  00F326  4A43               	infsnz	sprintf@sp,f,c
  8504  00F328  2A44               	incf	sprintf@sp+1,f,c
  8505  00F32A  D000               	goto	l4154
  8506  00F32C                     l4154:
  8507                           
  8508                           ; BSR set to: 0
  8509  00F32C  0100               	movlb	0	; () banked
  8510  00F32E  0767               	decf	sprintf@len& (0+255),f,b
  8511  00F330  A0D8               	btfss	status,0,c
  8512  00F332  0768               	decf	(sprintf@len+1)& (0+255),f,b
  8513  00F334  0100               	movlb	0	; () banked
  8514  00F336  2967               	incf	sprintf@len& (0+255),w,b
  8515  00F338  E1DE               	bnz	l4148
  8516  00F33A  0100               	movlb	0	; () banked
  8517  00F33C  2968               	incf	(sprintf@len+1)& (0+255),w,b
  8518  00F33E  B4D8               	btfsc	status,2,c
  8519  00F340  EFFC  F07E         	goto	l4432
  8520  00F344  D7D8               	goto	l4148
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;doprnt.c: 813: continue;
  8524                           
  8525                           ;doprnt.c: 802: default:
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;doprnt.c: 774: continue;
  8529  00F346  EFFC  F07E         	goto	l4432
  8530  00F34A                     l4156:
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;doprnt.c: 818: flag |= 0xC0;
  8534  00F34A  0EC0               	movlw	192
  8535  00F34C  0100               	movlb	0	; () banked
  8536  00F34E  1373               	iorwf	sprintf@flag& (0+255),f,b
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;doprnt.c: 822: }
  8540                           
  8541                           ;doprnt.c: 819: break;
  8542  00F350  D01A               	goto	l4162
  8543  00F352                     l4160:
  8544  00F352  C045  FFF6         	movff	sprintf@f,tblptrl
  8545  00F356  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8546  00F35A  4A45               	infsnz	sprintf@f,f,c
  8547  00F35C  2A46               	incf	sprintf@f+1,f,c
  8548  00F35E                     	if	0	;tblptru may be non-zero
  8549  00F35E                     	endif
  8550  00F35E                     	if	0	;tblptru may be non-zero
  8551  00F35E                     	endif
  8552  00F35E  0008               	tblrd		*
  8553  00F360  CFF5 F07C          	movff	tablat,sprintf@c
  8554  00F364  0100               	movlb	0	; () banked
  8555  00F366  517C               	movf	sprintf@c& (0+255),w,b
  8556                           
  8557                           ; Switch size 1, requested type "space"
  8558                           ; Number of cases is 4, Range of values is 0 to 117
  8559                           ; switch strategies available:
  8560                           ; Name         Instructions Cycles
  8561                           ; simple_byte           13     7 (average)
  8562                           ;	Chosen strategy is simple_byte
  8563  00F368  0A00               	xorlw	0	; case 0
  8564  00F36A  B4D8               	btfsc	status,2,c
  8565  00F36C  EF0C  F07F         	goto	l4434
  8566  00F370  0A66               	xorlw	102	; case 102
  8567  00F372  B4D8               	btfsc	status,2,c
  8568  00F374  D738               	goto	l4114
  8569  00F376  0A15               	xorlw	21	; case 115
  8570  00F378  B4D8               	btfsc	status,2,c
  8571  00F37A  D738               	goto	l4116
  8572  00F37C  0A06               	xorlw	6	; case 117
  8573  00F37E  B4D8               	btfsc	status,2,c
  8574  00F380  D7E4               	goto	l4156
  8575  00F382  EFFC  F07E         	goto	l4432
  8576  00F386                     l4162:
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;doprnt.c: 825: if(flag & (0x700)) {
  8580  00F386  0E07               	movlw	7
  8581  00F388  0100               	movlb	0	; () banked
  8582  00F38A  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  8583  00F38C  B4D8               	btfsc	status,2,c
  8584  00F38E  D3B0               	goto	l4342
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;doprnt.c: 827: if(flag & 0x1000)
  8588  00F390  0100               	movlb	0	; () banked
  8589  00F392  A974               	btfss	(sprintf@flag+1)& (0+255),4,b
  8590  00F394  D006               	goto	l4168
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;doprnt.c: 829: prec = 6;
  8594  00F396  0E00               	movlw	0
  8595  00F398  0100               	movlb	0	; () banked
  8596  00F39A  6F7B               	movwf	(sprintf@prec+1)& (0+255),b
  8597  00F39C  0E06               	movlw	6
  8598  00F39E  6F7A               	movwf	sprintf@prec& (0+255),b
  8599  00F3A0  D000               	goto	l4168
  8600  00F3A2                     l4168:
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  8604  00F3A2  C065  FFD9         	movff	sprintf@ap,fsr2l
  8605  00F3A6  C066  FFDA         	movff	sprintf@ap+1,fsr2h
  8606  00F3AA  CFDE F075          	movff	postinc2,sprintf@fval
  8607  00F3AE  CFDE F076          	movff	postinc2,sprintf@fval+1
  8608  00F3B2  CFDD F077          	movff	postdec2,sprintf@fval+2
  8609                           
  8610                           ; BSR set to: 0
  8611  00F3B6  0E03               	movlw	3
  8612  00F3B8  0100               	movlb	0	; () banked
  8613  00F3BA  2765               	addwf	sprintf@ap& (0+255),f,b
  8614  00F3BC  0E00               	movlw	0
  8615  00F3BE  2366               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;doprnt.c: 831: if(fval < 0.0) {
  8619  00F3C0  0100               	movlb	0	; () banked
  8620  00F3C2  AF77               	btfss	(sprintf@fval+2)& (0+255),7,b
  8621  00F3C4  D012               	goto	l4178
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;doprnt.c: 832: fval = -fval;
  8625  00F3C6  C075  F001         	movff	sprintf@fval,___ftneg@f1
  8626  00F3CA  C076  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  8627  00F3CE  C077  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  8628  00F3D2  EC6F  F05F         	call	___ftneg	;wreg free
  8629  00F3D6  C001  F075         	movff	?___ftneg,sprintf@fval
  8630  00F3DA  C002  F076         	movff	?___ftneg+1,sprintf@fval+1
  8631  00F3DE  C003  F077         	movff	?___ftneg+2,sprintf@fval+2
  8632                           
  8633                           ;doprnt.c: 833: flag |= 0x03;
  8634  00F3E2  0E03               	movlw	3
  8635  00F3E4  0100               	movlb	0	; () banked
  8636  00F3E6  1373               	iorwf	sprintf@flag& (0+255),f,b
  8637  00F3E8  D000               	goto	l4178
  8638  00F3EA                     l4178:
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;doprnt.c: 834: }
  8642                           ;doprnt.c: 835: exp = 0;
  8643  00F3EA  0E00               	movlw	0
  8644  00F3EC  0100               	movlb	0	; () banked
  8645  00F3EE  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  8646  00F3F0  0E00               	movlw	0
  8647  00F3F2  6F71               	movwf	sprintf@exp& (0+255),b
  8648                           
  8649                           ; BSR set to: 0
  8650                           ;doprnt.c: 836: if( fval!=0) {
  8651  00F3F4  0100               	movlb	0	; () banked
  8652  00F3F6  5175               	movf	sprintf@fval& (0+255),w,b
  8653  00F3F8  0100               	movlb	0	; () banked
  8654  00F3FA  1176               	iorwf	(sprintf@fval+1)& (0+255),w,b
  8655  00F3FC  0100               	movlb	0	; () banked
  8656  00F3FE  1177               	iorwf	(sprintf@fval+2)& (0+255),w,b
  8657  00F400  B4D8               	btfsc	status,2,c
  8658  00F402  D08D               	goto	l4206
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  8662  00F404  0E82               	movlw	130
  8663  00F406  6E4F               	movwf	??_sprintf& (0+255),c
  8664  00F408  0EFF               	movlw	255
  8665  00F40A  6E50               	movwf	(??_sprintf+1)& (0+255),c
  8666  00F40C  C075  F051         	movff	sprintf@fval,??_sprintf+2
  8667  00F410  C076  F052         	movff	sprintf@fval+1,??_sprintf+3
  8668  00F414  C077  F053         	movff	sprintf@fval+2,??_sprintf+4
  8669  00F418  C078  F054         	movff	sprintf@fval+3,??_sprintf+5
  8670  00F41C  0E10               	movlw	16
  8671  00F41E  D005               	goto	u4380
  8672  00F420                     u4385:
  8673  00F420  90D8               	bcf	status,0,c
  8674  00F422  3254               	rrcf	??_sprintf+5,f,c
  8675  00F424  3253               	rrcf	??_sprintf+4,f,c
  8676  00F426  3252               	rrcf	??_sprintf+3,f,c
  8677  00F428  3251               	rrcf	??_sprintf+2,f,c
  8678  00F42A                     u4380:
  8679  00F42A  2EE8               	decfsz	wreg,f,c
  8680  00F42C  D7F9               	goto	u4385
  8681  00F42E  5051               	movf	??_sprintf+2,w,c
  8682  00F430  244F               	addwf	??_sprintf,w,c
  8683  00F432  0100               	movlb	0	; () banked
  8684  00F434  6F71               	movwf	sprintf@exp& (0+255),b
  8685  00F436  0E00               	movlw	0
  8686  00F438  2050               	addwfc	??_sprintf+1,w,c
  8687  00F43A  0100               	movlb	0	; () banked
  8688  00F43C  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;doprnt.c: 838: exp--;
  8692  00F43E  0100               	movlb	0	; () banked
  8693  00F440  0771               	decf	sprintf@exp& (0+255),f,b
  8694  00F442  A0D8               	btfss	status,0,c
  8695  00F444  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;doprnt.c: 839: exp *= 3;
  8699  00F446  C071  F00F         	movff	sprintf@exp,___wmul@multiplier
  8700  00F44A  C072  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  8701  00F44E  0E00               	movlw	0
  8702  00F450  6E12               	movwf	___wmul@multiplicand+1,c
  8703  00F452  0E03               	movlw	3
  8704  00F454  6E11               	movwf	___wmul@multiplicand,c
  8705  00F456  EC94  F05F         	call	___wmul	;wreg free
  8706  00F45A  C00F  F071         	movff	?___wmul,sprintf@exp
  8707  00F45E  C010  F072         	movff	?___wmul+1,sprintf@exp+1
  8708                           
  8709                           ;doprnt.c: 840: exp /= 10;
  8710  00F462  C071  F007         	movff	sprintf@exp,___awdiv@dividend
  8711  00F466  C072  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  8712  00F46A  0E00               	movlw	0
  8713  00F46C  6E0A               	movwf	___awdiv@divisor+1,c
  8714  00F46E  0E0A               	movlw	10
  8715  00F470  6E09               	movwf	___awdiv@divisor,c
  8716  00F472  EC60  F062         	call	___awdiv	;wreg free
  8717  00F476  C007  F071         	movff	?___awdiv,sprintf@exp
  8718  00F47A  C008  F072         	movff	?___awdiv+1,sprintf@exp+1
  8719                           
  8720                           ;doprnt.c: 841: if(exp < 0)
  8721  00F47E  0100               	movlb	0	; () banked
  8722  00F480  AF72               	btfss	(sprintf@exp+1)& (0+255),7,b
  8723  00F482  D005               	goto	l4194
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;doprnt.c: 842: exp--;
  8727  00F484  0100               	movlb	0	; () banked
  8728  00F486  0771               	decf	sprintf@exp& (0+255),f,b
  8729  00F488  A0D8               	btfss	status,0,c
  8730  00F48A  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  8731  00F48C  D000               	goto	l4194
  8732  00F48E                     l4194:
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  8736  00F48E  0100               	movlb	0	; () banked
  8737  00F490  5171               	movf	sprintf@exp& (0+255),w,b
  8738  00F492  0800               	sublw	0
  8739  00F494  EC38  F076         	call	_scale
  8740  00F498  C024  F06D         	movff	?_scale,sprintf@tmpval
  8741  00F49C  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  8742  00F4A0  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  8743                           
  8744                           ;doprnt.c: 847: tmpval.integ *= fval;
  8745  00F4A4  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  8746  00F4A8  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  8747  00F4AC  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  8748  00F4B0  C075  F018         	movff	sprintf@fval,___ftmul@f2
  8749  00F4B4  C076  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  8750  00F4B8  C077  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  8751  00F4BC  EC8B  F065         	call	___ftmul	;wreg free
  8752  00F4C0  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  8753  00F4C4  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  8754  00F4C8  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  8755                           
  8756                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  8757  00F4CC  C06D  F03A         	movff	sprintf@tmpval,___ftge@ff1
  8758  00F4D0  C06E  F03B         	movff	sprintf@tmpval+1,___ftge@ff1+1
  8759  00F4D4  C06F  F03C         	movff	sprintf@tmpval+2,___ftge@ff1+2
  8760  00F4D8  0E00               	movlw	0
  8761  00F4DA  6E3D               	movwf	___ftge@ff2,c
  8762  00F4DC  0E80               	movlw	128
  8763  00F4DE  6E3E               	movwf	___ftge@ff2+1,c
  8764  00F4E0  0E3F               	movlw	63
  8765  00F4E2  6E3F               	movwf	___ftge@ff2+2,c
  8766  00F4E4  EC15  F062         	call	___ftge	;wreg free
  8767  00F4E8  B0D8               	btfsc	status,0,c
  8768  00F4EA  D005               	goto	l4202
  8769                           
  8770                           ;doprnt.c: 849: exp--;
  8771  00F4EC  0100               	movlb	0	; () banked
  8772  00F4EE  0771               	decf	sprintf@exp& (0+255),f,b
  8773  00F4F0  A0D8               	btfss	status,0,c
  8774  00F4F2  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  8775  00F4F4  D014               	goto	l4206
  8776  00F4F6                     l4202:
  8777                           
  8778                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  8779  00F4F6  C06D  F03A         	movff	sprintf@tmpval,___ftge@ff1
  8780  00F4FA  C06E  F03B         	movff	sprintf@tmpval+1,___ftge@ff1+1
  8781  00F4FE  C06F  F03C         	movff	sprintf@tmpval+2,___ftge@ff1+2
  8782  00F502  0E00               	movlw	0
  8783  00F504  6E3D               	movwf	___ftge@ff2,c
  8784  00F506  0E20               	movlw	32
  8785  00F508  6E3E               	movwf	___ftge@ff2+1,c
  8786  00F50A  0E41               	movlw	65
  8787  00F50C  6E3F               	movwf	___ftge@ff2+2,c
  8788  00F50E  EC15  F062         	call	___ftge	;wreg free
  8789  00F512  A0D8               	btfss	status,0,c
  8790  00F514  D004               	goto	l4206
  8791                           
  8792                           ;doprnt.c: 851: exp++;
  8793  00F516  0100               	movlb	0	; () banked
  8794  00F518  4B71               	infsnz	sprintf@exp& (0+255),f,b
  8795  00F51A  2B72               	incf	(sprintf@exp+1)& (0+255),f,b
  8796                           
  8797                           ; BSR set to: 0
  8798                           
  8799                           ; BSR set to: 0
  8800  00F51C  D000               	goto	l4206
  8801  00F51E                     l4206:
  8802                           
  8803                           ;doprnt.c: 852: }
  8804                           ;doprnt.c: 1112: if(prec <= 12)
  8805  00F51E  0100               	movlb	0	; () banked
  8806  00F520  BF7B               	btfsc	(sprintf@prec+1)& (0+255),7,b
  8807  00F522  D008               	goto	l4208
  8808  00F524  0100               	movlb	0	; () banked
  8809  00F526  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  8810  00F528  E11E               	bnz	l4210
  8811  00F52A  0E0D               	movlw	13
  8812  00F52C  0100               	movlb	0	; () banked
  8813  00F52E  5D7A               	subwf	sprintf@prec& (0+255),w,b
  8814  00F530  B0D8               	btfsc	status,0,c
  8815  00F532  D019               	goto	l4210
  8816  00F534                     l4208:
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;doprnt.c: 1113: fval += fround(prec);
  8820  00F534  C075  F02E         	movff	sprintf@fval,___ftadd@f1
  8821  00F538  C076  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  8822  00F53C  C077  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  8823  00F540  0100               	movlb	0	; () banked
  8824  00F542  517A               	movf	sprintf@prec& (0+255),w,b
  8825  00F544  EC28  F06F         	call	_fround
  8826  00F548  C024  F031         	movff	?_fround,___ftadd@f2
  8827  00F54C  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  8828  00F550  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  8829  00F554  EC46  F06E         	call	___ftadd	;wreg free
  8830  00F558  C02E  F075         	movff	?___ftadd,sprintf@fval
  8831  00F55C  C02F  F076         	movff	?___ftadd+1,sprintf@fval+1
  8832  00F560  C030  F077         	movff	?___ftadd+2,sprintf@fval+2
  8833  00F564  D000               	goto	l4210
  8834  00F566                     l4210:
  8835                           
  8836                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  8837  00F566  0100               	movlb	0	; () banked
  8838  00F568  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  8839  00F56A  D008               	goto	l4212
  8840  00F56C  0100               	movlb	0	; () banked
  8841  00F56E  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  8842  00F570  E128               	bnz	l4218
  8843  00F572  0E0A               	movlw	10
  8844  00F574  0100               	movlb	0	; () banked
  8845  00F576  5D71               	subwf	sprintf@exp& (0+255),w,b
  8846  00F578  B0D8               	btfsc	status,0,c
  8847  00F57A  D023               	goto	l4218
  8848  00F57C                     l4212:
  8849                           
  8850                           ; BSR set to: 0
  8851  00F57C  0100               	movlb	0	; () banked
  8852  00F57E  5175               	movf	sprintf@fval& (0+255),w,b
  8853  00F580  0100               	movlb	0	; () banked
  8854  00F582  1176               	iorwf	(sprintf@fval+1)& (0+255),w,b
  8855  00F584  0100               	movlb	0	; () banked
  8856  00F586  1177               	iorwf	(sprintf@fval+2)& (0+255),w,b
  8857  00F588  B4D8               	btfsc	status,2,c
  8858  00F58A  D077               	goto	l4232
  8859                           
  8860                           ; BSR set to: 0
  8861  00F58C  C075  F02B         	movff	sprintf@fval,___fttol@f1
  8862  00F590  C076  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  8863  00F594  C077  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  8864  00F598  EC0A  F065         	call	___fttol	;wreg free
  8865  00F59C  502B               	movf	?___fttol,w,c
  8866  00F59E  102C               	iorwf	?___fttol+1,w,c
  8867  00F5A0  102D               	iorwf	?___fttol+2,w,c
  8868  00F5A2  102E               	iorwf	?___fttol+3,w,c
  8869  00F5A4  A4D8               	btfss	status,2,c
  8870  00F5A6  D069               	goto	l4232
  8871  00F5A8  0100               	movlb	0	; () banked
  8872  00F5AA  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  8873  00F5AC  D066               	goto	l4232
  8874  00F5AE  0100               	movlb	0	; () banked
  8875  00F5B0  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  8876  00F5B2  E107               	bnz	l4218
  8877  00F5B4  0E02               	movlw	2
  8878  00F5B6  0100               	movlb	0	; () banked
  8879  00F5B8  5D71               	subwf	sprintf@exp& (0+255),w,b
  8880  00F5BA  B0D8               	btfsc	status,0,c
  8881  00F5BC  D002               	goto	l4218
  8882  00F5BE  D05D               	goto	l4232
  8883  00F5C0  D000               	goto	l4218
  8884  00F5C2                     l4218:
  8885                           
  8886                           ; BSR set to: 0
  8887                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  8888  00F5C2  C06D  F03A         	movff	sprintf@tmpval,___ftge@ff1
  8889  00F5C6  C06E  F03B         	movff	sprintf@tmpval+1,___ftge@ff1+1
  8890  00F5CA  C06F  F03C         	movff	sprintf@tmpval+2,___ftge@ff1+2
  8891  00F5CE  0E70               	movlw	112
  8892  00F5D0  6E3D               	movwf	___ftge@ff2,c
  8893  00F5D2  0E89               	movlw	137
  8894  00F5D4  6E3E               	movwf	___ftge@ff2+1,c
  8895  00F5D6  0E40               	movlw	64
  8896  00F5D8  6E3F               	movwf	___ftge@ff2+2,c
  8897  00F5DA  EC15  F062         	call	___ftge	;wreg free
  8898  00F5DE  B0D8               	btfsc	status,0,c
  8899  00F5E0  D003               	goto	l4222
  8900                           
  8901                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  8902  00F5E2  0100               	movlb	0	; () banked
  8903  00F5E4  0EF7               	movlw	247
  8904  00F5E6  D002               	goto	L2
  8905  00F5E8                     l4222:
  8906                           
  8907                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  8908  00F5E8  0100               	movlb	0	; () banked
  8909  00F5EA  0EF8               	movlw	248
  8910  00F5EC                     L2:
  8911  00F5EC  2771               	addwf	sprintf@exp& (0+255),f,b
  8912  00F5EE  0EFF               	movlw	255
  8913  00F5F0  2372               	addwfc	(sprintf@exp+1)& (0+255),f,b
  8914  00F5F2  D000               	goto	l4224
  8915  00F5F4                     l4224:
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;doprnt.c: 1124: }
  8919                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  8920  00F5F4  0100               	movlb	0	; () banked
  8921  00F5F6  5171               	movf	sprintf@exp& (0+255),w,b
  8922  00F5F8  EC38  F076         	call	_scale
  8923  00F5FC  C024  F06D         	movff	?_scale,sprintf@tmpval
  8924  00F600  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  8925  00F604  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  8926                           
  8927                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  8928  00F608  D017               	goto	l4228
  8929  00F60A  C075  F001         	movff	sprintf@fval,__div_to_l_@f1
  8930  00F60E  C076  F002         	movff	sprintf@fval+1,__div_to_l_@f1+1
  8931  00F612  C077  F003         	movff	sprintf@fval+2,__div_to_l_@f1+2
  8932  00F616  C06D  F004         	movff	sprintf@tmpval,__div_to_l_@f2
  8933  00F61A  C06E  F005         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  8934  00F61E  C06F  F006         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  8935  00F622  EC78  F069         	call	__div_to_l_	;wreg free
  8936  00F626  C001  F069         	movff	?__div_to_l_,sprintf@val
  8937  00F62A  C002  F06A         	movff	?__div_to_l_+1,sprintf@val+1
  8938  00F62E  C003  F06B         	movff	?__div_to_l_+2,sprintf@val+2
  8939  00F632  C004  F06C         	movff	?__div_to_l_+3,sprintf@val+3
  8940  00F636  D017               	goto	l4230
  8941  00F638                     l4228:
  8942  00F638  C075  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  8943  00F63C  C076  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  8944  00F640  C077  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  8945  00F644  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  8946  00F648  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  8947  00F64C  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  8948  00F650  EC12  F06A         	call	__tdiv_to_l_	;wreg free
  8949  00F654  C001  F069         	movff	?__tdiv_to_l_,sprintf@val
  8950  00F658  C002  F06A         	movff	?__tdiv_to_l_+1,sprintf@val+1
  8951  00F65C  C003  F06B         	movff	?__tdiv_to_l_+2,sprintf@val+2
  8952  00F660  C004  F06C         	movff	?__tdiv_to_l_+3,sprintf@val+3
  8953  00F664  D000               	goto	l4230
  8954  00F666                     l4230:
  8955                           
  8956                           ;doprnt.c: 1129: fval = 0.0;
  8957  00F666  0E00               	movlw	0
  8958  00F668  0100               	movlb	0	; () banked
  8959  00F66A  6F75               	movwf	sprintf@fval& (0+255),b
  8960  00F66C  0E00               	movlw	0
  8961  00F66E  0100               	movlb	0	; () banked
  8962  00F670  6F76               	movwf	(sprintf@fval+1)& (0+255),b
  8963  00F672  0E00               	movlw	0
  8964  00F674  0100               	movlb	0	; () banked
  8965  00F676  6F77               	movwf	(sprintf@fval+2)& (0+255),b
  8966                           
  8967                           ;doprnt.c: 1130: } else {
  8968  00F678  D034               	goto	l4236
  8969  00F67A                     l4232:
  8970                           
  8971                           ;doprnt.c: 1131: val = (unsigned long)fval;
  8972  00F67A  C075  F02B         	movff	sprintf@fval,___fttol@f1
  8973  00F67E  C076  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  8974  00F682  C077  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  8975  00F686  EC0A  F065         	call	___fttol	;wreg free
  8976  00F68A  C02B  F069         	movff	?___fttol,sprintf@val
  8977  00F68E  C02C  F06A         	movff	?___fttol+1,sprintf@val+1
  8978  00F692  C02D  F06B         	movff	?___fttol+2,sprintf@val+2
  8979  00F696  C02E  F06C         	movff	?___fttol+3,sprintf@val+3
  8980                           
  8981                           ;doprnt.c: 1132: fval -= (double)val;
  8982  00F69A  C075  F03A         	movff	sprintf@fval,___ftsub@f1
  8983  00F69E  C076  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  8984  00F6A2  C077  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  8985  00F6A6  C069  F009         	movff	sprintf@val,___lltoft@c
  8986  00F6AA  C06A  F00A         	movff	sprintf@val+1,___lltoft@c+1
  8987  00F6AE  C06B  F00B         	movff	sprintf@val+2,___lltoft@c+2
  8988  00F6B2  C06C  F00C         	movff	sprintf@val+3,___lltoft@c+3
  8989  00F6B6  EC1F  F060         	call	___lltoft	;wreg free
  8990  00F6BA  C009  F03D         	movff	?___lltoft,___ftsub@f2
  8991  00F6BE  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  8992  00F6C2  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  8993  00F6C6  ECFD  F05F         	call	___ftsub	;wreg free
  8994  00F6CA  C03A  F075         	movff	?___ftsub,sprintf@fval
  8995  00F6CE  C03B  F076         	movff	?___ftsub+1,sprintf@fval+1
  8996  00F6D2  C03C  F077         	movff	?___ftsub+2,sprintf@fval+2
  8997                           
  8998                           ;doprnt.c: 1133: exp = 0;
  8999  00F6D6  0E00               	movlw	0
  9000  00F6D8  0100               	movlb	0	; () banked
  9001  00F6DA  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  9002  00F6DC  0E00               	movlw	0
  9003  00F6DE  6F71               	movwf	sprintf@exp& (0+255),b
  9004  00F6E0  D000               	goto	l4236
  9005  00F6E2                     l4236:
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;doprnt.c: 1134: }
  9009                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  9010  00F6E2  0E01               	movlw	1
  9011  00F6E4  0100               	movlb	0	; () banked
  9012  00F6E6  6F7C               	movwf	sprintf@c& (0+255),b
  9013  00F6E8                     l4238:
  9014                           
  9015                           ; BSR set to: 0
  9016  00F6E8  0E0A               	movlw	10
  9017  00F6EA  0100               	movlb	0	; () banked
  9018  00F6EC  197C               	xorwf	sprintf@c& (0+255),w,b
  9019  00F6EE  B4D8               	btfsc	status,2,c
  9020  00F6F0  D022               	goto	l4250
  9021  00F6F2  D001               	goto	l4242
  9022                           
  9023                           ; BSR set to: 0
  9024  00F6F4  D020               	goto	l4250
  9025  00F6F6                     l4242:
  9026                           
  9027                           ; BSR set to: 0
  9028                           ;doprnt.c: 1137: if(val < dpowers[c])
  9029  00F6F6  0100               	movlb	0	; () banked
  9030  00F6F8  517C               	movf	sprintf@c& (0+255),w,b
  9031  00F6FA  0D04               	mullw	4
  9032  00F6FC  0E29               	movlw	low _dpowers
  9033  00F6FE  24F3               	addwf	prodl,w,c
  9034  00F700  6EF6               	movwf	tblptrl,c
  9035  00F702  0EFE               	movlw	high _dpowers
  9036  00F704  20F4               	addwfc	prodh,w,c
  9037  00F706  6EF7               	movwf	tblptrh,c
  9038  00F708                     	if	0	;There are less than 3 active tblptr bytes
  9039  00F708                     	endif
  9040  00F708  0009               	tblrd		*+
  9041  00F70A  50F5               	movf	tablat,w,c
  9042  00F70C  0100               	movlb	0	; () banked
  9043  00F70E  5D69               	subwf	sprintf@val& (0+255),w,b
  9044  00F710  0009               	tblrd		*+
  9045  00F712  50F5               	movf	tablat,w,c
  9046  00F714  0100               	movlb	0	; () banked
  9047  00F716  596A               	subwfb	(sprintf@val+1)& (0+255),w,b
  9048  00F718  0009               	tblrd		*+
  9049  00F71A  50F5               	movf	tablat,w,c
  9050  00F71C  0100               	movlb	0	; () banked
  9051  00F71E  596B               	subwfb	(sprintf@val+2)& (0+255),w,b
  9052  00F720  0009               	tblrd		*+
  9053  00F722  50F5               	movf	tablat,w,c
  9054  00F724  0100               	movlb	0	; () banked
  9055  00F726  596C               	subwfb	(sprintf@val+3)& (0+255),w,b
  9056  00F728  A0D8               	btfss	status,0,c
  9057  00F72A  D005               	goto	l4250
  9058  00F72C  D001               	goto	l4246
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;doprnt.c: 1138: break;
  9062  00F72E  D003               	goto	l4250
  9063  00F730                     l4246:
  9064                           
  9065                           ; BSR set to: 0
  9066  00F730  0100               	movlb	0	; () banked
  9067  00F732  2B7C               	incf	sprintf@c& (0+255),f,b
  9068  00F734  D7D9               	goto	l4238
  9069  00F736                     l4250:
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;doprnt.c: 1142: width -= prec + c + exp;
  9073  00F736  C07C  F04F         	movff	sprintf@c,??_sprintf
  9074  00F73A  6A50               	clrf	(??_sprintf+1)& (0+255),c
  9075  00F73C  BE4F               	btfsc	??_sprintf& (0+255),7,c
  9076  00F73E  0650               	decf	(??_sprintf+1)& (0+255),f,c
  9077  00F740  0100               	movlb	0	; () banked
  9078  00F742  517A               	movf	sprintf@prec& (0+255),w,b
  9079  00F744  264F               	addwf	??_sprintf,f,c
  9080  00F746  0100               	movlb	0	; () banked
  9081  00F748  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  9082  00F74A  2250               	addwfc	??_sprintf+1,f,c
  9083  00F74C  0100               	movlb	0	; () banked
  9084  00F74E  5171               	movf	sprintf@exp& (0+255),w,b
  9085  00F750  264F               	addwf	??_sprintf,f,c
  9086  00F752  0100               	movlb	0	; () banked
  9087  00F754  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  9088  00F756  2250               	addwfc	??_sprintf+1,f,c
  9089  00F758  504F               	movf	??_sprintf,w,c
  9090  00F75A  0100               	movlb	0	; () banked
  9091  00F75C  5F78               	subwf	sprintf@width& (0+255),f,b
  9092  00F75E  5050               	movf	??_sprintf+1,w,c
  9093  00F760  0100               	movlb	0	; () banked
  9094  00F762  5B79               	subwfb	(sprintf@width+1)& (0+255),f,b
  9095                           
  9096                           ;doprnt.c: 1143: if(
  9097                           ;doprnt.c: 1147: prec)
  9098  00F764  0100               	movlb	0	; () banked
  9099  00F766  517A               	movf	sprintf@prec& (0+255),w,b
  9100  00F768  0100               	movlb	0	; () banked
  9101  00F76A  117B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  9102  00F76C  B4D8               	btfsc	status,2,c
  9103  00F76E  D005               	goto	l4254
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;doprnt.c: 1148: width--;
  9107  00F770  0100               	movlb	0	; () banked
  9108  00F772  0778               	decf	sprintf@width& (0+255),f,b
  9109  00F774  A0D8               	btfss	status,0,c
  9110  00F776  0779               	decf	(sprintf@width+1)& (0+255),f,b
  9111  00F778  D000               	goto	l4254
  9112  00F77A                     l4254:
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;doprnt.c: 1149: if(flag & 0x03)
  9116  00F77A  0E03               	movlw	3
  9117  00F77C  0100               	movlb	0	; () banked
  9118  00F77E  1573               	andwf	sprintf@flag& (0+255),w,b
  9119  00F780  6E4F               	movwf	??_sprintf& (0+255),c
  9120  00F782  0E00               	movlw	0
  9121  00F784  0100               	movlb	0	; () banked
  9122  00F786  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  9123  00F788  6E50               	movwf	(??_sprintf+1)& (0+255),c
  9124  00F78A  504F               	movf	??_sprintf,w,c
  9125  00F78C  1050               	iorwf	??_sprintf+1,w,c
  9126  00F78E  B4D8               	btfsc	status,2,c
  9127  00F790  D005               	goto	l4258
  9128                           
  9129                           ; BSR set to: 0
  9130                           ;doprnt.c: 1150: width--;
  9131  00F792  0100               	movlb	0	; () banked
  9132  00F794  0778               	decf	sprintf@width& (0+255),f,b
  9133  00F796  A0D8               	btfss	status,0,c
  9134  00F798  0779               	decf	(sprintf@width+1)& (0+255),f,b
  9135  00F79A  D000               	goto	l4258
  9136  00F79C                     l4258:
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;doprnt.c: 1153: if(flag & 0x04) {
  9140  00F79C  0100               	movlb	0	; () banked
  9141  00F79E  A573               	btfss	sprintf@flag& (0+255),2,b
  9142  00F7A0  D03C               	goto	l4280
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;doprnt.c: 1157: if(flag & 0x03)
  9146  00F7A2  0E03               	movlw	3
  9147  00F7A4  0100               	movlb	0	; () banked
  9148  00F7A6  1573               	andwf	sprintf@flag& (0+255),w,b
  9149  00F7A8  6E4F               	movwf	??_sprintf& (0+255),c
  9150  00F7AA  0E00               	movlw	0
  9151  00F7AC  0100               	movlb	0	; () banked
  9152  00F7AE  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  9153  00F7B0  6E50               	movwf	(??_sprintf+1)& (0+255),c
  9154  00F7B2  504F               	movf	??_sprintf,w,c
  9155  00F7B4  1050               	iorwf	??_sprintf+1,w,c
  9156  00F7B6  B4D8               	btfsc	status,2,c
  9157  00F7B8  D016               	goto	l4272
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  9161  00F7BA  C043  FFD9         	movff	sprintf@sp,fsr2l
  9162  00F7BE  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9163  00F7C2  0E2D               	movlw	45
  9164  00F7C4  6EDF               	movwf	indf2,c
  9165                           
  9166                           ; BSR set to: 0
  9167  00F7C6  4A43               	infsnz	sprintf@sp,f,c
  9168  00F7C8  2A44               	incf	sprintf@sp+1,f,c
  9169                           
  9170                           ; BSR set to: 0
  9171                           ;doprnt.c: 1168: while(width > 0) {
  9172  00F7CA  D00D               	goto	l4272
  9173  00F7CC                     l4266:
  9174                           
  9175                           ; BSR set to: 0
  9176                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  9177  00F7CC  C043  FFD9         	movff	sprintf@sp,fsr2l
  9178  00F7D0  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9179  00F7D4  0E30               	movlw	48
  9180  00F7D6  6EDF               	movwf	indf2,c
  9181                           
  9182                           ; BSR set to: 0
  9183  00F7D8  4A43               	infsnz	sprintf@sp,f,c
  9184  00F7DA  2A44               	incf	sprintf@sp+1,f,c
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;doprnt.c: 1170: width--;
  9188  00F7DC  0100               	movlb	0	; () banked
  9189  00F7DE  0778               	decf	sprintf@width& (0+255),f,b
  9190  00F7E0  A0D8               	btfss	status,0,c
  9191  00F7E2  0779               	decf	(sprintf@width+1)& (0+255),f,b
  9192  00F7E4  D000               	goto	l4272
  9193  00F7E6                     l4272:
  9194                           
  9195                           ; BSR set to: 0
  9196  00F7E6  0100               	movlb	0	; () banked
  9197  00F7E8  BF79               	btfsc	(sprintf@width+1)& (0+255),7,b
  9198  00F7EA  D080               	goto	l4296
  9199  00F7EC  0100               	movlb	0	; () banked
  9200  00F7EE  5179               	movf	(sprintf@width+1)& (0+255),w,b
  9201  00F7F0  E1ED               	bnz	l4266
  9202  00F7F2  0100               	movlb	0	; () banked
  9203  00F7F4  0578               	decf	sprintf@width& (0+255),w,b
  9204  00F7F6  A0D8               	btfss	status,0,c
  9205  00F7F8  D079               	goto	l4296
  9206  00F7FA  D7E8               	goto	l4266
  9207                           
  9208                           ; BSR set to: 0
  9209                           ;doprnt.c: 1171: }
  9210                           ;doprnt.c: 1173: } else
  9211  00F7FC  D077               	goto	l4296
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;doprnt.c: 1175: {
  9215                           ;doprnt.c: 1180: while(width > 0) {
  9216  00F7FE  D00D               	goto	l4280
  9217  00F800                     l4274:
  9218                           
  9219                           ; BSR set to: 0
  9220                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  9221  00F800  C043  FFD9         	movff	sprintf@sp,fsr2l
  9222  00F804  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9223  00F808  0E20               	movlw	32
  9224  00F80A  6EDF               	movwf	indf2,c
  9225                           
  9226                           ; BSR set to: 0
  9227  00F80C  4A43               	infsnz	sprintf@sp,f,c
  9228  00F80E  2A44               	incf	sprintf@sp+1,f,c
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;doprnt.c: 1182: width--;
  9232  00F810  0100               	movlb	0	; () banked
  9233  00F812  0778               	decf	sprintf@width& (0+255),f,b
  9234  00F814  A0D8               	btfss	status,0,c
  9235  00F816  0779               	decf	(sprintf@width+1)& (0+255),f,b
  9236  00F818  D000               	goto	l4280
  9237  00F81A                     l4280:
  9238                           
  9239                           ; BSR set to: 0
  9240  00F81A  0100               	movlb	0	; () banked
  9241  00F81C  BF79               	btfsc	(sprintf@width+1)& (0+255),7,b
  9242  00F81E  D007               	goto	l4282
  9243  00F820  0100               	movlb	0	; () banked
  9244  00F822  5179               	movf	(sprintf@width+1)& (0+255),w,b
  9245  00F824  E1ED               	bnz	l4274
  9246  00F826  0100               	movlb	0	; () banked
  9247  00F828  0578               	decf	sprintf@width& (0+255),w,b
  9248  00F82A  B0D8               	btfsc	status,0,c
  9249  00F82C  D7E9               	goto	l4274
  9250  00F82E                     l4282:
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;doprnt.c: 1183: }
  9254                           ;doprnt.c: 1188: if(flag & 0x03)
  9255  00F82E  0E03               	movlw	3
  9256  00F830  0100               	movlb	0	; () banked
  9257  00F832  1573               	andwf	sprintf@flag& (0+255),w,b
  9258  00F834  6E4F               	movwf	??_sprintf& (0+255),c
  9259  00F836  0E00               	movlw	0
  9260  00F838  0100               	movlb	0	; () banked
  9261  00F83A  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  9262  00F83C  6E50               	movwf	(??_sprintf+1)& (0+255),c
  9263  00F83E  504F               	movf	??_sprintf,w,c
  9264  00F840  1050               	iorwf	??_sprintf+1,w,c
  9265  00F842  B4D8               	btfsc	status,2,c
  9266  00F844  D053               	goto	l4296
  9267                           
  9268                           ; BSR set to: 0
  9269                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  9270  00F846  C043  FFD9         	movff	sprintf@sp,fsr2l
  9271  00F84A  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9272  00F84E  0E2D               	movlw	45
  9273  00F850  D04B               	goto	L3
  9274  00F852                     l4286:
  9275                           
  9276                           ; BSR set to: 0
  9277  00F852  4A43               	infsnz	sprintf@sp,f,c
  9278  00F854  2A44               	incf	sprintf@sp+1,f,c
  9279                           
  9280                           ; BSR set to: 0
  9281                           ;doprnt.c: 1195: }
  9282                           ;doprnt.c: 1196: while(c--) {
  9283                           
  9284                           ; BSR set to: 0
  9285  00F856  D04A               	goto	l4296
  9286  00F858                     l4288:
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;doprnt.c: 1200: {
  9290                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  9291  00F858  C069  F001         	movff	sprintf@val,___lldiv@dividend
  9292  00F85C  C06A  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  9293  00F860  C06B  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  9294  00F864  C06C  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  9295  00F868  0100               	movlb	0	; () banked
  9296  00F86A  517C               	movf	sprintf@c& (0+255),w,b
  9297  00F86C  0D04               	mullw	4
  9298  00F86E  0E29               	movlw	low _dpowers
  9299  00F870  24F3               	addwf	prodl,w,c
  9300  00F872  6EF6               	movwf	tblptrl,c
  9301  00F874  0EFE               	movlw	high _dpowers
  9302  00F876  20F4               	addwfc	prodh,w,c
  9303  00F878  6EF7               	movwf	tblptrh,c
  9304  00F87A                     	if	0	;There are less than 3 active tblptr bytes
  9305  00F87A                     	endif
  9306  00F87A  0009               	tblrd		*+
  9307  00F87C  CFF5 F005          	movff	tablat,___lldiv@divisor
  9308  00F880  0009               	tblrd		*+
  9309  00F882  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  9310  00F886  0009               	tblrd		*+
  9311  00F888  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  9312  00F88C  000A               	tblrd		*-
  9313  00F88E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  9314  00F892  EC3E  F061         	call	___lldiv	;wreg free
  9315  00F896  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  9316  00F89A  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  9317  00F89E  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  9318  00F8A2  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  9319                           
  9320                           ;doprnt.c: 1202: tmpval.vd %= 10;
  9321  00F8A6  C06D  F00E         	movff	sprintf@tmpval,___llmod@dividend
  9322  00F8AA  C06E  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  9323  00F8AE  C06F  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  9324  00F8B2  C070  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  9325  00F8B6  0E0A               	movlw	10
  9326  00F8B8  6E12               	movwf	___llmod@divisor,c
  9327  00F8BA  0E00               	movlw	0
  9328  00F8BC  6E13               	movwf	___llmod@divisor+1,c
  9329  00F8BE  0E00               	movlw	0
  9330  00F8C0  6E14               	movwf	___llmod@divisor+2,c
  9331  00F8C2  0E00               	movlw	0
  9332  00F8C4  6E15               	movwf	___llmod@divisor+3,c
  9333  00F8C6  EC86  F060         	call	___llmod	;wreg free
  9334  00F8CA  C00E  F06D         	movff	?___llmod,sprintf@tmpval
  9335  00F8CE  C00F  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  9336  00F8D2  C010  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  9337  00F8D6  C011  F070         	movff	?___llmod+3,sprintf@tmpval+3
  9338                           
  9339                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  9340  00F8DA  0100               	movlb	0	; () banked
  9341  00F8DC  516D               	movf	sprintf@tmpval& (0+255),w,b
  9342  00F8DE  0F30               	addlw	48
  9343  00F8E0  C043  FFD9         	movff	sprintf@sp,fsr2l
  9344  00F8E4  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9345  00F8E8                     L3:
  9346  00F8E8  6EDF               	movwf	indf2,c
  9347  00F8EA  D7B3               	goto	l4286
  9348  00F8EC                     l4296:
  9349                           
  9350                           ; BSR set to: 0
  9351  00F8EC  0100               	movlb	0	; () banked
  9352  00F8EE  077C               	decf	sprintf@c& (0+255),f,b
  9353  00F8F0  0100               	movlb	0	; () banked
  9354  00F8F2  297C               	incf	sprintf@c& (0+255),w,b
  9355  00F8F4  B4D8               	btfsc	status,2,c
  9356  00F8F6  D00F               	goto	l4304
  9357  00F8F8  D7AF               	goto	l4288
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;doprnt.c: 1204: }
  9361                           ;doprnt.c: 1206: }
  9362                           ;doprnt.c: 1207: while(exp > 0) {
  9363  00F8FA  D00D               	goto	l4304
  9364  00F8FC                     l4298:
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  9368  00F8FC  C043  FFD9         	movff	sprintf@sp,fsr2l
  9369  00F900  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9370  00F904  0E30               	movlw	48
  9371  00F906  6EDF               	movwf	indf2,c
  9372                           
  9373                           ; BSR set to: 0
  9374  00F908  4A43               	infsnz	sprintf@sp,f,c
  9375  00F90A  2A44               	incf	sprintf@sp+1,f,c
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;doprnt.c: 1209: exp--;
  9379  00F90C  0100               	movlb	0	; () banked
  9380  00F90E  0771               	decf	sprintf@exp& (0+255),f,b
  9381  00F910  A0D8               	btfss	status,0,c
  9382  00F912  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  9383  00F914  D000               	goto	l4304
  9384  00F916                     l4304:
  9385                           
  9386                           ; BSR set to: 0
  9387  00F916  0100               	movlb	0	; () banked
  9388  00F918  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  9389  00F91A  D007               	goto	l4306
  9390  00F91C  0100               	movlb	0	; () banked
  9391  00F91E  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  9392  00F920  E1ED               	bnz	l4298
  9393  00F922  0100               	movlb	0	; () banked
  9394  00F924  0571               	decf	sprintf@exp& (0+255),w,b
  9395  00F926  B0D8               	btfsc	status,0,c
  9396  00F928  D7E9               	goto	l4298
  9397  00F92A                     l4306:
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;doprnt.c: 1210: }
  9401                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  9402  00F92A  0100               	movlb	0	; () banked
  9403  00F92C  BF7B               	btfsc	(sprintf@prec+1)& (0+255),7,b
  9404  00F92E  D00C               	goto	l598
  9405  00F930  0100               	movlb	0	; () banked
  9406  00F932  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  9407  00F934  E105               	bnz	u4600
  9408  00F936  0E09               	movlw	9
  9409  00F938  0100               	movlb	0	; () banked
  9410  00F93A  5D7A               	subwf	sprintf@prec& (0+255),w,b
  9411  00F93C  A0D8               	btfss	status,0,c
  9412  00F93E  D004               	goto	l598
  9413  00F940                     u4600:
  9414                           
  9415                           ; BSR set to: 0
  9416                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  9417  00F940  0E08               	movlw	8
  9418  00F942  0100               	movlb	0	; () banked
  9419  00F944  6F7C               	movwf	sprintf@c& (0+255),b
  9420  00F946  D003               	goto	l4310
  9421  00F948                     l598:
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;doprnt.c: 1213: else
  9425                           ;doprnt.c: 1214: c = prec;
  9426  00F948  C07A  F07C         	movff	sprintf@prec,sprintf@c
  9427  00F94C  D000               	goto	l4310
  9428  00F94E                     l4310:
  9429                           
  9430                           ; BSR set to: 0
  9431                           ;doprnt.c: 1215: prec -= c;
  9432  00F94E  0100               	movlb	0	; () banked
  9433  00F950  517C               	movf	sprintf@c& (0+255),w,b
  9434  00F952  0100               	movlb	0	; () banked
  9435  00F954  5F7A               	subwf	sprintf@prec& (0+255),f,b
  9436  00F956  0E00               	movlw	0
  9437  00F958  0100               	movlb	0	; () banked
  9438  00F95A  BF7C               	btfsc	sprintf@c& (0+255),7,b
  9439  00F95C  0EFF               	movlw	255
  9440  00F95E  0100               	movlb	0	; () banked
  9441  00F960  5B7B               	subwfb	(sprintf@prec+1)& (0+255),f,b
  9442                           
  9443                           ; BSR set to: 0
  9444                           ;doprnt.c: 1219: if(c)
  9445  00F962  0100               	movlb	0	; () banked
  9446  00F964  517C               	movf	sprintf@c& (0+255),w,b
  9447  00F966  0100               	movlb	0	; () banked
  9448  00F968  B4D8               	btfsc	status,2,c
  9449  00F96A  D009               	goto	l4318
  9450                           
  9451                           ; BSR set to: 0
  9452                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  9453  00F96C  C043  FFD9         	movff	sprintf@sp,fsr2l
  9454  00F970  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9455  00F974  0E2E               	movlw	46
  9456  00F976  6EDF               	movwf	indf2,c
  9457                           
  9458                           ; BSR set to: 0
  9459  00F978  4A43               	infsnz	sprintf@sp,f,c
  9460  00F97A  2A44               	incf	sprintf@sp+1,f,c
  9461  00F97C  D000               	goto	l4318
  9462  00F97E                     l4318:
  9463                           
  9464                           ; BSR set to: 0
  9465                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9466  00F97E  0100               	movlb	0	; () banked
  9467  00F980  517C               	movf	sprintf@c& (0+255),w,b
  9468  00F982  EC38  F076         	call	_scale
  9469  00F986  C024  F060         	movff	?_scale,_sprintf$2567
  9470  00F98A  C025  F061         	movff	?_scale+1,_sprintf$2567+1
  9471  00F98E  C026  F062         	movff	?_scale+2,_sprintf$2567+2
  9472                           
  9473                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9474  00F992  C075  F018         	movff	sprintf@fval,___ftmul@f2
  9475  00F996  C076  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  9476  00F99A  C077  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  9477  00F99E  C060  F015         	movff	_sprintf$2567,___ftmul@f1
  9478  00F9A2  C061  F016         	movff	_sprintf$2567+1,___ftmul@f1+1
  9479  00F9A6  C062  F017         	movff	_sprintf$2567+2,___ftmul@f1+2
  9480  00F9AA  EC8B  F065         	call	___ftmul	;wreg free
  9481  00F9AE  C015  F02B         	movff	?___ftmul,___fttol@f1
  9482  00F9B2  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  9483  00F9B6  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  9484  00F9BA  EC0A  F065         	call	___fttol	;wreg free
  9485  00F9BE  C02B  F069         	movff	?___fttol,sprintf@val
  9486  00F9C2  C02C  F06A         	movff	?___fttol+1,sprintf@val+1
  9487  00F9C6  C02D  F06B         	movff	?___fttol+2,sprintf@val+2
  9488  00F9CA  C02E  F06C         	movff	?___fttol+3,sprintf@val+3
  9489                           
  9490                           ;doprnt.c: 1228: while(c--) {
  9491  00F9CE  D073               	goto	l4332
  9492  00F9D0                     l4322:
  9493                           
  9494                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  9495  00F9D0  C069  F001         	movff	sprintf@val,___lldiv@dividend
  9496  00F9D4  C06A  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  9497  00F9D8  C06B  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  9498  00F9DC  C06C  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  9499  00F9E0  0100               	movlb	0	; () banked
  9500  00F9E2  517C               	movf	sprintf@c& (0+255),w,b
  9501  00F9E4  0D04               	mullw	4
  9502  00F9E6  0E29               	movlw	low _dpowers
  9503  00F9E8  24F3               	addwf	prodl,w,c
  9504  00F9EA  6EF6               	movwf	tblptrl,c
  9505  00F9EC  0EFE               	movlw	high _dpowers
  9506  00F9EE  20F4               	addwfc	prodh,w,c
  9507  00F9F0  6EF7               	movwf	tblptrh,c
  9508  00F9F2                     	if	0	;There are less than 3 active tblptr bytes
  9509  00F9F2                     	endif
  9510  00F9F2  0009               	tblrd		*+
  9511  00F9F4  CFF5 F005          	movff	tablat,___lldiv@divisor
  9512  00F9F8  0009               	tblrd		*+
  9513  00F9FA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  9514  00F9FE  0009               	tblrd		*+
  9515  00FA00  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  9516  00FA04  000A               	tblrd		*-
  9517  00FA06  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  9518  00FA0A  EC3E  F061         	call	___lldiv	;wreg free
  9519  00FA0E  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  9520  00FA12  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  9521  00FA16  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  9522  00FA1A  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  9523                           
  9524                           ;doprnt.c: 1230: tmpval.vd %= 10;
  9525  00FA1E  C06D  F00E         	movff	sprintf@tmpval,___llmod@dividend
  9526  00FA22  C06E  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  9527  00FA26  C06F  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  9528  00FA2A  C070  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  9529  00FA2E  0E0A               	movlw	10
  9530  00FA30  6E12               	movwf	___llmod@divisor,c
  9531  00FA32  0E00               	movlw	0
  9532  00FA34  6E13               	movwf	___llmod@divisor+1,c
  9533  00FA36  0E00               	movlw	0
  9534  00FA38  6E14               	movwf	___llmod@divisor+2,c
  9535  00FA3A  0E00               	movlw	0
  9536  00FA3C  6E15               	movwf	___llmod@divisor+3,c
  9537  00FA3E  EC86  F060         	call	___llmod	;wreg free
  9538  00FA42  C00E  F06D         	movff	?___llmod,sprintf@tmpval
  9539  00FA46  C00F  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  9540  00FA4A  C010  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  9541  00FA4E  C011  F070         	movff	?___llmod+3,sprintf@tmpval+3
  9542                           
  9543                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  9544  00FA52  0100               	movlb	0	; () banked
  9545  00FA54  516D               	movf	sprintf@tmpval& (0+255),w,b
  9546  00FA56  0F30               	addlw	48
  9547  00FA58  C043  FFD9         	movff	sprintf@sp,fsr2l
  9548  00FA5C  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9549  00FA60  6EDF               	movwf	indf2,c
  9550                           
  9551                           ; BSR set to: 0
  9552  00FA62  4A43               	infsnz	sprintf@sp,f,c
  9553  00FA64  2A44               	incf	sprintf@sp+1,f,c
  9554                           
  9555                           ; BSR set to: 0
  9556                           ;doprnt.c: 1232: val %= dpowers[c];
  9557  00FA66  C069  F00E         	movff	sprintf@val,___llmod@dividend
  9558  00FA6A  C06A  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  9559  00FA6E  C06B  F010         	movff	sprintf@val+2,___llmod@dividend+2
  9560  00FA72  C06C  F011         	movff	sprintf@val+3,___llmod@dividend+3
  9561  00FA76  0100               	movlb	0	; () banked
  9562  00FA78  517C               	movf	sprintf@c& (0+255),w,b
  9563  00FA7A  0D04               	mullw	4
  9564  00FA7C  0E29               	movlw	low _dpowers
  9565  00FA7E  24F3               	addwf	prodl,w,c
  9566  00FA80  6EF6               	movwf	tblptrl,c
  9567  00FA82  0EFE               	movlw	high _dpowers
  9568  00FA84  20F4               	addwfc	prodh,w,c
  9569  00FA86  6EF7               	movwf	tblptrh,c
  9570  00FA88                     	if	0	;There are less than 3 active tblptr bytes
  9571  00FA88                     	endif
  9572  00FA88  0009               	tblrd		*+
  9573  00FA8A  CFF5 F012          	movff	tablat,___llmod@divisor
  9574  00FA8E  0009               	tblrd		*+
  9575  00FA90  CFF5 F013          	movff	tablat,___llmod@divisor+1
  9576  00FA94  0009               	tblrd		*+
  9577  00FA96  CFF5 F014          	movff	tablat,___llmod@divisor+2
  9578  00FA9A  000A               	tblrd		*-
  9579  00FA9C  CFF5 F015          	movff	tablat,___llmod@divisor+3
  9580  00FAA0  EC86  F060         	call	___llmod	;wreg free
  9581  00FAA4  C00E  F069         	movff	?___llmod,sprintf@val
  9582  00FAA8  C00F  F06A         	movff	?___llmod+1,sprintf@val+1
  9583  00FAAC  C010  F06B         	movff	?___llmod+2,sprintf@val+2
  9584  00FAB0  C011  F06C         	movff	?___llmod+3,sprintf@val+3
  9585  00FAB4  D000               	goto	l4332
  9586  00FAB6                     l4332:
  9587  00FAB6  0100               	movlb	0	; () banked
  9588  00FAB8  077C               	decf	sprintf@c& (0+255),f,b
  9589  00FABA  0100               	movlb	0	; () banked
  9590  00FABC  297C               	incf	sprintf@c& (0+255),w,b
  9591  00FABE  B4D8               	btfsc	status,2,c
  9592  00FAC0  D00F               	goto	l4340
  9593  00FAC2  D786               	goto	l4322
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;doprnt.c: 1233: }
  9597                           ;doprnt.c: 1235: while(prec) {
  9598  00FAC4  D00D               	goto	l4340
  9599  00FAC6                     l4334:
  9600                           
  9601                           ; BSR set to: 0
  9602                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  9603  00FAC6  C043  FFD9         	movff	sprintf@sp,fsr2l
  9604  00FACA  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9605  00FACE  0E30               	movlw	48
  9606  00FAD0  6EDF               	movwf	indf2,c
  9607                           
  9608                           ; BSR set to: 0
  9609  00FAD2  4A43               	infsnz	sprintf@sp,f,c
  9610  00FAD4  2A44               	incf	sprintf@sp+1,f,c
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;doprnt.c: 1237: prec--;
  9614  00FAD6  0100               	movlb	0	; () banked
  9615  00FAD8  077A               	decf	sprintf@prec& (0+255),f,b
  9616  00FADA  A0D8               	btfss	status,0,c
  9617  00FADC  077B               	decf	(sprintf@prec+1)& (0+255),f,b
  9618  00FADE  D000               	goto	l4340
  9619  00FAE0                     l4340:
  9620                           
  9621                           ; BSR set to: 0
  9622  00FAE0  0100               	movlb	0	; () banked
  9623  00FAE2  517A               	movf	sprintf@prec& (0+255),w,b
  9624  00FAE4  0100               	movlb	0	; () banked
  9625  00FAE6  117B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  9626  00FAE8  B4D8               	btfsc	status,2,c
  9627  00FAEA  D186               	goto	l4432
  9628  00FAEC  D7EC               	goto	l4334
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;doprnt.c: 1238: }
  9632                           ;doprnt.c: 1245: continue;
  9633  00FAEE  D184               	goto	l4432
  9634  00FAF0                     l4342:
  9635                           
  9636                           ; BSR set to: 0
  9637                           ;doprnt.c: 1246: }
  9638                           ;doprnt.c: 1273: {
  9639                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9640  00FAF0  C065  FFD9         	movff	sprintf@ap,fsr2l
  9641  00FAF4  C066  FFDA         	movff	sprintf@ap+1,fsr2h
  9642  00FAF8  CFDE F04F          	movff	postinc2,??_sprintf
  9643  00FAFC  CFDD F050          	movff	postdec2,??_sprintf+1
  9644  00FB00  C04F  F069         	movff	??_sprintf,sprintf@val
  9645  00FB04  C050  F06A         	movff	??_sprintf+1,sprintf@val+1
  9646  00FB08  0100               	movlb	0	; () banked
  9647  00FB0A  6B6B               	clrf	(sprintf@val+2)& (0+255),b
  9648  00FB0C  6B6C               	clrf	(sprintf@val+3)& (0+255),b
  9649                           
  9650                           ; BSR set to: 0
  9651  00FB0E  0E02               	movlw	2
  9652  00FB10  0100               	movlb	0	; () banked
  9653  00FB12  2765               	addwf	sprintf@ap& (0+255),f,b
  9654  00FB14  0E00               	movlw	0
  9655  00FB16  2366               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;doprnt.c: 1287: }
  9659                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  9660  00FB18  0100               	movlb	0	; () banked
  9661  00FB1A  517A               	movf	sprintf@prec& (0+255),w,b
  9662  00FB1C  0100               	movlb	0	; () banked
  9663  00FB1E  117B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  9664  00FB20  A4D8               	btfss	status,2,c
  9665  00FB22  D00E               	goto	l4352
  9666                           
  9667                           ; BSR set to: 0
  9668  00FB24  0100               	movlb	0	; () banked
  9669  00FB26  5169               	movf	sprintf@val& (0+255),w,b
  9670  00FB28  0100               	movlb	0	; () banked
  9671  00FB2A  116A               	iorwf	(sprintf@val+1)& (0+255),w,b
  9672  00FB2C  0100               	movlb	0	; () banked
  9673  00FB2E  116B               	iorwf	(sprintf@val+2)& (0+255),w,b
  9674  00FB30  0100               	movlb	0	; () banked
  9675  00FB32  116C               	iorwf	(sprintf@val+3)& (0+255),w,b
  9676  00FB34  A4D8               	btfss	status,2,c
  9677  00FB36  D004               	goto	l4352
  9678                           
  9679                           ; BSR set to: 0
  9680                           ;doprnt.c: 1291: prec++;
  9681  00FB38  0100               	movlb	0	; () banked
  9682  00FB3A  4B7A               	infsnz	sprintf@prec& (0+255),f,b
  9683  00FB3C  2B7B               	incf	(sprintf@prec+1)& (0+255),f,b
  9684  00FB3E  D000               	goto	l4352
  9685  00FB40                     l4352:
  9686                           
  9687                           ; BSR set to: 0
  9688                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9689  00FB40  0E01               	movlw	1
  9690  00FB42  0100               	movlb	0	; () banked
  9691  00FB44  6F7C               	movwf	sprintf@c& (0+255),b
  9692  00FB46                     l4354:
  9693                           
  9694                           ; BSR set to: 0
  9695  00FB46  0E0A               	movlw	10
  9696  00FB48  0100               	movlb	0	; () banked
  9697  00FB4A  197C               	xorwf	sprintf@c& (0+255),w,b
  9698  00FB4C  B4D8               	btfsc	status,2,c
  9699  00FB4E  D022               	goto	l4366
  9700  00FB50  D001               	goto	l4358
  9701                           
  9702                           ; BSR set to: 0
  9703  00FB52  D020               	goto	l4366
  9704  00FB54                     l4358:
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;doprnt.c: 1306: if(val < dpowers[c])
  9708  00FB54  0100               	movlb	0	; () banked
  9709  00FB56  517C               	movf	sprintf@c& (0+255),w,b
  9710  00FB58  0D04               	mullw	4
  9711  00FB5A  0E29               	movlw	low _dpowers
  9712  00FB5C  24F3               	addwf	prodl,w,c
  9713  00FB5E  6EF6               	movwf	tblptrl,c
  9714  00FB60  0EFE               	movlw	high _dpowers
  9715  00FB62  20F4               	addwfc	prodh,w,c
  9716  00FB64  6EF7               	movwf	tblptrh,c
  9717  00FB66                     	if	0	;There are less than 3 active tblptr bytes
  9718  00FB66                     	endif
  9719  00FB66  0009               	tblrd		*+
  9720  00FB68  50F5               	movf	tablat,w,c
  9721  00FB6A  0100               	movlb	0	; () banked
  9722  00FB6C  5D69               	subwf	sprintf@val& (0+255),w,b
  9723  00FB6E  0009               	tblrd		*+
  9724  00FB70  50F5               	movf	tablat,w,c
  9725  00FB72  0100               	movlb	0	; () banked
  9726  00FB74  596A               	subwfb	(sprintf@val+1)& (0+255),w,b
  9727  00FB76  0009               	tblrd		*+
  9728  00FB78  50F5               	movf	tablat,w,c
  9729  00FB7A  0100               	movlb	0	; () banked
  9730  00FB7C  596B               	subwfb	(sprintf@val+2)& (0+255),w,b
  9731  00FB7E  0009               	tblrd		*+
  9732  00FB80  50F5               	movf	tablat,w,c
  9733  00FB82  0100               	movlb	0	; () banked
  9734  00FB84  596C               	subwfb	(sprintf@val+3)& (0+255),w,b
  9735  00FB86  A0D8               	btfss	status,0,c
  9736  00FB88  D005               	goto	l4366
  9737  00FB8A  D001               	goto	l4362
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;doprnt.c: 1307: break;
  9741  00FB8C  D003               	goto	l4366
  9742  00FB8E                     l4362:
  9743                           
  9744                           ; BSR set to: 0
  9745  00FB8E  0100               	movlb	0	; () banked
  9746  00FB90  2B7C               	incf	sprintf@c& (0+255),f,b
  9747  00FB92  D7D9               	goto	l4354
  9748  00FB94                     l4366:
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;doprnt.c: 1339: if(c < prec)
  9752  00FB94  0E80               	movlw	128
  9753  00FB96  0100               	movlb	0	; () banked
  9754  00FB98  BF7C               	btfsc	sprintf@c& (0+255),7,b
  9755  00FB9A  0E7F               	movlw	127
  9756  00FB9C  6E4F               	movwf	??_sprintf& (0+255),c
  9757  00FB9E  0100               	movlb	0	; () banked
  9758  00FBA0  517A               	movf	sprintf@prec& (0+255),w,b
  9759  00FBA2  0100               	movlb	0	; () banked
  9760  00FBA4  5D7C               	subwf	sprintf@c& (0+255),w,b
  9761  00FBA6  0100               	movlb	0	; () banked
  9762  00FBA8  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  9763  00FBAA  0A80               	xorlw	128
  9764  00FBAC  584F               	subwfb	??_sprintf& (0+255),w,c
  9765  00FBAE  B0D8               	btfsc	status,0,c
  9766  00FBB0  D003               	goto	l4370
  9767                           
  9768                           ; BSR set to: 0
  9769                           ;doprnt.c: 1340: c = prec;
  9770  00FBB2  C07A  F07C         	movff	sprintf@prec,sprintf@c
  9771  00FBB6  D017               	goto	l4374
  9772  00FBB8                     l4370:
  9773                           
  9774                           ; BSR set to: 0
  9775                           ;doprnt.c: 1341: else if(prec < c)
  9776  00FBB8  0100               	movlb	0	; () banked
  9777  00FBBA  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  9778  00FBBC  0A80               	xorlw	128
  9779  00FBBE  6E4F               	movwf	??_sprintf& (0+255),c
  9780  00FBC0  0100               	movlb	0	; () banked
  9781  00FBC2  517C               	movf	sprintf@c& (0+255),w,b
  9782  00FBC4  0100               	movlb	0	; () banked
  9783  00FBC6  5D7A               	subwf	sprintf@prec& (0+255),w,b
  9784  00FBC8  0E80               	movlw	128
  9785  00FBCA  0100               	movlb	0	; () banked
  9786  00FBCC  BF7C               	btfsc	sprintf@c& (0+255),7,b
  9787  00FBCE  0E7F               	movlw	127
  9788  00FBD0  584F               	subwfb	??_sprintf& (0+255),w,c
  9789  00FBD2  B0D8               	btfsc	status,0,c
  9790  00FBD4  D008               	goto	l4374
  9791                           
  9792                           ; BSR set to: 0
  9793                           ;doprnt.c: 1342: prec = c;
  9794  00FBD6  0100               	movlb	0	; () banked
  9795  00FBD8  517C               	movf	sprintf@c& (0+255),w,b
  9796  00FBDA  0100               	movlb	0	; () banked
  9797  00FBDC  6F7A               	movwf	sprintf@prec& (0+255),b
  9798  00FBDE  6B7B               	clrf	(sprintf@prec+1)& (0+255),b
  9799  00FBE0  BF7A               	btfsc	sprintf@prec& (0+255),7,b
  9800  00FBE2  077B               	decf	(sprintf@prec+1)& (0+255),f,b
  9801                           
  9802                           ; BSR set to: 0
  9803  00FBE4  D000               	goto	l4374
  9804  00FBE6                     l4374:
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9808  00FBE6  0100               	movlb	0	; () banked
  9809  00FBE8  5178               	movf	sprintf@width& (0+255),w,b
  9810  00FBEA  0100               	movlb	0	; () banked
  9811  00FBEC  1179               	iorwf	(sprintf@width+1)& (0+255),w,b
  9812  00FBEE  B4D8               	btfsc	status,2,c
  9813  00FBF0  D011               	goto	l4380
  9814                           
  9815                           ; BSR set to: 0
  9816  00FBF2  0E03               	movlw	3
  9817  00FBF4  0100               	movlb	0	; () banked
  9818  00FBF6  1573               	andwf	sprintf@flag& (0+255),w,b
  9819  00FBF8  6E4F               	movwf	??_sprintf& (0+255),c
  9820  00FBFA  0E00               	movlw	0
  9821  00FBFC  0100               	movlb	0	; () banked
  9822  00FBFE  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  9823  00FC00  6E50               	movwf	(??_sprintf+1)& (0+255),c
  9824  00FC02  504F               	movf	??_sprintf,w,c
  9825  00FC04  1050               	iorwf	??_sprintf+1,w,c
  9826  00FC06  B4D8               	btfsc	status,2,c
  9827  00FC08  D005               	goto	l4380
  9828                           
  9829                           ; BSR set to: 0
  9830                           ;doprnt.c: 1346: width--;
  9831  00FC0A  0100               	movlb	0	; () banked
  9832  00FC0C  0778               	decf	sprintf@width& (0+255),f,b
  9833  00FC0E  A0D8               	btfss	status,0,c
  9834  00FC10  0779               	decf	(sprintf@width+1)& (0+255),f,b
  9835  00FC12  D000               	goto	l4380
  9836  00FC14                     l4380:
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;doprnt.c: 1348: if(flag & 0x4000) {
  9840  00FC14  0100               	movlb	0	; () banked
  9841  00FC16  AD74               	btfss	(sprintf@flag+1)& (0+255),6,b
  9842  00FC18  D01D               	goto	l4388
  9843                           
  9844                           ; BSR set to: 0
  9845                           ;doprnt.c: 1349: if(width > prec)
  9846  00FC1A  0100               	movlb	0	; () banked
  9847  00FC1C  5178               	movf	sprintf@width& (0+255),w,b
  9848  00FC1E  0100               	movlb	0	; () banked
  9849  00FC20  5D7A               	subwf	sprintf@prec& (0+255),w,b
  9850  00FC22  0100               	movlb	0	; () banked
  9851  00FC24  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  9852  00FC26  0A80               	xorlw	128
  9853  00FC28  6E4F               	movwf	??_sprintf& (0+255),c
  9854  00FC2A  0100               	movlb	0	; () banked
  9855  00FC2C  5179               	movf	(sprintf@width+1)& (0+255),w,b
  9856  00FC2E  0A80               	xorlw	128
  9857  00FC30  584F               	subwfb	??_sprintf& (0+255),w,c
  9858  00FC32  B0D8               	btfsc	status,0,c
  9859  00FC34  D009               	goto	l4386
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;doprnt.c: 1350: width -= prec;
  9863  00FC36  0100               	movlb	0	; () banked
  9864  00FC38  517A               	movf	sprintf@prec& (0+255),w,b
  9865  00FC3A  0100               	movlb	0	; () banked
  9866  00FC3C  5F78               	subwf	sprintf@width& (0+255),f,b
  9867  00FC3E  0100               	movlb	0	; () banked
  9868  00FC40  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  9869  00FC42  0100               	movlb	0	; () banked
  9870  00FC44  5B79               	subwfb	(sprintf@width+1)& (0+255),f,b
  9871  00FC46  D006               	goto	l4388
  9872  00FC48                     l4386:
  9873                           
  9874                           ; BSR set to: 0
  9875                           ;doprnt.c: 1351: else
  9876                           ;doprnt.c: 1352: width = 0;
  9877  00FC48  0E00               	movlw	0
  9878  00FC4A  0100               	movlb	0	; () banked
  9879  00FC4C  6F79               	movwf	(sprintf@width+1)& (0+255),b
  9880  00FC4E  0E00               	movlw	0
  9881  00FC50  6F78               	movwf	sprintf@width& (0+255),b
  9882                           
  9883                           ; BSR set to: 0
  9884  00FC52  D000               	goto	l4388
  9885  00FC54                     l4388:
  9886                           
  9887                           ; BSR set to: 0
  9888                           ;doprnt.c: 1353: }
  9889                           ;doprnt.c: 1381: if(width > c)
  9890  00FC54  0E80               	movlw	128
  9891  00FC56  0100               	movlb	0	; () banked
  9892  00FC58  BF7C               	btfsc	sprintf@c& (0+255),7,b
  9893  00FC5A  0E7F               	movlw	127
  9894  00FC5C  6E4F               	movwf	??_sprintf& (0+255),c
  9895  00FC5E  0100               	movlb	0	; () banked
  9896  00FC60  5178               	movf	sprintf@width& (0+255),w,b
  9897  00FC62  0100               	movlb	0	; () banked
  9898  00FC64  5D7C               	subwf	sprintf@c& (0+255),w,b
  9899  00FC66  0100               	movlb	0	; () banked
  9900  00FC68  5179               	movf	(sprintf@width+1)& (0+255),w,b
  9901  00FC6A  0A80               	xorlw	128
  9902  00FC6C  584F               	subwfb	??_sprintf& (0+255),w,c
  9903  00FC6E  B0D8               	btfsc	status,0,c
  9904  00FC70  D00B               	goto	l4392
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;doprnt.c: 1382: width -= c;
  9908  00FC72  0100               	movlb	0	; () banked
  9909  00FC74  517C               	movf	sprintf@c& (0+255),w,b
  9910  00FC76  0100               	movlb	0	; () banked
  9911  00FC78  5F78               	subwf	sprintf@width& (0+255),f,b
  9912  00FC7A  0E00               	movlw	0
  9913  00FC7C  0100               	movlb	0	; () banked
  9914  00FC7E  BF7C               	btfsc	sprintf@c& (0+255),7,b
  9915  00FC80  0EFF               	movlw	255
  9916  00FC82  0100               	movlb	0	; () banked
  9917  00FC84  5B79               	subwfb	(sprintf@width+1)& (0+255),f,b
  9918  00FC86  D006               	goto	l4394
  9919  00FC88                     l4392:
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;doprnt.c: 1383: else
  9923                           ;doprnt.c: 1384: width = 0;
  9924  00FC88  0E00               	movlw	0
  9925  00FC8A  0100               	movlb	0	; () banked
  9926  00FC8C  6F79               	movwf	(sprintf@width+1)& (0+255),b
  9927  00FC8E  0E00               	movlw	0
  9928  00FC90  6F78               	movwf	sprintf@width& (0+255),b
  9929  00FC92  D000               	goto	l4394
  9930  00FC94                     l4394:
  9931                           
  9932                           ; BSR set to: 0
  9933                           ;doprnt.c: 1387: if(flag & 0x04) {
  9934  00FC94  0100               	movlb	0	; () banked
  9935  00FC96  A573               	btfss	sprintf@flag& (0+255),2,b
  9936  00FC98  D02F               	goto	l4410
  9937                           
  9938                           ; BSR set to: 0
  9939                           ;doprnt.c: 1392: if(flag & 0x03)
  9940  00FC9A  0E03               	movlw	3
  9941  00FC9C  0100               	movlb	0	; () banked
  9942  00FC9E  1573               	andwf	sprintf@flag& (0+255),w,b
  9943  00FCA0  6E4F               	movwf	??_sprintf& (0+255),c
  9944  00FCA2  0E00               	movlw	0
  9945  00FCA4  0100               	movlb	0	; () banked
  9946  00FCA6  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  9947  00FCA8  6E50               	movwf	(??_sprintf+1)& (0+255),c
  9948  00FCAA  504F               	movf	??_sprintf,w,c
  9949  00FCAC  1050               	iorwf	??_sprintf+1,w,c
  9950  00FCAE  B4D8               	btfsc	status,2,c
  9951  00FCB0  D009               	goto	l4402
  9952                           
  9953                           ; BSR set to: 0
  9954                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9955  00FCB2  C043  FFD9         	movff	sprintf@sp,fsr2l
  9956  00FCB6  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9957  00FCBA  0E2D               	movlw	45
  9958  00FCBC  6EDF               	movwf	indf2,c
  9959                           
  9960                           ; BSR set to: 0
  9961  00FCBE  4A43               	infsnz	sprintf@sp,f,c
  9962  00FCC0  2A44               	incf	sprintf@sp+1,f,c
  9963  00FCC2  D000               	goto	l4402
  9964  00FCC4                     l4402:
  9965                           
  9966                           ; BSR set to: 0
  9967                           ;doprnt.c: 1415: if(width)
  9968  00FCC4  0100               	movlb	0	; () banked
  9969  00FCC6  5178               	movf	sprintf@width& (0+255),w,b
  9970  00FCC8  0100               	movlb	0	; () banked
  9971  00FCCA  1179               	iorwf	(sprintf@width+1)& (0+255),w,b
  9972  00FCCC  B4D8               	btfsc	status,2,c
  9973  00FCCE  D087               	goto	l4430
  9974  00FCD0                     l4404:
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9978  00FCD0  C043  FFD9         	movff	sprintf@sp,fsr2l
  9979  00FCD4  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9980  00FCD8  0E30               	movlw	48
  9981  00FCDA  6EDF               	movwf	indf2,c
  9982                           
  9983                           ; BSR set to: 0
  9984  00FCDC  4A43               	infsnz	sprintf@sp,f,c
  9985  00FCDE  2A44               	incf	sprintf@sp+1,f,c
  9986                           
  9987                           ; BSR set to: 0
  9988                           ;doprnt.c: 1418: while(--width);
  9989  00FCE0  0100               	movlb	0	; () banked
  9990  00FCE2  0778               	decf	sprintf@width& (0+255),f,b
  9991  00FCE4  A0D8               	btfss	status,0,c
  9992  00FCE6  0779               	decf	(sprintf@width+1)& (0+255),f,b
  9993  00FCE8  0100               	movlb	0	; () banked
  9994  00FCEA  5178               	movf	sprintf@width& (0+255),w,b
  9995  00FCEC  0100               	movlb	0	; () banked
  9996  00FCEE  1179               	iorwf	(sprintf@width+1)& (0+255),w,b
  9997  00FCF0  B4D8               	btfsc	status,2,c
  9998  00FCF2  D075               	goto	l4430
  9999  00FCF4  D7ED               	goto	l4404
 10000                           
 10001                           ; BSR set to: 0
 10002                           ;doprnt.c: 1420: } else
 10003                           
 10004                           ; BSR set to: 0
 10005  00FCF6  D073               	goto	l4430
 10006  00FCF8                     l4410:
 10007                           
 10008                           ; BSR set to: 0
 10009                           ;doprnt.c: 1422: {
 10010                           ;doprnt.c: 1424: if(width
 10011                           ;doprnt.c: 1428: )
 10012  00FCF8  0100               	movlb	0	; () banked
 10013  00FCFA  5178               	movf	sprintf@width& (0+255),w,b
 10014  00FCFC  0100               	movlb	0	; () banked
 10015  00FCFE  1179               	iorwf	(sprintf@width+1)& (0+255),w,b
 10016  00FD00  B4D8               	btfsc	status,2,c
 10017  00FD02  D014               	goto	l4418
 10018  00FD04                     l4412:
 10019                           
 10020                           ; BSR set to: 0
 10021                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 10022  00FD04  C043  FFD9         	movff	sprintf@sp,fsr2l
 10023  00FD08  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10024  00FD0C  0E20               	movlw	32
 10025  00FD0E  6EDF               	movwf	indf2,c
 10026                           
 10027                           ; BSR set to: 0
 10028  00FD10  4A43               	infsnz	sprintf@sp,f,c
 10029  00FD12  2A44               	incf	sprintf@sp+1,f,c
 10030                           
 10031                           ; BSR set to: 0
 10032                           ;doprnt.c: 1431: while(--width);
 10033  00FD14  0100               	movlb	0	; () banked
 10034  00FD16  0778               	decf	sprintf@width& (0+255),f,b
 10035  00FD18  A0D8               	btfss	status,0,c
 10036  00FD1A  0779               	decf	(sprintf@width+1)& (0+255),f,b
 10037  00FD1C  0100               	movlb	0	; () banked
 10038  00FD1E  5178               	movf	sprintf@width& (0+255),w,b
 10039  00FD20  0100               	movlb	0	; () banked
 10040  00FD22  1179               	iorwf	(sprintf@width+1)& (0+255),w,b
 10041  00FD24  B4D8               	btfsc	status,2,c
 10042  00FD26  D002               	goto	l4418
 10043  00FD28  D7ED               	goto	l4412
 10044                           
 10045                           ; BSR set to: 0
 10046  00FD2A  D000               	goto	l4418
 10047  00FD2C                     l4418:
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;doprnt.c: 1438: if(flag & 0x03)
 10051  00FD2C  0E03               	movlw	3
 10052  00FD2E  0100               	movlb	0	; () banked
 10053  00FD30  1573               	andwf	sprintf@flag& (0+255),w,b
 10054  00FD32  6E4F               	movwf	??_sprintf& (0+255),c
 10055  00FD34  0E00               	movlw	0
 10056  00FD36  0100               	movlb	0	; () banked
 10057  00FD38  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
 10058  00FD3A  6E50               	movwf	(??_sprintf+1)& (0+255),c
 10059  00FD3C  504F               	movf	??_sprintf,w,c
 10060  00FD3E  1050               	iorwf	??_sprintf+1,w,c
 10061  00FD40  B4D8               	btfsc	status,2,c
 10062  00FD42  D04D               	goto	l4430
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10066  00FD44  C043  FFD9         	movff	sprintf@sp,fsr2l
 10067  00FD48  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10068  00FD4C  0E2D               	movlw	45
 10069  00FD4E  6EDF               	movwf	indf2,c
 10070  00FD50  D043               	goto	l4428
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;doprnt.c: 1469: }
 10074                           ;doprnt.c: 1474: while(prec--) {
 10075                           
 10076                           ; BSR set to: 0
 10077                           
 10078                           ; BSR set to: 0
 10079  00FD52  D045               	goto	l4430
 10080  00FD54                     l4424:
 10081                           
 10082                           ; BSR set to: 0
 10083                           ;doprnt.c: 1478: {
 10084                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10085  00FD54  C07A  F04F         	movff	sprintf@prec,??_sprintf
 10086  00FD58  C07B  F050         	movff	sprintf@prec+1,??_sprintf+1
 10087  00FD5C  90D8               	bcf	status,0,c
 10088  00FD5E  364F               	rlcf	??_sprintf,f,c
 10089  00FD60  3650               	rlcf	??_sprintf+1,f,c
 10090  00FD62  90D8               	bcf	status,0,c
 10091  00FD64  364F               	rlcf	??_sprintf,f,c
 10092  00FD66  3650               	rlcf	??_sprintf+1,f,c
 10093  00FD68  0E29               	movlw	low _dpowers
 10094  00FD6A  244F               	addwf	??_sprintf,w,c
 10095  00FD6C  6EF6               	movwf	tblptrl,c
 10096  00FD6E  0EFE               	movlw	high _dpowers
 10097  00FD70  2050               	addwfc	??_sprintf+1,w,c
 10098  00FD72  6EF7               	movwf	tblptrh,c
 10099  00FD74                     	if	0	;There are less than 3 active tblptr bytes
 10100  00FD74                     	endif
 10101  00FD74  0009               	tblrd		*+
 10102  00FD76  CFF5 F005          	movff	tablat,___lldiv@divisor
 10103  00FD7A  0009               	tblrd		*+
 10104  00FD7C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
 10105  00FD80  0009               	tblrd		*+
 10106  00FD82  CFF5 F007          	movff	tablat,___lldiv@divisor+2
 10107  00FD86  000A               	tblrd		*-
 10108  00FD88  CFF5 F008          	movff	tablat,___lldiv@divisor+3
 10109  00FD8C  C069  F001         	movff	sprintf@val,___lldiv@dividend
 10110  00FD90  C06A  F002         	movff	sprintf@val+1,___lldiv@dividend+1
 10111  00FD94  C06B  F003         	movff	sprintf@val+2,___lldiv@dividend+2
 10112  00FD98  C06C  F004         	movff	sprintf@val+3,___lldiv@dividend+3
 10113  00FD9C  EC3E  F061         	call	___lldiv	;wreg free
 10114  00FDA0  C001  F00E         	movff	?___lldiv,___llmod@dividend
 10115  00FDA4  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
 10116  00FDA8  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
 10117  00FDAC  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
 10118  00FDB0  0E0A               	movlw	10
 10119  00FDB2  6E12               	movwf	___llmod@divisor,c
 10120  00FDB4  0E00               	movlw	0
 10121  00FDB6  6E13               	movwf	___llmod@divisor+1,c
 10122  00FDB8  0E00               	movlw	0
 10123  00FDBA  6E14               	movwf	___llmod@divisor+2,c
 10124  00FDBC  0E00               	movlw	0
 10125  00FDBE  6E15               	movwf	___llmod@divisor+3,c
 10126  00FDC0  EC86  F060         	call	___llmod	;wreg free
 10127  00FDC4  500E               	movf	?___llmod,w,c
 10128  00FDC6  0F30               	addlw	48
 10129  00FDC8  0100               	movlb	0	; () banked
 10130  00FDCA  6F7C               	movwf	sprintf@c& (0+255),b
 10131                           
 10132                           ; BSR set to: 0
 10133                           ;doprnt.c: 1523: }
 10134                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10135  00FDCC  C043  FFD9         	movff	sprintf@sp,fsr2l
 10136  00FDD0  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10137  00FDD4  C07C  FFDF         	movff	sprintf@c,indf2
 10138  00FDD8                     l4428:
 10139                           
 10140                           ; BSR set to: 0
 10141  00FDD8  4A43               	infsnz	sprintf@sp,f,c
 10142  00FDDA  2A44               	incf	sprintf@sp+1,f,c
 10143  00FDDC  D000               	goto	l4430
 10144  00FDDE                     l4430:
 10145                           
 10146                           ; BSR set to: 0
 10147  00FDDE  0100               	movlb	0	; () banked
 10148  00FDE0  077A               	decf	sprintf@prec& (0+255),f,b
 10149  00FDE2  A0D8               	btfss	status,0,c
 10150  00FDE4  077B               	decf	(sprintf@prec+1)& (0+255),f,b
 10151  00FDE6  0100               	movlb	0	; () banked
 10152  00FDE8  297A               	incf	sprintf@prec& (0+255),w,b
 10153  00FDEA  E1B4               	bnz	l4424
 10154  00FDEC  0100               	movlb	0	; () banked
 10155  00FDEE  297B               	incf	(sprintf@prec+1)& (0+255),w,b
 10156  00FDF0  B4D8               	btfsc	status,2,c
 10157  00FDF2  D002               	goto	l4432
 10158  00FDF4  D7AF               	goto	l4424
 10159                           
 10160                           ; BSR set to: 0
 10161  00FDF6  D000               	goto	l4432
 10162  00FDF8                     l4432:
 10163                           
 10164                           ; BSR set to: 0
 10165  00FDF8  C045  FFF6         	movff	sprintf@f,tblptrl
 10166  00FDFC  C046  FFF7         	movff	sprintf@f+1,tblptrh
 10167  00FE00  4A45               	infsnz	sprintf@f,f,c
 10168  00FE02  2A46               	incf	sprintf@f+1,f,c
 10169  00FE04                     	if	0	;tblptru may be non-zero
 10170  00FE04                     	endif
 10171  00FE04                     	if	0	;tblptru may be non-zero
 10172  00FE04                     	endif
 10173  00FE04  0008               	tblrd		*
 10174  00FE06  CFF5 F07C          	movff	tablat,sprintf@c
 10175  00FE0A  0100               	movlb	0	; () banked
 10176  00FE0C  517C               	movf	sprintf@c& (0+255),w,b
 10177  00FE0E  B4D8               	btfsc	status,2,c
 10178  00FE10  D003               	goto	l4434
 10179  00FE12  EF3F  F078         	goto	l4072
 10180                           
 10181                           ; BSR set to: 0
 10182  00FE16  D000               	goto	l4434
 10183  00FE18                     l4434:
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;doprnt.c: 1538: *sp = 0;
 10187  00FE18  C043  FFD9         	movff	sprintf@sp,fsr2l
 10188  00FE1C  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10189  00FE20  0E00               	movlw	0
 10190  00FE22  6EDF               	movwf	indf2,c
 10191  00FE24  0012               	return	
 10192                           
 10193                           ; BSR set to: 0
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;doprnt.c: 1540: return 0;
 10197                           ;	Return value of _sprintf is never used
 10198  00FE26  0012               	return		;funcret
 10199  00FE28                     __end_of_sprintf:
 10200                           	opt stack 0
 10201                           tblptru	equ	0xFF8
 10202                           tblptrh	equ	0xFF7
 10203                           tblptrl	equ	0xFF6
 10204                           tablat	equ	0xFF5
 10205                           prodh	equ	0xFF4
 10206                           prodl	equ	0xFF3
 10207                           intcon	equ	0xFF2
 10208                           indf0	equ	0xFEF
 10209                           postinc0	equ	0xFEE
 10210                           fsr0h	equ	0xFEA
 10211                           fsr0l	equ	0xFE9
 10212                           wreg	equ	0xFE8
 10213                           postdec1	equ	0xFE5
 10214                           fsr1l	equ	0xFE1
 10215                           indf2	equ	0xFDF
 10216                           postinc2	equ	0xFDE
 10217                           postdec2	equ	0xFDD
 10218                           fsr2h	equ	0xFDA
 10219                           fsr2l	equ	0xFD9
 10220                           status	equ	0xFD8
 10221                           
 10222 ;; *************** function _scale *****************
 10223 ;; Defined at:
 10224 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;  scl             1    wreg     char 
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;  scl             1   41[COMRAM] char 
 10229 ;; Return value:  Size  Location     Type
 10230 ;;                  3   35[COMRAM] char 
 10231 ;; Registers used:
 10232 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10233 ;; Tracked objects:
 10234 ;;		On entry : 0/0
 10235 ;;		On exit  : 0/0
 10236 ;;		Unchanged: 0/0
 10237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10238 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10239 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10241 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10242 ;;Total ram usage:        7 bytes
 10243 ;; Hardware stack levels used:    1
 10244 ;; Hardware stack levels required when called:    2
 10245 ;; This function calls:
 10246 ;;		___awdiv
 10247 ;;		___awmod
 10248 ;;		___ftmul
 10249 ;;		___wmul
 10250 ;; This function is called by:
 10251 ;;		_sprintf
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           	psect	text28
 10256  00EC70                     __ptext28:
 10257                           	opt stack 0
 10258  00EC70                     _scale:
 10259                           	opt stack 26
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;incstack = 0
 10263                           ;scale@scl stored from wreg
 10264  00EC70  6E2A               	movwf	scale@scl,c
 10265                           
 10266                           ;doprnt.c: 428: if(scl < 0) {
 10267  00EC72  AE2A               	btfss	scale@scl,7,c
 10268  00EC74  D0FE               	goto	l3778
 10269                           
 10270                           ;doprnt.c: 429: scl = -scl;
 10271  00EC76  6C2A               	negf	scale@scl,c
 10272                           
 10273                           ;doprnt.c: 430: if(scl>=110)
 10274  00EC78  502A               	movf	scale@scl,w,c
 10275  00EC7A  0A80               	xorlw	128
 10276  00EC7C  0F12               	addlw	-238
 10277  00EC7E  A0D8               	btfss	status,0,c
 10278  00EC80  D092               	goto	l3768
 10279                           
 10280                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 10281  00EC82  0E00               	movlw	0
 10282  00EC84  6E12               	movwf	___wmul@multiplicand+1,c
 10283  00EC86  0E03               	movlw	3
 10284  00EC88  6E11               	movwf	___wmul@multiplicand,c
 10285  00EC8A  0E00               	movlw	0
 10286  00EC8C  6E0A               	movwf	___awdiv@divisor+1,c
 10287  00EC8E  0E0A               	movlw	10
 10288  00EC90  6E09               	movwf	___awdiv@divisor,c
 10289  00EC92  0E00               	movlw	0
 10290  00EC94  6E04               	movwf	___awmod@divisor+1,c
 10291  00EC96  0E64               	movlw	100
 10292  00EC98  6E03               	movwf	___awmod@divisor,c
 10293  00EC9A  502A               	movf	scale@scl,w,c
 10294  00EC9C  6E01               	movwf	___awmod@dividend,c
 10295  00EC9E  6A02               	clrf	___awmod@dividend+1,c
 10296  00ECA0  BE01               	btfsc	___awmod@dividend,7,c
 10297  00ECA2  0602               	decf	___awmod@dividend+1,f,c
 10298  00ECA4  ECFD  F060         	call	___awmod	;wreg free
 10299  00ECA8  C001  F007         	movff	?___awmod,___awdiv@dividend
 10300  00ECAC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
 10301  00ECB0  EC60  F062         	call	___awdiv	;wreg free
 10302  00ECB4  0E09               	movlw	9
 10303  00ECB6  2407               	addwf	?___awdiv,w,c
 10304  00ECB8  6E0F               	movwf	___wmul@multiplier,c
 10305  00ECBA  0E00               	movlw	0
 10306  00ECBC  2008               	addwfc	?___awdiv+1,w,c
 10307  00ECBE  6E10               	movwf	___wmul@multiplier+1,c
 10308  00ECC0  EC94  F05F         	call	___wmul	;wreg free
 10309  00ECC4  0E51               	movlw	low __npowers_
 10310  00ECC6  240F               	addwf	?___wmul,w,c
 10311  00ECC8  6EF6               	movwf	tblptrl,c
 10312  00ECCA  0EFE               	movlw	high __npowers_
 10313  00ECCC  2010               	addwfc	?___wmul+1,w,c
 10314  00ECCE  6EF7               	movwf	tblptrh,c
 10315  00ECD0                     	if	0	;There are less than 3 active tblptr bytes
 10316  00ECD0                     	endif
 10317  00ECD0  0009               	tblrd		*+
 10318  00ECD2  CFF5 F018          	movff	tablat,___ftmul@f2
 10319  00ECD6  0009               	tblrd		*+
 10320  00ECD8  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10321  00ECDC  000A               	tblrd		*-
 10322  00ECDE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10323  00ECE2  0E00               	movlw	0
 10324  00ECE4  6E0A               	movwf	___awdiv@divisor+1,c
 10325  00ECE6  0E64               	movlw	100
 10326  00ECE8  6E09               	movwf	___awdiv@divisor,c
 10327  00ECEA  502A               	movf	scale@scl,w,c
 10328  00ECEC  6E07               	movwf	___awdiv@dividend,c
 10329  00ECEE  6A08               	clrf	___awdiv@dividend+1,c
 10330  00ECF0  BE07               	btfsc	___awdiv@dividend,7,c
 10331  00ECF2  0608               	decf	___awdiv@dividend+1,f,c
 10332  00ECF4  EC60  F062         	call	___awdiv	;wreg free
 10333  00ECF8  0E12               	movlw	18
 10334  00ECFA  2407               	addwf	?___awdiv,w,c
 10335  00ECFC  6E0F               	movwf	___wmul@multiplier,c
 10336  00ECFE  0E00               	movlw	0
 10337  00ED00  2008               	addwfc	?___awdiv+1,w,c
 10338  00ED02  6E10               	movwf	___wmul@multiplier+1,c
 10339  00ED04  0E00               	movlw	0
 10340  00ED06  6E12               	movwf	___wmul@multiplicand+1,c
 10341  00ED08  0E03               	movlw	3
 10342  00ED0A  6E11               	movwf	___wmul@multiplicand,c
 10343  00ED0C  EC94  F05F         	call	___wmul	;wreg free
 10344  00ED10  0E51               	movlw	low __npowers_
 10345  00ED12  240F               	addwf	?___wmul,w,c
 10346  00ED14  6EF6               	movwf	tblptrl,c
 10347  00ED16  0EFE               	movlw	high __npowers_
 10348  00ED18  2010               	addwfc	?___wmul+1,w,c
 10349  00ED1A  6EF7               	movwf	tblptrh,c
 10350  00ED1C                     	if	0	;There are less than 3 active tblptr bytes
 10351  00ED1C                     	endif
 10352  00ED1C  0009               	tblrd		*+
 10353  00ED1E  CFF5 F015          	movff	tablat,___ftmul@f1
 10354  00ED22  0009               	tblrd		*+
 10355  00ED24  CFF5 F016          	movff	tablat,___ftmul@f1+1
 10356  00ED28  000A               	tblrd		*-
 10357  00ED2A  CFF5 F017          	movff	tablat,___ftmul@f1+2
 10358  00ED2E  EC8B  F065         	call	___ftmul	;wreg free
 10359  00ED32  C015  F027         	movff	?___ftmul,_scale$2566
 10360  00ED36  C016  F028         	movff	?___ftmul+1,_scale$2566+1
 10361  00ED3A  C017  F029         	movff	?___ftmul+2,_scale$2566+2
 10362                           
 10363                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 10364  00ED3E  C027  F015         	movff	_scale$2566,___ftmul@f1
 10365  00ED42  C028  F016         	movff	_scale$2566+1,___ftmul@f1+1
 10366  00ED46  C029  F017         	movff	_scale$2566+2,___ftmul@f1+2
 10367  00ED4A  0E00               	movlw	0
 10368  00ED4C  6E12               	movwf	___wmul@multiplicand+1,c
 10369  00ED4E  0E03               	movlw	3
 10370  00ED50  6E11               	movwf	___wmul@multiplicand,c
 10371  00ED52  0E00               	movlw	0
 10372  00ED54  6E04               	movwf	___awmod@divisor+1,c
 10373  00ED56  0E0A               	movlw	10
 10374  00ED58  6E03               	movwf	___awmod@divisor,c
 10375  00ED5A  502A               	movf	scale@scl,w,c
 10376  00ED5C  6E01               	movwf	___awmod@dividend,c
 10377  00ED5E  6A02               	clrf	___awmod@dividend+1,c
 10378  00ED60  BE01               	btfsc	___awmod@dividend,7,c
 10379  00ED62  0602               	decf	___awmod@dividend+1,f,c
 10380  00ED64  ECFD  F060         	call	___awmod	;wreg free
 10381  00ED68  C001  F00F         	movff	?___awmod,___wmul@multiplier
 10382  00ED6C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 10383  00ED70  EC94  F05F         	call	___wmul	;wreg free
 10384  00ED74  0E51               	movlw	low __npowers_
 10385  00ED76  240F               	addwf	?___wmul,w,c
 10386  00ED78  6EF6               	movwf	tblptrl,c
 10387  00ED7A  0EFE               	movlw	high __npowers_
 10388  00ED7C  2010               	addwfc	?___wmul+1,w,c
 10389  00ED7E  6EF7               	movwf	tblptrh,c
 10390  00ED80                     	if	0	;There are less than 3 active tblptr bytes
 10391  00ED80                     	endif
 10392  00ED80  0009               	tblrd		*+
 10393  00ED82  CFF5 F018          	movff	tablat,___ftmul@f2
 10394  00ED86  0009               	tblrd		*+
 10395  00ED88  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10396  00ED8C  000A               	tblrd		*-
 10397  00ED8E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10398  00ED92  EC8B  F065         	call	___ftmul	;wreg free
 10399  00ED96  C015  F024         	movff	?___ftmul,?_scale
 10400  00ED9A  C016  F025         	movff	?___ftmul+1,?_scale+1
 10401  00ED9E  C017  F026         	movff	?___ftmul+2,?_scale+2
 10402  00EDA2  0012               	return	
 10403  00EDA4  D054               	goto	l3774
 10404  00EDA6                     l3768:
 10405                           
 10406                           ;doprnt.c: 432: else if(scl > 10)
 10407  00EDA6  502A               	movf	scale@scl,w,c
 10408  00EDA8  0A80               	xorlw	128
 10409  00EDAA  0F75               	addlw	-139
 10410  00EDAC  A0D8               	btfss	status,0,c
 10411  00EDAE  D04F               	goto	l3774
 10412                           
 10413                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 10414  00EDB0  0E00               	movlw	0
 10415  00EDB2  6E0A               	movwf	___awdiv@divisor+1,c
 10416  00EDB4  0E0A               	movlw	10
 10417  00EDB6  6E09               	movwf	___awdiv@divisor,c
 10418  00EDB8  502A               	movf	scale@scl,w,c
 10419  00EDBA  6E07               	movwf	___awdiv@dividend,c
 10420  00EDBC  6A08               	clrf	___awdiv@dividend+1,c
 10421  00EDBE  BE07               	btfsc	___awdiv@dividend,7,c
 10422  00EDC0  0608               	decf	___awdiv@dividend+1,f,c
 10423  00EDC2  EC60  F062         	call	___awdiv	;wreg free
 10424  00EDC6  0E09               	movlw	9
 10425  00EDC8  2407               	addwf	?___awdiv,w,c
 10426  00EDCA  6E0F               	movwf	___wmul@multiplier,c
 10427  00EDCC  0E00               	movlw	0
 10428  00EDCE  2008               	addwfc	?___awdiv+1,w,c
 10429  00EDD0  6E10               	movwf	___wmul@multiplier+1,c
 10430  00EDD2  0E00               	movlw	0
 10431  00EDD4  6E12               	movwf	___wmul@multiplicand+1,c
 10432  00EDD6  0E03               	movlw	3
 10433  00EDD8  6E11               	movwf	___wmul@multiplicand,c
 10434  00EDDA  EC94  F05F         	call	___wmul	;wreg free
 10435  00EDDE  0E51               	movlw	low __npowers_
 10436  00EDE0  240F               	addwf	?___wmul,w,c
 10437  00EDE2  6EF6               	movwf	tblptrl,c
 10438  00EDE4  0EFE               	movlw	high __npowers_
 10439  00EDE6  2010               	addwfc	?___wmul+1,w,c
 10440  00EDE8  6EF7               	movwf	tblptrh,c
 10441  00EDEA                     	if	0	;There are less than 3 active tblptr bytes
 10442  00EDEA                     	endif
 10443  00EDEA  0009               	tblrd		*+
 10444  00EDEC  CFF5 F015          	movff	tablat,___ftmul@f1
 10445  00EDF0  0009               	tblrd		*+
 10446  00EDF2  CFF5 F016          	movff	tablat,___ftmul@f1+1
 10447  00EDF6  000A               	tblrd		*-
 10448  00EDF8  CFF5 F017          	movff	tablat,___ftmul@f1+2
 10449  00EDFC  0E00               	movlw	0
 10450  00EDFE  6E12               	movwf	___wmul@multiplicand+1,c
 10451  00EE00  0E03               	movlw	3
 10452  00EE02  6E11               	movwf	___wmul@multiplicand,c
 10453  00EE04  0E00               	movlw	0
 10454  00EE06  6E04               	movwf	___awmod@divisor+1,c
 10455  00EE08  0E0A               	movlw	10
 10456  00EE0A  6E03               	movwf	___awmod@divisor,c
 10457  00EE0C  502A               	movf	scale@scl,w,c
 10458  00EE0E  6E01               	movwf	___awmod@dividend,c
 10459  00EE10  6A02               	clrf	___awmod@dividend+1,c
 10460  00EE12  BE01               	btfsc	___awmod@dividend,7,c
 10461  00EE14  0602               	decf	___awmod@dividend+1,f,c
 10462  00EE16  ECFD  F060         	call	___awmod	;wreg free
 10463  00EE1A  C001  F00F         	movff	?___awmod,___wmul@multiplier
 10464  00EE1E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 10465  00EE22  EC94  F05F         	call	___wmul	;wreg free
 10466  00EE26  0E51               	movlw	low __npowers_
 10467  00EE28  240F               	addwf	?___wmul,w,c
 10468  00EE2A  6EF6               	movwf	tblptrl,c
 10469  00EE2C  0EFE               	movlw	high __npowers_
 10470  00EE2E  2010               	addwfc	?___wmul+1,w,c
 10471  00EE30  6EF7               	movwf	tblptrh,c
 10472  00EE32                     	if	0	;There are less than 3 active tblptr bytes
 10473  00EE32                     	endif
 10474  00EE32  0009               	tblrd		*+
 10475  00EE34  CFF5 F018          	movff	tablat,___ftmul@f2
 10476  00EE38  0009               	tblrd		*+
 10477  00EE3A  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10478  00EE3E  000A               	tblrd		*-
 10479  00EE40  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10480  00EE44  EC8B  F065         	call	___ftmul	;wreg free
 10481  00EE48  D7A6               	goto	L4
 10482  00EE4A  0012               	return	
 10483  00EE4C  D000               	goto	l3774
 10484  00EE4E                     l3774:
 10485                           
 10486                           ;doprnt.c: 434: return _npowers_[scl];
 10487  00EE4E  502A               	movf	scale@scl,w,c
 10488  00EE50  0D03               	mullw	3
 10489  00EE52  0E51               	movlw	low __npowers_
 10490  00EE54  24F3               	addwf	prodl,w,c
 10491  00EE56  6EF6               	movwf	tblptrl,c
 10492  00EE58  0EFE               	movlw	high __npowers_
 10493  00EE5A  20F4               	addwfc	prodh,w,c
 10494  00EE5C  6EF7               	movwf	tblptrh,c
 10495  00EE5E                     	if	0	;There are less than 3 active tblptr bytes
 10496  00EE5E                     	endif
 10497  00EE5E  0009               	tblrd		*+
 10498  00EE60  CFF5 F024          	movff	tablat,?_scale
 10499  00EE64  0009               	tblrd		*+
 10500  00EE66  CFF5 F025          	movff	tablat,?_scale+1
 10501  00EE6A  000A               	tblrd		*-
 10502  00EE6C  CFF5 F026          	movff	tablat,?_scale+2
 10503  00EE70  0012               	return	
 10504  00EE72                     l3778:
 10505                           
 10506                           ;doprnt.c: 435: }
 10507                           ;doprnt.c: 436: if(scl>=110)
 10508  00EE72  502A               	movf	scale@scl,w,c
 10509  00EE74  0A80               	xorlw	128
 10510  00EE76  0F12               	addlw	-238
 10511  00EE78  A0D8               	btfss	status,0,c
 10512  00EE7A  D092               	goto	l3786
 10513                           
 10514                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10515  00EE7C  0E00               	movlw	0
 10516  00EE7E  6E12               	movwf	___wmul@multiplicand+1,c
 10517  00EE80  0E03               	movlw	3
 10518  00EE82  6E11               	movwf	___wmul@multiplicand,c
 10519  00EE84  0E00               	movlw	0
 10520  00EE86  6E0A               	movwf	___awdiv@divisor+1,c
 10521  00EE88  0E0A               	movlw	10
 10522  00EE8A  6E09               	movwf	___awdiv@divisor,c
 10523  00EE8C  0E00               	movlw	0
 10524  00EE8E  6E04               	movwf	___awmod@divisor+1,c
 10525  00EE90  0E64               	movlw	100
 10526  00EE92  6E03               	movwf	___awmod@divisor,c
 10527  00EE94  502A               	movf	scale@scl,w,c
 10528  00EE96  6E01               	movwf	___awmod@dividend,c
 10529  00EE98  6A02               	clrf	___awmod@dividend+1,c
 10530  00EE9A  BE01               	btfsc	___awmod@dividend,7,c
 10531  00EE9C  0602               	decf	___awmod@dividend+1,f,c
 10532  00EE9E  ECFD  F060         	call	___awmod	;wreg free
 10533  00EEA2  C001  F007         	movff	?___awmod,___awdiv@dividend
 10534  00EEA6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
 10535  00EEAA  EC60  F062         	call	___awdiv	;wreg free
 10536  00EEAE  0E09               	movlw	9
 10537  00EEB0  2407               	addwf	?___awdiv,w,c
 10538  00EEB2  6E0F               	movwf	___wmul@multiplier,c
 10539  00EEB4  0E00               	movlw	0
 10540  00EEB6  2008               	addwfc	?___awdiv+1,w,c
 10541  00EEB8  6E10               	movwf	___wmul@multiplier+1,c
 10542  00EEBA  EC94  F05F         	call	___wmul	;wreg free
 10543  00EEBE  0E78               	movlw	low __powers_
 10544  00EEC0  240F               	addwf	?___wmul,w,c
 10545  00EEC2  6EF6               	movwf	tblptrl,c
 10546  00EEC4  0EFE               	movlw	high __powers_
 10547  00EEC6  2010               	addwfc	?___wmul+1,w,c
 10548  00EEC8  6EF7               	movwf	tblptrh,c
 10549  00EECA                     	if	0	;There are less than 3 active tblptr bytes
 10550  00EECA                     	endif
 10551  00EECA  0009               	tblrd		*+
 10552  00EECC  CFF5 F018          	movff	tablat,___ftmul@f2
 10553  00EED0  0009               	tblrd		*+
 10554  00EED2  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10555  00EED6  000A               	tblrd		*-
 10556  00EED8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10557  00EEDC  0E00               	movlw	0
 10558  00EEDE  6E0A               	movwf	___awdiv@divisor+1,c
 10559  00EEE0  0E64               	movlw	100
 10560  00EEE2  6E09               	movwf	___awdiv@divisor,c
 10561  00EEE4  502A               	movf	scale@scl,w,c
 10562  00EEE6  6E07               	movwf	___awdiv@dividend,c
 10563  00EEE8  6A08               	clrf	___awdiv@dividend+1,c
 10564  00EEEA  BE07               	btfsc	___awdiv@dividend,7,c
 10565  00EEEC  0608               	decf	___awdiv@dividend+1,f,c
 10566  00EEEE  EC60  F062         	call	___awdiv	;wreg free
 10567  00EEF2  0E12               	movlw	18
 10568  00EEF4  2407               	addwf	?___awdiv,w,c
 10569  00EEF6  6E0F               	movwf	___wmul@multiplier,c
 10570  00EEF8  0E00               	movlw	0
 10571  00EEFA  2008               	addwfc	?___awdiv+1,w,c
 10572  00EEFC  6E10               	movwf	___wmul@multiplier+1,c
 10573  00EEFE  0E00               	movlw	0
 10574  00EF00  6E12               	movwf	___wmul@multiplicand+1,c
 10575  00EF02  0E03               	movlw	3
 10576  00EF04  6E11               	movwf	___wmul@multiplicand,c
 10577  00EF06  EC94  F05F         	call	___wmul	;wreg free
 10578  00EF0A  0E78               	movlw	low __powers_
 10579  00EF0C  240F               	addwf	?___wmul,w,c
 10580  00EF0E  6EF6               	movwf	tblptrl,c
 10581  00EF10  0EFE               	movlw	high __powers_
 10582  00EF12  2010               	addwfc	?___wmul+1,w,c
 10583  00EF14  6EF7               	movwf	tblptrh,c
 10584  00EF16                     	if	0	;There are less than 3 active tblptr bytes
 10585  00EF16                     	endif
 10586  00EF16  0009               	tblrd		*+
 10587  00EF18  CFF5 F015          	movff	tablat,___ftmul@f1
 10588  00EF1C  0009               	tblrd		*+
 10589  00EF1E  CFF5 F016          	movff	tablat,___ftmul@f1+1
 10590  00EF22  000A               	tblrd		*-
 10591  00EF24  CFF5 F017          	movff	tablat,___ftmul@f1+2
 10592  00EF28  EC8B  F065         	call	___ftmul	;wreg free
 10593  00EF2C  C015  F027         	movff	?___ftmul,_scale$2566
 10594  00EF30  C016  F028         	movff	?___ftmul+1,_scale$2566+1
 10595  00EF34  C017  F029         	movff	?___ftmul+2,_scale$2566+2
 10596                           
 10597                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10598  00EF38  C027  F015         	movff	_scale$2566,___ftmul@f1
 10599  00EF3C  C028  F016         	movff	_scale$2566+1,___ftmul@f1+1
 10600  00EF40  C029  F017         	movff	_scale$2566+2,___ftmul@f1+2
 10601  00EF44  0E00               	movlw	0
 10602  00EF46  6E12               	movwf	___wmul@multiplicand+1,c
 10603  00EF48  0E03               	movlw	3
 10604  00EF4A  6E11               	movwf	___wmul@multiplicand,c
 10605  00EF4C  0E00               	movlw	0
 10606  00EF4E  6E04               	movwf	___awmod@divisor+1,c
 10607  00EF50  0E0A               	movlw	10
 10608  00EF52  6E03               	movwf	___awmod@divisor,c
 10609  00EF54  502A               	movf	scale@scl,w,c
 10610  00EF56  6E01               	movwf	___awmod@dividend,c
 10611  00EF58  6A02               	clrf	___awmod@dividend+1,c
 10612  00EF5A  BE01               	btfsc	___awmod@dividend,7,c
 10613  00EF5C  0602               	decf	___awmod@dividend+1,f,c
 10614  00EF5E  ECFD  F060         	call	___awmod	;wreg free
 10615  00EF62  C001  F00F         	movff	?___awmod,___wmul@multiplier
 10616  00EF66  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 10617  00EF6A  EC94  F05F         	call	___wmul	;wreg free
 10618  00EF6E  0E78               	movlw	low __powers_
 10619  00EF70  240F               	addwf	?___wmul,w,c
 10620  00EF72  6EF6               	movwf	tblptrl,c
 10621  00EF74  0EFE               	movlw	high __powers_
 10622  00EF76  2010               	addwfc	?___wmul+1,w,c
 10623  00EF78  6EF7               	movwf	tblptrh,c
 10624  00EF7A                     	if	0	;There are less than 3 active tblptr bytes
 10625  00EF7A                     	endif
 10626  00EF7A  0009               	tblrd		*+
 10627  00EF7C  CFF5 F018          	movff	tablat,___ftmul@f2
 10628  00EF80  0009               	tblrd		*+
 10629  00EF82  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10630  00EF86  000A               	tblrd		*-
 10631  00EF88  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10632  00EF8C  EC8B  F065         	call	___ftmul	;wreg free
 10633  00EF90  C015  F024         	movff	?___ftmul,?_scale
 10634  00EF94  C016  F025         	movff	?___ftmul+1,?_scale+1
 10635  00EF98  C017  F026         	movff	?___ftmul+2,?_scale+2
 10636  00EF9C  0012               	return	
 10637  00EF9E  D054               	goto	l3792
 10638  00EFA0                     l3786:
 10639                           
 10640                           ;doprnt.c: 438: else if(scl > 10)
 10641  00EFA0  502A               	movf	scale@scl,w,c
 10642  00EFA2  0A80               	xorlw	128
 10643  00EFA4  0F75               	addlw	-139
 10644  00EFA6  A0D8               	btfss	status,0,c
 10645  00EFA8  D04F               	goto	l3792
 10646                           
 10647                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 10648  00EFAA  0E00               	movlw	0
 10649  00EFAC  6E0A               	movwf	___awdiv@divisor+1,c
 10650  00EFAE  0E0A               	movlw	10
 10651  00EFB0  6E09               	movwf	___awdiv@divisor,c
 10652  00EFB2  502A               	movf	scale@scl,w,c
 10653  00EFB4  6E07               	movwf	___awdiv@dividend,c
 10654  00EFB6  6A08               	clrf	___awdiv@dividend+1,c
 10655  00EFB8  BE07               	btfsc	___awdiv@dividend,7,c
 10656  00EFBA  0608               	decf	___awdiv@dividend+1,f,c
 10657  00EFBC  EC60  F062         	call	___awdiv	;wreg free
 10658  00EFC0  0E09               	movlw	9
 10659  00EFC2  2407               	addwf	?___awdiv,w,c
 10660  00EFC4  6E0F               	movwf	___wmul@multiplier,c
 10661  00EFC6  0E00               	movlw	0
 10662  00EFC8  2008               	addwfc	?___awdiv+1,w,c
 10663  00EFCA  6E10               	movwf	___wmul@multiplier+1,c
 10664  00EFCC  0E00               	movlw	0
 10665  00EFCE  6E12               	movwf	___wmul@multiplicand+1,c
 10666  00EFD0  0E03               	movlw	3
 10667  00EFD2  6E11               	movwf	___wmul@multiplicand,c
 10668  00EFD4  EC94  F05F         	call	___wmul	;wreg free
 10669  00EFD8  0E78               	movlw	low __powers_
 10670  00EFDA  240F               	addwf	?___wmul,w,c
 10671  00EFDC  6EF6               	movwf	tblptrl,c
 10672  00EFDE  0EFE               	movlw	high __powers_
 10673  00EFE0  2010               	addwfc	?___wmul+1,w,c
 10674  00EFE2  6EF7               	movwf	tblptrh,c
 10675  00EFE4                     	if	0	;There are less than 3 active tblptr bytes
 10676  00EFE4                     	endif
 10677  00EFE4  0009               	tblrd		*+
 10678  00EFE6  CFF5 F015          	movff	tablat,___ftmul@f1
 10679  00EFEA  0009               	tblrd		*+
 10680  00EFEC  CFF5 F016          	movff	tablat,___ftmul@f1+1
 10681  00EFF0  000A               	tblrd		*-
 10682  00EFF2  CFF5 F017          	movff	tablat,___ftmul@f1+2
 10683  00EFF6  0E00               	movlw	0
 10684  00EFF8  6E12               	movwf	___wmul@multiplicand+1,c
 10685  00EFFA  0E03               	movlw	3
 10686  00EFFC  6E11               	movwf	___wmul@multiplicand,c
 10687  00EFFE  0E00               	movlw	0
 10688  00F000  6E04               	movwf	___awmod@divisor+1,c
 10689  00F002  0E0A               	movlw	10
 10690  00F004  6E03               	movwf	___awmod@divisor,c
 10691  00F006  502A               	movf	scale@scl,w,c
 10692  00F008  6E01               	movwf	___awmod@dividend,c
 10693  00F00A  6A02               	clrf	___awmod@dividend+1,c
 10694  00F00C  BE01               	btfsc	___awmod@dividend,7,c
 10695  00F00E  0602               	decf	___awmod@dividend+1,f,c
 10696  00F010  ECFD  F060         	call	___awmod	;wreg free
 10697  00F014  C001  F00F         	movff	?___awmod,___wmul@multiplier
 10698  00F018  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 10699  00F01C  EC94  F05F         	call	___wmul	;wreg free
 10700  00F020  0E78               	movlw	low __powers_
 10701  00F022  240F               	addwf	?___wmul,w,c
 10702  00F024  6EF6               	movwf	tblptrl,c
 10703  00F026  0EFE               	movlw	high __powers_
 10704  00F028  2010               	addwfc	?___wmul+1,w,c
 10705  00F02A  6EF7               	movwf	tblptrh,c
 10706  00F02C                     	if	0	;There are less than 3 active tblptr bytes
 10707  00F02C                     	endif
 10708  00F02C  0009               	tblrd		*+
 10709  00F02E  CFF5 F018          	movff	tablat,___ftmul@f2
 10710  00F032  0009               	tblrd		*+
 10711  00F034  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10712  00F038  000A               	tblrd		*-
 10713  00F03A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10714  00F03E  EC8B  F065         	call	___ftmul	;wreg free
 10715  00F042  D7A6               	goto	L5
 10716  00F044  0012               	return	
 10717  00F046  D000               	goto	l3792
 10718  00F048                     l3792:
 10719                           
 10720                           ;doprnt.c: 440: return _powers_[scl];
 10721  00F048  502A               	movf	scale@scl,w,c
 10722  00F04A  0D03               	mullw	3
 10723  00F04C  0E78               	movlw	low __powers_
 10724  00F04E  24F3               	addwf	prodl,w,c
 10725  00F050  6EF6               	movwf	tblptrl,c
 10726  00F052  0EFE               	movlw	high __powers_
 10727  00F054  20F4               	addwfc	prodh,w,c
 10728  00F056  6EF7               	movwf	tblptrh,c
 10729  00F058                     	if	0	;There are less than 3 active tblptr bytes
 10730  00F058                     	endif
 10731  00F058  0009               	tblrd		*+
 10732  00F05A  CFF5 F024          	movff	tablat,?_scale
 10733  00F05E  0009               	tblrd		*+
 10734  00F060  CFF5 F025          	movff	tablat,?_scale+1
 10735  00F064  000A               	tblrd		*-
 10736  00F066  CFF5 F026          	movff	tablat,?_scale+2
 10737  00F06A  0012               	return	
 10738  00F06C  0012               	return		;funcret
 10739  00F06E                     __end_of_scale:
 10740                           	opt stack 0
 10741                           tblptru	equ	0xFF8
 10742                           tblptrh	equ	0xFF7
 10743                           tblptrl	equ	0xFF6
 10744                           tablat	equ	0xFF5
 10745                           prodh	equ	0xFF4
 10746                           prodl	equ	0xFF3
 10747                           intcon	equ	0xFF2
 10748                           indf0	equ	0xFEF
 10749                           postinc0	equ	0xFEE
 10750                           fsr0h	equ	0xFEA
 10751                           fsr0l	equ	0xFE9
 10752                           wreg	equ	0xFE8
 10753                           postdec1	equ	0xFE5
 10754                           fsr1l	equ	0xFE1
 10755                           indf2	equ	0xFDF
 10756                           postinc2	equ	0xFDE
 10757                           postdec2	equ	0xFDD
 10758                           fsr2h	equ	0xFDA
 10759                           fsr2l	equ	0xFD9
 10760                           status	equ	0xFD8
 10761                           
 10762 ;; *************** function _isdigit *****************
 10763 ;; Defined at:
 10764 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;  c               1    wreg     unsigned char 
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;  c               1    2[COMRAM] unsigned char 
 10769 ;; Return value:  Size  Location     Type
 10770 ;;		None               void
 10771 ;; Registers used:
 10772 ;;		wreg, status,2, status,0
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10781 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10782 ;;Total ram usage:        3 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; This function calls:
 10785 ;;		Nothing
 10786 ;; This function is called by:
 10787 ;;		_sprintf
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           	psect	text29
 10792  00BEBC                     __ptext29:
 10793                           	opt stack 0
 10794  00BEBC                     _isdigit:
 10795                           	opt stack 28
 10796                           
 10797                           ;incstack = 0
 10798                           ;isdigit@c stored from wreg
 10799  00BEBC  6E03               	movwf	isdigit@c,c
 10800  00BEBE  0E00               	movlw	0
 10801  00BEC0  6E02               	movwf	_isdigit$2330,c
 10802  00BEC2  0E3A               	movlw	58
 10803  00BEC4  6003               	cpfslt	isdigit@c,c
 10804  00BEC6  D006               	goto	l3804
 10805  00BEC8  0E2F               	movlw	47
 10806  00BECA  6403               	cpfsgt	isdigit@c,c
 10807  00BECC  D003               	goto	l3804
 10808  00BECE  0E01               	movlw	1
 10809  00BED0  6E02               	movwf	_isdigit$2330,c
 10810  00BED2  D000               	goto	l3804
 10811  00BED4                     l3804:
 10812  00BED4  C002  F001         	movff	_isdigit$2330,??_isdigit
 10813  00BED8  3001               	rrcf	??_isdigit,w,c
 10814  00BEDA  0012               	return	
 10815  00BEDC  0012               	return		;funcret
 10816  00BEDE                     __end_of_isdigit:
 10817                           	opt stack 0
 10818                           tblptru	equ	0xFF8
 10819                           tblptrh	equ	0xFF7
 10820                           tblptrl	equ	0xFF6
 10821                           tablat	equ	0xFF5
 10822                           prodh	equ	0xFF4
 10823                           prodl	equ	0xFF3
 10824                           intcon	equ	0xFF2
 10825                           indf0	equ	0xFEF
 10826                           postinc0	equ	0xFEE
 10827                           fsr0h	equ	0xFEA
 10828                           fsr0l	equ	0xFE9
 10829                           wreg	equ	0xFE8
 10830                           postdec1	equ	0xFE5
 10831                           fsr1l	equ	0xFE1
 10832                           indf2	equ	0xFDF
 10833                           postinc2	equ	0xFDE
 10834                           postdec2	equ	0xFDD
 10835                           fsr2h	equ	0xFDA
 10836                           fsr2l	equ	0xFD9
 10837                           status	equ	0xFD8
 10838                           
 10839 ;; *************** function _fround *****************
 10840 ;; Defined at:
 10841 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 10842 ;; Parameters:    Size  Location     Type
 10843 ;;  prec            1    wreg     unsigned char 
 10844 ;; Auto vars:     Size  Location     Type
 10845 ;;  prec            1   44[COMRAM] unsigned char 
 10846 ;; Return value:  Size  Location     Type
 10847 ;;                  3   35[COMRAM] unsigned char 
 10848 ;; Registers used:
 10849 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10850 ;; Tracked objects:
 10851 ;;		On entry : 0/0
 10852 ;;		On exit  : 0/0
 10853 ;;		Unchanged: 0/0
 10854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10855 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10856 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10858 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10859 ;;Total ram usage:       10 bytes
 10860 ;; Hardware stack levels used:    1
 10861 ;; Hardware stack levels required when called:    2
 10862 ;; This function calls:
 10863 ;;		___awdiv
 10864 ;;		___awmod
 10865 ;;		___ftmul
 10866 ;;		___wmul
 10867 ;; This function is called by:
 10868 ;;		_sprintf
 10869 ;; This function uses a non-reentrant model
 10870 ;;
 10871                           
 10872                           	psect	text30
 10873  00DE50                     __ptext30:
 10874                           	opt stack 0
 10875  00DE50                     _fround:
 10876                           	opt stack 26
 10877                           
 10878                           ;incstack = 0
 10879                           ;fround@prec stored from wreg
 10880  00DE50  6E2D               	movwf	fround@prec,c
 10881                           
 10882                           ;doprnt.c: 413: if(prec>=110)
 10883  00DE52  0E6D               	movlw	109
 10884  00DE54  642D               	cpfsgt	fround@prec,c
 10885  00DE56  D0A0               	goto	l3746
 10886                           
 10887                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10888  00DE58  0E00               	movlw	0
 10889  00DE5A  6E12               	movwf	___wmul@multiplicand+1,c
 10890  00DE5C  0E03               	movlw	3
 10891  00DE5E  6E11               	movwf	___wmul@multiplicand,c
 10892  00DE60  0E00               	movlw	0
 10893  00DE62  6E0A               	movwf	___awdiv@divisor+1,c
 10894  00DE64  0E0A               	movlw	10
 10895  00DE66  6E09               	movwf	___awdiv@divisor,c
 10896  00DE68  0E00               	movlw	0
 10897  00DE6A  6E04               	movwf	___awmod@divisor+1,c
 10898  00DE6C  0E64               	movlw	100
 10899  00DE6E  6E03               	movwf	___awmod@divisor,c
 10900  00DE70  C02D  F001         	movff	fround@prec,___awmod@dividend
 10901  00DE74  6A02               	clrf	___awmod@dividend+1,c
 10902  00DE76  ECFD  F060         	call	___awmod	;wreg free
 10903  00DE7A  C001  F007         	movff	?___awmod,___awdiv@dividend
 10904  00DE7E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
 10905  00DE82  EC60  F062         	call	___awdiv	;wreg free
 10906  00DE86  0E09               	movlw	9
 10907  00DE88  2407               	addwf	?___awdiv,w,c
 10908  00DE8A  6E0F               	movwf	___wmul@multiplier,c
 10909  00DE8C  0E00               	movlw	0
 10910  00DE8E  2008               	addwfc	?___awdiv+1,w,c
 10911  00DE90  6E10               	movwf	___wmul@multiplier+1,c
 10912  00DE92  EC94  F05F         	call	___wmul	;wreg free
 10913  00DE96  0E51               	movlw	low __npowers_
 10914  00DE98  240F               	addwf	?___wmul,w,c
 10915  00DE9A  6EF6               	movwf	tblptrl,c
 10916  00DE9C  0EFE               	movlw	high __npowers_
 10917  00DE9E  2010               	addwfc	?___wmul+1,w,c
 10918  00DEA0  6EF7               	movwf	tblptrh,c
 10919  00DEA2                     	if	0	;There are less than 3 active tblptr bytes
 10920  00DEA2                     	endif
 10921  00DEA2  0009               	tblrd		*+
 10922  00DEA4  CFF5 F018          	movff	tablat,___ftmul@f2
 10923  00DEA8  0009               	tblrd		*+
 10924  00DEAA  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10925  00DEAE  000A               	tblrd		*-
 10926  00DEB0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10927  00DEB4  0E00               	movlw	0
 10928  00DEB6  6E0A               	movwf	___awdiv@divisor+1,c
 10929  00DEB8  0E64               	movlw	100
 10930  00DEBA  6E09               	movwf	___awdiv@divisor,c
 10931  00DEBC  C02D  F007         	movff	fround@prec,___awdiv@dividend
 10932  00DEC0  6A08               	clrf	___awdiv@dividend+1,c
 10933  00DEC2  EC60  F062         	call	___awdiv	;wreg free
 10934  00DEC6  0E12               	movlw	18
 10935  00DEC8  2407               	addwf	?___awdiv,w,c
 10936  00DECA  6E0F               	movwf	___wmul@multiplier,c
 10937  00DECC  0E00               	movlw	0
 10938  00DECE  2008               	addwfc	?___awdiv+1,w,c
 10939  00DED0  6E10               	movwf	___wmul@multiplier+1,c
 10940  00DED2  0E00               	movlw	0
 10941  00DED4  6E12               	movwf	___wmul@multiplicand+1,c
 10942  00DED6  0E03               	movlw	3
 10943  00DED8  6E11               	movwf	___wmul@multiplicand,c
 10944  00DEDA  EC94  F05F         	call	___wmul	;wreg free
 10945  00DEDE  0E51               	movlw	low __npowers_
 10946  00DEE0  240F               	addwf	?___wmul,w,c
 10947  00DEE2  6EF6               	movwf	tblptrl,c
 10948  00DEE4  0EFE               	movlw	high __npowers_
 10949  00DEE6  2010               	addwfc	?___wmul+1,w,c
 10950  00DEE8  6EF7               	movwf	tblptrh,c
 10951  00DEEA                     	if	0	;There are less than 3 active tblptr bytes
 10952  00DEEA                     	endif
 10953  00DEEA  0009               	tblrd		*+
 10954  00DEEC  CFF5 F015          	movff	tablat,___ftmul@f1
 10955  00DEF0  0009               	tblrd		*+
 10956  00DEF2  CFF5 F016          	movff	tablat,___ftmul@f1+1
 10957  00DEF6  000A               	tblrd		*-
 10958  00DEF8  CFF5 F017          	movff	tablat,___ftmul@f1+2
 10959  00DEFC  EC8B  F065         	call	___ftmul	;wreg free
 10960  00DF00  C015  F02A         	movff	?___ftmul,_fround$2564
 10961  00DF04  C016  F02B         	movff	?___ftmul+1,_fround$2564+1
 10962  00DF08  C017  F02C         	movff	?___ftmul+2,_fround$2564+2
 10963                           
 10964                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10965  00DF0C  0E00               	movlw	0
 10966  00DF0E  6E12               	movwf	___wmul@multiplicand+1,c
 10967  00DF10  0E03               	movlw	3
 10968  00DF12  6E11               	movwf	___wmul@multiplicand,c
 10969  00DF14  0E00               	movlw	0
 10970  00DF16  6E04               	movwf	___awmod@divisor+1,c
 10971  00DF18  0E0A               	movlw	10
 10972  00DF1A  6E03               	movwf	___awmod@divisor,c
 10973  00DF1C  C02D  F001         	movff	fround@prec,___awmod@dividend
 10974  00DF20  6A02               	clrf	___awmod@dividend+1,c
 10975  00DF22  ECFD  F060         	call	___awmod	;wreg free
 10976  00DF26  C001  F00F         	movff	?___awmod,___wmul@multiplier
 10977  00DF2A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 10978  00DF2E  EC94  F05F         	call	___wmul	;wreg free
 10979  00DF32  0E51               	movlw	low __npowers_
 10980  00DF34  240F               	addwf	?___wmul,w,c
 10981  00DF36  6EF6               	movwf	tblptrl,c
 10982  00DF38  0EFE               	movlw	high __npowers_
 10983  00DF3A  2010               	addwfc	?___wmul+1,w,c
 10984  00DF3C  6EF7               	movwf	tblptrh,c
 10985  00DF3E                     	if	0	;There are less than 3 active tblptr bytes
 10986  00DF3E                     	endif
 10987  00DF3E  0009               	tblrd		*+
 10988  00DF40  CFF5 F018          	movff	tablat,___ftmul@f2
 10989  00DF44  0009               	tblrd		*+
 10990  00DF46  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10991  00DF4A  000A               	tblrd		*-
 10992  00DF4C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10993  00DF50  C02A  F015         	movff	_fround$2564,___ftmul@f1
 10994  00DF54  C02B  F016         	movff	_fround$2564+1,___ftmul@f1+1
 10995  00DF58  C02C  F017         	movff	_fround$2564+2,___ftmul@f1+2
 10996  00DF5C  EC8B  F065         	call	___ftmul	;wreg free
 10997  00DF60  C015  F027         	movff	?___ftmul,_fround$2565
 10998  00DF64  C016  F028         	movff	?___ftmul+1,_fround$2565+1
 10999  00DF68  C017  F029         	movff	?___ftmul+2,_fround$2565+2
 11000                           
 11001                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11002  00DF6C  C027  F015         	movff	_fround$2565,___ftmul@f1
 11003  00DF70  C028  F016         	movff	_fround$2565+1,___ftmul@f1+1
 11004  00DF74  C029  F017         	movff	_fround$2565+2,___ftmul@f1+2
 11005  00DF78  0E00               	movlw	0
 11006  00DF7A  6E18               	movwf	___ftmul@f2,c
 11007  00DF7C  0E00               	movlw	0
 11008  00DF7E  6E19               	movwf	___ftmul@f2+1,c
 11009  00DF80  0E3F               	movlw	63
 11010  00DF82  6E1A               	movwf	___ftmul@f2+2,c
 11011  00DF84  EC8B  F065         	call	___ftmul	;wreg free
 11012  00DF88  C015  F024         	movff	?___ftmul,?_fround
 11013  00DF8C  C016  F025         	movff	?___ftmul+1,?_fround+1
 11014  00DF90  C017  F026         	movff	?___ftmul+2,?_fround+2
 11015  00DF94  0012               	return	
 11016  00DF96  D062               	goto	l3754
 11017  00DF98                     l3746:
 11018                           
 11019                           ;doprnt.c: 415: else if(prec > 10)
 11020  00DF98  0E0A               	movlw	10
 11021  00DF9A  642D               	cpfsgt	fround@prec,c
 11022  00DF9C  D05F               	goto	l3754
 11023                           
 11024                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 11025  00DF9E  0E00               	movlw	0
 11026  00DFA0  6E12               	movwf	___wmul@multiplicand+1,c
 11027  00DFA2  0E03               	movlw	3
 11028  00DFA4  6E11               	movwf	___wmul@multiplicand,c
 11029  00DFA6  0E00               	movlw	0
 11030  00DFA8  6E04               	movwf	___awmod@divisor+1,c
 11031  00DFAA  0E0A               	movlw	10
 11032  00DFAC  6E03               	movwf	___awmod@divisor,c
 11033  00DFAE  C02D  F001         	movff	fround@prec,___awmod@dividend
 11034  00DFB2  6A02               	clrf	___awmod@dividend+1,c
 11035  00DFB4  ECFD  F060         	call	___awmod	;wreg free
 11036  00DFB8  C001  F00F         	movff	?___awmod,___wmul@multiplier
 11037  00DFBC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 11038  00DFC0  EC94  F05F         	call	___wmul	;wreg free
 11039  00DFC4  0E51               	movlw	low __npowers_
 11040  00DFC6  240F               	addwf	?___wmul,w,c
 11041  00DFC8  6EF6               	movwf	tblptrl,c
 11042  00DFCA  0EFE               	movlw	high __npowers_
 11043  00DFCC  2010               	addwfc	?___wmul+1,w,c
 11044  00DFCE  6EF7               	movwf	tblptrh,c
 11045  00DFD0                     	if	0	;There are less than 3 active tblptr bytes
 11046  00DFD0                     	endif
 11047  00DFD0  0009               	tblrd		*+
 11048  00DFD2  CFF5 F018          	movff	tablat,___ftmul@f2
 11049  00DFD6  0009               	tblrd		*+
 11050  00DFD8  CFF5 F019          	movff	tablat,___ftmul@f2+1
 11051  00DFDC  000A               	tblrd		*-
 11052  00DFDE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 11053  00DFE2  0E00               	movlw	0
 11054  00DFE4  6E0A               	movwf	___awdiv@divisor+1,c
 11055  00DFE6  0E0A               	movlw	10
 11056  00DFE8  6E09               	movwf	___awdiv@divisor,c
 11057  00DFEA  C02D  F007         	movff	fround@prec,___awdiv@dividend
 11058  00DFEE  6A08               	clrf	___awdiv@dividend+1,c
 11059  00DFF0  EC60  F062         	call	___awdiv	;wreg free
 11060  00DFF4  0E09               	movlw	9
 11061  00DFF6  2407               	addwf	?___awdiv,w,c
 11062  00DFF8  6E0F               	movwf	___wmul@multiplier,c
 11063  00DFFA  0E00               	movlw	0
 11064  00DFFC  2008               	addwfc	?___awdiv+1,w,c
 11065  00DFFE  6E10               	movwf	___wmul@multiplier+1,c
 11066  00E000  0E00               	movlw	0
 11067  00E002  6E12               	movwf	___wmul@multiplicand+1,c
 11068  00E004  0E03               	movlw	3
 11069  00E006  6E11               	movwf	___wmul@multiplicand,c
 11070  00E008  EC94  F05F         	call	___wmul	;wreg free
 11071  00E00C  0E51               	movlw	low __npowers_
 11072  00E00E  240F               	addwf	?___wmul,w,c
 11073  00E010  6EF6               	movwf	tblptrl,c
 11074  00E012  0EFE               	movlw	high __npowers_
 11075  00E014  2010               	addwfc	?___wmul+1,w,c
 11076  00E016  6EF7               	movwf	tblptrh,c
 11077  00E018                     	if	0	;There are less than 3 active tblptr bytes
 11078  00E018                     	endif
 11079  00E018  0009               	tblrd		*+
 11080  00E01A  CFF5 F015          	movff	tablat,___ftmul@f1
 11081  00E01E  0009               	tblrd		*+
 11082  00E020  CFF5 F016          	movff	tablat,___ftmul@f1+1
 11083  00E024  000A               	tblrd		*-
 11084  00E026  CFF5 F017          	movff	tablat,___ftmul@f1+2
 11085  00E02A  EC8B  F065         	call	___ftmul	;wreg free
 11086  00E02E  C015  F02A         	movff	?___ftmul,_fround$2564
 11087  00E032  C016  F02B         	movff	?___ftmul+1,_fround$2564+1
 11088  00E036  C017  F02C         	movff	?___ftmul+2,_fround$2564+2
 11089                           
 11090                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 11091  00E03A  C02A  F015         	movff	_fround$2564,___ftmul@f1
 11092  00E03E  C02B  F016         	movff	_fround$2564+1,___ftmul@f1+1
 11093  00E042  C02C  F017         	movff	_fround$2564+2,___ftmul@f1+2
 11094  00E046  0E00               	movlw	0
 11095  00E048  6E18               	movwf	___ftmul@f2,c
 11096  00E04A  0E00               	movlw	0
 11097  00E04C  6E19               	movwf	___ftmul@f2+1,c
 11098  00E04E  0E3F               	movlw	63
 11099  00E050  6E1A               	movwf	___ftmul@f2+2,c
 11100  00E052  EC8B  F065         	call	___ftmul	;wreg free
 11101  00E056  D798               	goto	L6
 11102  00E058  0012               	return	
 11103  00E05A  D000               	goto	l3754
 11104  00E05C                     l3754:
 11105                           
 11106                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 11107  00E05C  502D               	movf	fround@prec,w,c
 11108  00E05E  0D03               	mullw	3
 11109  00E060  0E51               	movlw	low __npowers_
 11110  00E062  24F3               	addwf	prodl,w,c
 11111  00E064  6EF6               	movwf	tblptrl,c
 11112  00E066  0EFE               	movlw	high __npowers_
 11113  00E068  20F4               	addwfc	prodh,w,c
 11114  00E06A  6EF7               	movwf	tblptrh,c
 11115  00E06C                     	if	0	;There are less than 3 active tblptr bytes
 11116  00E06C                     	endif
 11117  00E06C  0009               	tblrd		*+
 11118  00E06E  CFF5 F015          	movff	tablat,___ftmul@f1
 11119  00E072  0009               	tblrd		*+
 11120  00E074  CFF5 F016          	movff	tablat,___ftmul@f1+1
 11121  00E078  000A               	tblrd		*-
 11122  00E07A  CFF5 F017          	movff	tablat,___ftmul@f1+2
 11123  00E07E  0E00               	movlw	0
 11124  00E080  6E18               	movwf	___ftmul@f2,c
 11125  00E082  0E00               	movlw	0
 11126  00E084  6E19               	movwf	___ftmul@f2+1,c
 11127  00E086  0E3F               	movlw	63
 11128  00E088  6E1A               	movwf	___ftmul@f2+2,c
 11129  00E08A  EC8B  F065         	call	___ftmul	;wreg free
 11130  00E08E  C015  F024         	movff	?___ftmul,?_fround
 11131  00E092  C016  F025         	movff	?___ftmul+1,?_fround+1
 11132  00E096  C017  F026         	movff	?___ftmul+2,?_fround+2
 11133  00E09A  0012               	return	
 11134  00E09C  0012               	return		;funcret
 11135  00E09E                     __end_of_fround:
 11136                           	opt stack 0
 11137                           tblptru	equ	0xFF8
 11138                           tblptrh	equ	0xFF7
 11139                           tblptrl	equ	0xFF6
 11140                           tablat	equ	0xFF5
 11141                           prodh	equ	0xFF4
 11142                           prodl	equ	0xFF3
 11143                           intcon	equ	0xFF2
 11144                           indf0	equ	0xFEF
 11145                           postinc0	equ	0xFEE
 11146                           fsr0h	equ	0xFEA
 11147                           fsr0l	equ	0xFE9
 11148                           wreg	equ	0xFE8
 11149                           postdec1	equ	0xFE5
 11150                           fsr1l	equ	0xFE1
 11151                           indf2	equ	0xFDF
 11152                           postinc2	equ	0xFDE
 11153                           postdec2	equ	0xFDD
 11154                           fsr2h	equ	0xFDA
 11155                           fsr2l	equ	0xFD9
 11156                           status	equ	0xFD8
 11157                           
 11158 ;; *************** function ___wmul *****************
 11159 ;; Defined at:
 11160 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;  multiplier      2   14[COMRAM] unsigned int 
 11163 ;;  multiplicand    2   16[COMRAM] unsigned int 
 11164 ;; Auto vars:     Size  Location     Type
 11165 ;;  product         2   18[COMRAM] unsigned int 
 11166 ;; Return value:  Size  Location     Type
 11167 ;;                  2   14[COMRAM] unsigned int 
 11168 ;; Registers used:
 11169 ;;		wreg, status,2, status,0, prodl, prodh
 11170 ;; Tracked objects:
 11171 ;;		On entry : 0/0
 11172 ;;		On exit  : 0/0
 11173 ;;		Unchanged: 0/0
 11174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11175 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11176 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11178 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11179 ;;Total ram usage:        6 bytes
 11180 ;; Hardware stack levels used:    1
 11181 ;; This function calls:
 11182 ;;		Nothing
 11183 ;; This function is called by:
 11184 ;;		_fround
 11185 ;;		_scale
 11186 ;;		_sprintf
 11187 ;; This function uses a non-reentrant model
 11188 ;;
 11189                           
 11190                           	psect	text31
 11191  00BF28                     __ptext31:
 11192                           	opt stack 0
 11193  00BF28                     ___wmul:
 11194                           	opt stack 27
 11195                           
 11196                           ;incstack = 0
 11197  00BF28  500F               	movf	___wmul@multiplier,w,c
 11198  00BF2A  0211               	mulwf	___wmul@multiplicand,c
 11199  00BF2C  CFF3 F013          	movff	prodl,___wmul@product
 11200  00BF30  CFF4 F014          	movff	prodh,___wmul@product+1
 11201  00BF34  500F               	movf	___wmul@multiplier,w,c
 11202  00BF36  0212               	mulwf	___wmul@multiplicand+1,c
 11203  00BF38  50F3               	movf	prodl,w,c
 11204  00BF3A  2614               	addwf	___wmul@product+1,f,c
 11205  00BF3C  5010               	movf	___wmul@multiplier+1,w,c
 11206  00BF3E  0211               	mulwf	___wmul@multiplicand,c
 11207  00BF40  50F3               	movf	prodl,w,c
 11208  00BF42  2614               	addwf	___wmul@product+1,f,c
 11209  00BF44  C013  F00F         	movff	___wmul@product,?___wmul
 11210  00BF48  C014  F010         	movff	___wmul@product+1,?___wmul+1
 11211  00BF4C  0012               	return	
 11212  00BF4E  0012               	return		;funcret
 11213  00BF50                     __end_of___wmul:
 11214                           	opt stack 0
 11215                           tblptru	equ	0xFF8
 11216                           tblptrh	equ	0xFF7
 11217                           tblptrl	equ	0xFF6
 11218                           tablat	equ	0xFF5
 11219                           prodh	equ	0xFF4
 11220                           prodl	equ	0xFF3
 11221                           intcon	equ	0xFF2
 11222                           indf0	equ	0xFEF
 11223                           postinc0	equ	0xFEE
 11224                           fsr0h	equ	0xFEA
 11225                           fsr0l	equ	0xFE9
 11226                           wreg	equ	0xFE8
 11227                           postdec1	equ	0xFE5
 11228                           fsr1l	equ	0xFE1
 11229                           indf2	equ	0xFDF
 11230                           postinc2	equ	0xFDE
 11231                           postdec2	equ	0xFDD
 11232                           fsr2h	equ	0xFDA
 11233                           fsr2l	equ	0xFD9
 11234                           status	equ	0xFD8
 11235                           
 11236 ;; *************** function ___ftmul *****************
 11237 ;; Defined at:
 11238 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 11239 ;; Parameters:    Size  Location     Type
 11240 ;;  f1              3   20[COMRAM] float 
 11241 ;;  f2              3   23[COMRAM] float 
 11242 ;; Auto vars:     Size  Location     Type
 11243 ;;  f3_as_produc    3   30[COMRAM] unsigned um
 11244 ;;  sign            1   34[COMRAM] unsigned char 
 11245 ;;  cntr            1   33[COMRAM] unsigned char 
 11246 ;;  exp             1   29[COMRAM] unsigned char 
 11247 ;; Return value:  Size  Location     Type
 11248 ;;                  3   20[COMRAM] float 
 11249 ;; Registers used:
 11250 ;;		wreg, status,2, status,0, cstack
 11251 ;; Tracked objects:
 11252 ;;		On entry : 0/0
 11253 ;;		On exit  : 0/0
 11254 ;;		Unchanged: 0/0
 11255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11256 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11257 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11258 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11259 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11260 ;;Total ram usage:       15 bytes
 11261 ;; Hardware stack levels used:    1
 11262 ;; Hardware stack levels required when called:    1
 11263 ;; This function calls:
 11264 ;;		___ftpack
 11265 ;; This function is called by:
 11266 ;;		_Iniciar_Display
 11267 ;;		_fround
 11268 ;;		_scale
 11269 ;;		_sprintf
 11270 ;; This function uses a non-reentrant model
 11271 ;;
 11272                           
 11273                           	psect	text32
 11274  00CB16                     __ptext32:
 11275                           	opt stack 0
 11276  00CB16                     ___ftmul:
 11277                           	opt stack 26
 11278                           
 11279                           ;incstack = 0
 11280  00CB16  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
 11281  00CB1A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 11282  00CB1C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 11283  00CB1E  3416               	rlcf	___ftmul@f1+1,w,c
 11284  00CB20  361B               	rlcf	??___ftmul& (0+255),f,c
 11285  00CB22  E301               	bnc	u3481
 11286  00CB24  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 11287  00CB26                     u3481:
 11288  00CB26  501B               	movf	??___ftmul,w,c
 11289  00CB28  6E1E               	movwf	___ftmul@exp,c
 11290  00CB2A  501E               	movf	___ftmul@exp,w,c
 11291  00CB2C  A4D8               	btfss	status,2,c
 11292  00CB2E  D007               	goto	l3544
 11293  00CB30  0E00               	movlw	0
 11294  00CB32  6E15               	movwf	?___ftmul,c
 11295  00CB34  0E00               	movlw	0
 11296  00CB36  6E16               	movwf	?___ftmul+1,c
 11297  00CB38  0E00               	movlw	0
 11298  00CB3A  6E17               	movwf	?___ftmul+2,c
 11299  00CB3C  0012               	return	
 11300  00CB3E                     l3544:
 11301  00CB3E  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
 11302  00CB42  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 11303  00CB44  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 11304  00CB46  3419               	rlcf	___ftmul@f2+1,w,c
 11305  00CB48  361B               	rlcf	??___ftmul& (0+255),f,c
 11306  00CB4A  E301               	bnc	u3501
 11307  00CB4C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 11308  00CB4E                     u3501:
 11309  00CB4E  501B               	movf	??___ftmul,w,c
 11310  00CB50  6E23               	movwf	___ftmul@sign,c
 11311  00CB52  5023               	movf	___ftmul@sign,w,c
 11312  00CB54  A4D8               	btfss	status,2,c
 11313  00CB56  D007               	goto	l3550
 11314  00CB58  0E00               	movlw	0
 11315  00CB5A  6E15               	movwf	?___ftmul,c
 11316  00CB5C  0E00               	movlw	0
 11317  00CB5E  6E16               	movwf	?___ftmul+1,c
 11318  00CB60  0E00               	movlw	0
 11319  00CB62  6E17               	movwf	?___ftmul+2,c
 11320  00CB64  0012               	return	
 11321  00CB66                     l3550:
 11322  00CB66  5023               	movf	___ftmul@sign,w,c
 11323  00CB68  0F7B               	addlw	123
 11324  00CB6A  261E               	addwf	___ftmul@exp,f,c
 11325  00CB6C  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
 11326  00CB70  501A               	movf	___ftmul@f2+2,w,c
 11327  00CB72  1A23               	xorwf	___ftmul@sign,f,c
 11328  00CB74  0E80               	movlw	128
 11329  00CB76  1623               	andwf	___ftmul@sign,f,c
 11330  00CB78  8E16               	bsf	___ftmul@f1+1,7,c
 11331  00CB7A  8E19               	bsf	___ftmul@f2+1,7,c
 11332  00CB7C  0EFF               	movlw	255
 11333  00CB7E  1618               	andwf	___ftmul@f2,f,c
 11334  00CB80  0EFF               	movlw	255
 11335  00CB82  1619               	andwf	___ftmul@f2+1,f,c
 11336  00CB84  0E00               	movlw	0
 11337  00CB86  161A               	andwf	___ftmul@f2+2,f,c
 11338  00CB88  0E00               	movlw	0
 11339  00CB8A  6E1F               	movwf	___ftmul@f3_as_product,c
 11340  00CB8C  0E00               	movlw	0
 11341  00CB8E  6E20               	movwf	___ftmul@f3_as_product+1,c
 11342  00CB90  0E00               	movlw	0
 11343  00CB92  6E21               	movwf	___ftmul@f3_as_product+2,c
 11344  00CB94  0E07               	movlw	7
 11345  00CB96  6E22               	movwf	___ftmul@cntr,c
 11346  00CB98  D000               	goto	l3564
 11347  00CB9A                     l3564:
 11348  00CB9A  A015               	btfss	___ftmul@f1,0,c
 11349  00CB9C  D007               	goto	l3568
 11350  00CB9E  5018               	movf	___ftmul@f2,w,c
 11351  00CBA0  261F               	addwf	___ftmul@f3_as_product,f,c
 11352  00CBA2  5019               	movf	___ftmul@f2+1,w,c
 11353  00CBA4  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 11354  00CBA6  501A               	movf	___ftmul@f2+2,w,c
 11355  00CBA8  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 11356  00CBAA  D000               	goto	l3568
 11357  00CBAC                     l3568:
 11358  00CBAC  90D8               	bcf	status,0,c
 11359  00CBAE  3217               	rrcf	___ftmul@f1+2,f,c
 11360  00CBB0  3216               	rrcf	___ftmul@f1+1,f,c
 11361  00CBB2  3215               	rrcf	___ftmul@f1,f,c
 11362  00CBB4  90D8               	bcf	status,0,c
 11363  00CBB6  3618               	rlcf	___ftmul@f2,f,c
 11364  00CBB8  3619               	rlcf	___ftmul@f2+1,f,c
 11365  00CBBA  361A               	rlcf	___ftmul@f2+2,f,c
 11366  00CBBC  2E22               	decfsz	___ftmul@cntr,f,c
 11367  00CBBE  D7ED               	goto	l3564
 11368  00CBC0  D000               	goto	l3572
 11369  00CBC2                     l3572:
 11370  00CBC2  0E09               	movlw	9
 11371  00CBC4  6E22               	movwf	___ftmul@cntr,c
 11372  00CBC6  D000               	goto	l3574
 11373  00CBC8                     l3574:
 11374  00CBC8  A015               	btfss	___ftmul@f1,0,c
 11375  00CBCA  D007               	goto	l3578
 11376  00CBCC  5018               	movf	___ftmul@f2,w,c
 11377  00CBCE  261F               	addwf	___ftmul@f3_as_product,f,c
 11378  00CBD0  5019               	movf	___ftmul@f2+1,w,c
 11379  00CBD2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 11380  00CBD4  501A               	movf	___ftmul@f2+2,w,c
 11381  00CBD6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 11382  00CBD8  D000               	goto	l3578
 11383  00CBDA                     l3578:
 11384  00CBDA  90D8               	bcf	status,0,c
 11385  00CBDC  3217               	rrcf	___ftmul@f1+2,f,c
 11386  00CBDE  3216               	rrcf	___ftmul@f1+1,f,c
 11387  00CBE0  3215               	rrcf	___ftmul@f1,f,c
 11388  00CBE2  90D8               	bcf	status,0,c
 11389  00CBE4  3221               	rrcf	___ftmul@f3_as_product+2,f,c
 11390  00CBE6  3220               	rrcf	___ftmul@f3_as_product+1,f,c
 11391  00CBE8  321F               	rrcf	___ftmul@f3_as_product,f,c
 11392  00CBEA  2E22               	decfsz	___ftmul@cntr,f,c
 11393  00CBEC  D7ED               	goto	l3574
 11394  00CBEE  D000               	goto	l3582
 11395  00CBF0                     l3582:
 11396  00CBF0  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11397  00CBF4  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11398  00CBF8  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11399  00CBFC  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
 11400  00CC00  C023  F005         	movff	___ftmul@sign,___ftpack@sign
 11401  00CC04  ECBE  F063         	call	___ftpack	;wreg free
 11402  00CC08  C001  F015         	movff	?___ftpack,?___ftmul
 11403  00CC0C  C002  F016         	movff	?___ftpack+1,?___ftmul+1
 11404  00CC10  C003  F017         	movff	?___ftpack+2,?___ftmul+2
 11405  00CC14  0012               	return	
 11406  00CC16  0012               	return		;funcret
 11407  00CC18                     __end_of___ftmul:
 11408                           	opt stack 0
 11409                           tblptru	equ	0xFF8
 11410                           tblptrh	equ	0xFF7
 11411                           tblptrl	equ	0xFF6
 11412                           tablat	equ	0xFF5
 11413                           prodh	equ	0xFF4
 11414                           prodl	equ	0xFF3
 11415                           intcon	equ	0xFF2
 11416                           indf0	equ	0xFEF
 11417                           postinc0	equ	0xFEE
 11418                           fsr0h	equ	0xFEA
 11419                           fsr0l	equ	0xFE9
 11420                           wreg	equ	0xFE8
 11421                           postdec1	equ	0xFE5
 11422                           fsr1l	equ	0xFE1
 11423                           indf2	equ	0xFDF
 11424                           postinc2	equ	0xFDE
 11425                           postdec2	equ	0xFDD
 11426                           fsr2h	equ	0xFDA
 11427                           fsr2l	equ	0xFD9
 11428                           status	equ	0xFD8
 11429                           
 11430 ;; *************** function ___awmod *****************
 11431 ;; Defined at:
 11432 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;  dividend        2    0[COMRAM] int 
 11435 ;;  divisor         2    2[COMRAM] int 
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;  sign            1    5[COMRAM] unsigned char 
 11438 ;;  counter         1    4[COMRAM] unsigned char 
 11439 ;; Return value:  Size  Location     Type
 11440 ;;                  2    0[COMRAM] int 
 11441 ;; Registers used:
 11442 ;;		wreg, status,2, status,0
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11448 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11449 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11451 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11452 ;;Total ram usage:        6 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; This function calls:
 11455 ;;		Nothing
 11456 ;; This function is called by:
 11457 ;;		_fround
 11458 ;;		_scale
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           	psect	text33
 11463  00C1FA                     __ptext33:
 11464                           	opt stack 0
 11465  00C1FA                     ___awmod:
 11466                           	opt stack 27
 11467                           
 11468                           ;incstack = 0
 11469  00C1FA  0E00               	movlw	0
 11470  00C1FC  6E06               	movwf	___awmod@sign,c
 11471  00C1FE  AE02               	btfss	___awmod@dividend+1,7,c
 11472  00C200  D007               	goto	l3638
 11473  00C202  6C01               	negf	___awmod@dividend,c
 11474  00C204  1E02               	comf	___awmod@dividend+1,f,c
 11475  00C206  B0D8               	btfsc	status,0,c
 11476  00C208  2A02               	incf	___awmod@dividend+1,f,c
 11477  00C20A  0E01               	movlw	1
 11478  00C20C  6E06               	movwf	___awmod@sign,c
 11479  00C20E  D000               	goto	l3638
 11480  00C210                     l3638:
 11481  00C210  AE04               	btfss	___awmod@divisor+1,7,c
 11482  00C212  D005               	goto	l3642
 11483  00C214  6C03               	negf	___awmod@divisor,c
 11484  00C216  1E04               	comf	___awmod@divisor+1,f,c
 11485  00C218  B0D8               	btfsc	status,0,c
 11486  00C21A  2A04               	incf	___awmod@divisor+1,f,c
 11487  00C21C  D000               	goto	l3642
 11488  00C21E                     l3642:
 11489  00C21E  5003               	movf	___awmod@divisor,w,c
 11490  00C220  1004               	iorwf	___awmod@divisor+1,w,c
 11491  00C222  B4D8               	btfsc	status,2,c
 11492  00C224  D01D               	goto	l3658
 11493  00C226  0E01               	movlw	1
 11494  00C228  6E05               	movwf	___awmod@counter,c
 11495  00C22A  D005               	goto	l3648
 11496  00C22C                     l3646:
 11497  00C22C  90D8               	bcf	status,0,c
 11498  00C22E  3603               	rlcf	___awmod@divisor,f,c
 11499  00C230  3604               	rlcf	___awmod@divisor+1,f,c
 11500  00C232  2A05               	incf	___awmod@counter,f,c
 11501  00C234  D000               	goto	l3648
 11502  00C236                     l3648:
 11503  00C236  BE04               	btfsc	___awmod@divisor+1,7,c
 11504  00C238  D002               	goto	l3650
 11505  00C23A  D7F8               	goto	l3646
 11506  00C23C  D000               	goto	l3650
 11507  00C23E                     l3650:
 11508  00C23E  5003               	movf	___awmod@divisor,w,c
 11509  00C240  5C01               	subwf	___awmod@dividend,w,c
 11510  00C242  5004               	movf	___awmod@divisor+1,w,c
 11511  00C244  5802               	subwfb	___awmod@dividend+1,w,c
 11512  00C246  A0D8               	btfss	status,0,c
 11513  00C248  D005               	goto	l3654
 11514  00C24A  5003               	movf	___awmod@divisor,w,c
 11515  00C24C  5E01               	subwf	___awmod@dividend,f,c
 11516  00C24E  5004               	movf	___awmod@divisor+1,w,c
 11517  00C250  5A02               	subwfb	___awmod@dividend+1,f,c
 11518  00C252  D000               	goto	l3654
 11519  00C254                     l3654:
 11520  00C254  90D8               	bcf	status,0,c
 11521  00C256  3204               	rrcf	___awmod@divisor+1,f,c
 11522  00C258  3203               	rrcf	___awmod@divisor,f,c
 11523  00C25A  2E05               	decfsz	___awmod@counter,f,c
 11524  00C25C  D7F0               	goto	l3650
 11525  00C25E  D000               	goto	l3658
 11526  00C260                     l3658:
 11527  00C260  5006               	movf	___awmod@sign,w,c
 11528  00C262  B4D8               	btfsc	status,2,c
 11529  00C264  D005               	goto	l3662
 11530  00C266  6C01               	negf	___awmod@dividend,c
 11531  00C268  1E02               	comf	___awmod@dividend+1,f,c
 11532  00C26A  B0D8               	btfsc	status,0,c
 11533  00C26C  2A02               	incf	___awmod@dividend+1,f,c
 11534  00C26E  D000               	goto	l3662
 11535  00C270                     l3662:
 11536  00C270  C001  F001         	movff	___awmod@dividend,?___awmod
 11537  00C274  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 11538  00C278  0012               	return	
 11539  00C27A  0012               	return		;funcret
 11540  00C27C                     __end_of___awmod:
 11541                           	opt stack 0
 11542                           tblptru	equ	0xFF8
 11543                           tblptrh	equ	0xFF7
 11544                           tblptrl	equ	0xFF6
 11545                           tablat	equ	0xFF5
 11546                           prodh	equ	0xFF4
 11547                           prodl	equ	0xFF3
 11548                           intcon	equ	0xFF2
 11549                           indf0	equ	0xFEF
 11550                           postinc0	equ	0xFEE
 11551                           fsr0h	equ	0xFEA
 11552                           fsr0l	equ	0xFE9
 11553                           wreg	equ	0xFE8
 11554                           postdec1	equ	0xFE5
 11555                           fsr1l	equ	0xFE1
 11556                           indf2	equ	0xFDF
 11557                           postinc2	equ	0xFDE
 11558                           postdec2	equ	0xFDD
 11559                           fsr2h	equ	0xFDA
 11560                           fsr2l	equ	0xFD9
 11561                           status	equ	0xFD8
 11562                           
 11563 ;; *************** function ___awdiv *****************
 11564 ;; Defined at:
 11565 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;  dividend        2    6[COMRAM] int 
 11568 ;;  divisor         2    8[COMRAM] int 
 11569 ;; Auto vars:     Size  Location     Type
 11570 ;;  quotient        2   12[COMRAM] int 
 11571 ;;  sign            1   11[COMRAM] unsigned char 
 11572 ;;  counter         1   10[COMRAM] unsigned char 
 11573 ;; Return value:  Size  Location     Type
 11574 ;;                  2    6[COMRAM] int 
 11575 ;; Registers used:
 11576 ;;		wreg, status,2, status,0
 11577 ;; Tracked objects:
 11578 ;;		On entry : 0/0
 11579 ;;		On exit  : 0/0
 11580 ;;		Unchanged: 0/0
 11581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11582 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11583 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11585 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11586 ;;Total ram usage:        8 bytes
 11587 ;; Hardware stack levels used:    1
 11588 ;; This function calls:
 11589 ;;		Nothing
 11590 ;; This function is called by:
 11591 ;;		_Write_RTC
 11592 ;;		_fround
 11593 ;;		_scale
 11594 ;;		_sprintf
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           	psect	text34
 11599  00C4C0                     __ptext34:
 11600                           	opt stack 0
 11601  00C4C0                     ___awdiv:
 11602                           	opt stack 29
 11603                           
 11604                           ;incstack = 0
 11605  00C4C0  0E00               	movlw	0
 11606  00C4C2  6E0C               	movwf	___awdiv@sign,c
 11607  00C4C4  AE0A               	btfss	___awdiv@divisor+1,7,c
 11608  00C4C6  D007               	goto	l3594
 11609  00C4C8  6C09               	negf	___awdiv@divisor,c
 11610  00C4CA  1E0A               	comf	___awdiv@divisor+1,f,c
 11611  00C4CC  B0D8               	btfsc	status,0,c
 11612  00C4CE  2A0A               	incf	___awdiv@divisor+1,f,c
 11613  00C4D0  0E01               	movlw	1
 11614  00C4D2  6E0C               	movwf	___awdiv@sign,c
 11615  00C4D4  D000               	goto	l3594
 11616  00C4D6                     l3594:
 11617  00C4D6  AE08               	btfss	___awdiv@dividend+1,7,c
 11618  00C4D8  D007               	goto	l3600
 11619  00C4DA  6C07               	negf	___awdiv@dividend,c
 11620  00C4DC  1E08               	comf	___awdiv@dividend+1,f,c
 11621  00C4DE  B0D8               	btfsc	status,0,c
 11622  00C4E0  2A08               	incf	___awdiv@dividend+1,f,c
 11623  00C4E2  0E01               	movlw	1
 11624  00C4E4  1A0C               	xorwf	___awdiv@sign,f,c
 11625  00C4E6  D000               	goto	l3600
 11626  00C4E8                     l3600:
 11627  00C4E8  0E00               	movlw	0
 11628  00C4EA  6E0E               	movwf	___awdiv@quotient+1,c
 11629  00C4EC  0E00               	movlw	0
 11630  00C4EE  6E0D               	movwf	___awdiv@quotient,c
 11631  00C4F0  5009               	movf	___awdiv@divisor,w,c
 11632  00C4F2  100A               	iorwf	___awdiv@divisor+1,w,c
 11633  00C4F4  B4D8               	btfsc	status,2,c
 11634  00C4F6  D021               	goto	l3622
 11635  00C4F8  0E01               	movlw	1
 11636  00C4FA  6E0B               	movwf	___awdiv@counter,c
 11637  00C4FC  D005               	goto	l3608
 11638  00C4FE                     l3606:
 11639  00C4FE  90D8               	bcf	status,0,c
 11640  00C500  3609               	rlcf	___awdiv@divisor,f,c
 11641  00C502  360A               	rlcf	___awdiv@divisor+1,f,c
 11642  00C504  2A0B               	incf	___awdiv@counter,f,c
 11643  00C506  D000               	goto	l3608
 11644  00C508                     l3608:
 11645  00C508  BE0A               	btfsc	___awdiv@divisor+1,7,c
 11646  00C50A  D002               	goto	l3610
 11647  00C50C  D7F8               	goto	l3606
 11648  00C50E  D000               	goto	l3610
 11649  00C510                     l3610:
 11650  00C510  90D8               	bcf	status,0,c
 11651  00C512  360D               	rlcf	___awdiv@quotient,f,c
 11652  00C514  360E               	rlcf	___awdiv@quotient+1,f,c
 11653  00C516  5009               	movf	___awdiv@divisor,w,c
 11654  00C518  5C07               	subwf	___awdiv@dividend,w,c
 11655  00C51A  500A               	movf	___awdiv@divisor+1,w,c
 11656  00C51C  5808               	subwfb	___awdiv@dividend+1,w,c
 11657  00C51E  A0D8               	btfss	status,0,c
 11658  00C520  D006               	goto	l3618
 11659  00C522  5009               	movf	___awdiv@divisor,w,c
 11660  00C524  5E07               	subwf	___awdiv@dividend,f,c
 11661  00C526  500A               	movf	___awdiv@divisor+1,w,c
 11662  00C528  5A08               	subwfb	___awdiv@dividend+1,f,c
 11663  00C52A  800D               	bsf	___awdiv@quotient,0,c
 11664  00C52C  D000               	goto	l3618
 11665  00C52E                     l3618:
 11666  00C52E  90D8               	bcf	status,0,c
 11667  00C530  320A               	rrcf	___awdiv@divisor+1,f,c
 11668  00C532  3209               	rrcf	___awdiv@divisor,f,c
 11669  00C534  2E0B               	decfsz	___awdiv@counter,f,c
 11670  00C536  D7EC               	goto	l3610
 11671  00C538  D000               	goto	l3622
 11672  00C53A                     l3622:
 11673  00C53A  500C               	movf	___awdiv@sign,w,c
 11674  00C53C  B4D8               	btfsc	status,2,c
 11675  00C53E  D005               	goto	l3626
 11676  00C540  6C0D               	negf	___awdiv@quotient,c
 11677  00C542  1E0E               	comf	___awdiv@quotient+1,f,c
 11678  00C544  B0D8               	btfsc	status,0,c
 11679  00C546  2A0E               	incf	___awdiv@quotient+1,f,c
 11680  00C548  D000               	goto	l3626
 11681  00C54A                     l3626:
 11682  00C54A  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 11683  00C54E  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 11684  00C552  0012               	return	
 11685  00C554  0012               	return		;funcret
 11686  00C556                     __end_of___awdiv:
 11687                           	opt stack 0
 11688                           tblptru	equ	0xFF8
 11689                           tblptrh	equ	0xFF7
 11690                           tblptrl	equ	0xFF6
 11691                           tablat	equ	0xFF5
 11692                           prodh	equ	0xFF4
 11693                           prodl	equ	0xFF3
 11694                           intcon	equ	0xFF2
 11695                           indf0	equ	0xFEF
 11696                           postinc0	equ	0xFEE
 11697                           fsr0h	equ	0xFEA
 11698                           fsr0l	equ	0xFE9
 11699                           wreg	equ	0xFE8
 11700                           postdec1	equ	0xFE5
 11701                           fsr1l	equ	0xFE1
 11702                           indf2	equ	0xFDF
 11703                           postinc2	equ	0xFDE
 11704                           postdec2	equ	0xFDD
 11705                           fsr2h	equ	0xFDA
 11706                           fsr2l	equ	0xFD9
 11707                           status	equ	0xFD8
 11708                           
 11709 ;; *************** function __tdiv_to_l_ *****************
 11710 ;; Defined at:
 11711 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;  f1              3    0[COMRAM] float 
 11714 ;;  f2              3    3[COMRAM] float 
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;  quot            4    9[COMRAM] unsigned long 
 11717 ;;  exp1            1   14[COMRAM] unsigned char 
 11718 ;;  cntr            1   13[COMRAM] unsigned char 
 11719 ;; Return value:  Size  Location     Type
 11720 ;;                  4    0[COMRAM] unsigned long 
 11721 ;; Registers used:
 11722 ;;		wreg, status,2, status,0
 11723 ;; Tracked objects:
 11724 ;;		On entry : 0/0
 11725 ;;		On exit  : 0/0
 11726 ;;		Unchanged: 0/0
 11727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11728 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11729 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11730 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11731 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11732 ;;Total ram usage:       15 bytes
 11733 ;; Hardware stack levels used:    1
 11734 ;; This function calls:
 11735 ;;		Nothing
 11736 ;; This function is called by:
 11737 ;;		_sprintf
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           	psect	text35
 11742  00D424                     __ptext35:
 11743                           	opt stack 0
 11744  00D424                     __tdiv_to_l_:
 11745                           	opt stack 28
 11746                           
 11747                           ;incstack = 0
 11748  00D424  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 11749  00D428  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 11750  00D42A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 11751  00D42C  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
 11752  00D42E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 11753  00D430  E301               	bnc	u3811
 11754  00D432  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 11755  00D434                     u3811:
 11756  00D434  5007               	movf	??__tdiv_to_l_,w,c
 11757  00D436  6E0F               	movwf	__tdiv_to_l_@exp1,c
 11758  00D438  500F               	movf	__tdiv_to_l_@exp1,w,c
 11759  00D43A  A4D8               	btfss	status,2,c
 11760  00D43C  D009               	goto	l3814
 11761  00D43E  0E00               	movlw	0
 11762  00D440  6E01               	movwf	?__tdiv_to_l_,c
 11763  00D442  0E00               	movlw	0
 11764  00D444  6E02               	movwf	?__tdiv_to_l_+1,c
 11765  00D446  0E00               	movlw	0
 11766  00D448  6E03               	movwf	?__tdiv_to_l_+2,c
 11767  00D44A  0E00               	movlw	0
 11768  00D44C  6E04               	movwf	?__tdiv_to_l_+3,c
 11769  00D44E  0012               	return	
 11770  00D450                     l3814:
 11771  00D450  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 11772  00D454  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 11773  00D456  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 11774  00D458  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
 11775  00D45A  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 11776  00D45C  E301               	bnc	u3831
 11777  00D45E  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 11778  00D460                     u3831:
 11779  00D460  5007               	movf	??__tdiv_to_l_,w,c
 11780  00D462  6E0E               	movwf	__tdiv_to_l_@cntr,c
 11781  00D464  500E               	movf	__tdiv_to_l_@cntr,w,c
 11782  00D466  A4D8               	btfss	status,2,c
 11783  00D468  D009               	goto	l3820
 11784  00D46A  0E00               	movlw	0
 11785  00D46C  6E01               	movwf	?__tdiv_to_l_,c
 11786  00D46E  0E00               	movlw	0
 11787  00D470  6E02               	movwf	?__tdiv_to_l_+1,c
 11788  00D472  0E00               	movlw	0
 11789  00D474  6E03               	movwf	?__tdiv_to_l_+2,c
 11790  00D476  0E00               	movlw	0
 11791  00D478  6E04               	movwf	?__tdiv_to_l_+3,c
 11792  00D47A  0012               	return	
 11793  00D47C                     l3820:
 11794  00D47C  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
 11795  00D47E  0EFF               	movlw	255
 11796  00D480  1601               	andwf	__tdiv_to_l_@f1,f,c
 11797  00D482  0EFF               	movlw	255
 11798  00D484  1602               	andwf	__tdiv_to_l_@f1+1,f,c
 11799  00D486  0E00               	movlw	0
 11800  00D488  1603               	andwf	__tdiv_to_l_@f1+2,f,c
 11801  00D48A  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
 11802  00D48C  0EFF               	movlw	255
 11803  00D48E  1604               	andwf	__tdiv_to_l_@f2,f,c
 11804  00D490  0EFF               	movlw	255
 11805  00D492  1605               	andwf	__tdiv_to_l_@f2+1,f,c
 11806  00D494  0E00               	movlw	0
 11807  00D496  1606               	andwf	__tdiv_to_l_@f2+2,f,c
 11808  00D498  0E00               	movlw	0
 11809  00D49A  6E0A               	movwf	__tdiv_to_l_@quot,c
 11810  00D49C  0E00               	movlw	0
 11811  00D49E  6E0B               	movwf	__tdiv_to_l_@quot+1,c
 11812  00D4A0  0E00               	movlw	0
 11813  00D4A2  6E0C               	movwf	__tdiv_to_l_@quot+2,c
 11814  00D4A4  0E00               	movlw	0
 11815  00D4A6  6E0D               	movwf	__tdiv_to_l_@quot+3,c
 11816  00D4A8  0E7F               	movlw	127
 11817  00D4AA  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 11818  00D4AC  500E               	movf	__tdiv_to_l_@cntr,w,c
 11819  00D4AE  0F98               	addlw	152
 11820  00D4B0  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 11821  00D4B2  0E18               	movlw	24
 11822  00D4B4  6E0E               	movwf	__tdiv_to_l_@cntr,c
 11823  00D4B6                     l1133:
 11824  00D4B6  90D8               	bcf	status,0,c
 11825  00D4B8  360A               	rlcf	__tdiv_to_l_@quot,f,c
 11826  00D4BA  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 11827  00D4BC  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 11828  00D4BE  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 11829  00D4C0  5004               	movf	__tdiv_to_l_@f2,w,c
 11830  00D4C2  5C01               	subwf	__tdiv_to_l_@f1,w,c
 11831  00D4C4  5005               	movf	__tdiv_to_l_@f2+1,w,c
 11832  00D4C6  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
 11833  00D4C8  5006               	movf	__tdiv_to_l_@f2+2,w,c
 11834  00D4CA  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
 11835  00D4CC  A0D8               	btfss	status,0,c
 11836  00D4CE  D007               	goto	l1134
 11837  00D4D0  5004               	movf	__tdiv_to_l_@f2,w,c
 11838  00D4D2  5E01               	subwf	__tdiv_to_l_@f1,f,c
 11839  00D4D4  5005               	movf	__tdiv_to_l_@f2+1,w,c
 11840  00D4D6  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
 11841  00D4D8  5006               	movf	__tdiv_to_l_@f2+2,w,c
 11842  00D4DA  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
 11843  00D4DC  800A               	bsf	__tdiv_to_l_@quot,0,c
 11844  00D4DE                     l1134:
 11845  00D4DE  90D8               	bcf	status,0,c
 11846  00D4E0  3601               	rlcf	__tdiv_to_l_@f1,f,c
 11847  00D4E2  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
 11848  00D4E4  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
 11849  00D4E6  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
 11850  00D4E8  D7E6               	goto	l1133
 11851  00D4EA  D000               	goto	l3842
 11852  00D4EC                     l3842:
 11853  00D4EC  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
 11854  00D4EE  D017               	goto	l3854
 11855  00D4F0  500F               	movf	__tdiv_to_l_@exp1,w,c
 11856  00D4F2  0A80               	xorlw	128
 11857  00D4F4  0F97               	addlw	151
 11858  00D4F6  B0D8               	btfsc	status,0,c
 11859  00D4F8  D00A               	goto	l3850
 11860  00D4FA  0E00               	movlw	0
 11861  00D4FC  6E01               	movwf	?__tdiv_to_l_,c
 11862  00D4FE  0E00               	movlw	0
 11863  00D500  6E02               	movwf	?__tdiv_to_l_+1,c
 11864  00D502  0E00               	movlw	0
 11865  00D504  6E03               	movwf	?__tdiv_to_l_+2,c
 11866  00D506  0E00               	movlw	0
 11867  00D508  6E04               	movwf	?__tdiv_to_l_+3,c
 11868  00D50A  0012               	return	
 11869  00D50C  D000               	goto	l3850
 11870  00D50E                     l3850:
 11871  00D50E  90D8               	bcf	status,0,c
 11872  00D510  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
 11873  00D512  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
 11874  00D514  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
 11875  00D516  320A               	rrcf	__tdiv_to_l_@quot,f,c
 11876  00D518  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
 11877  00D51A  D7F9               	goto	l3850
 11878  00D51C  D017               	goto	l1140
 11879  00D51E                     l3854:
 11880  00D51E  0E17               	movlw	23
 11881  00D520  640F               	cpfsgt	__tdiv_to_l_@exp1,c
 11882  00D522  D011               	goto	l3862
 11883  00D524  0E00               	movlw	0
 11884  00D526  6E01               	movwf	?__tdiv_to_l_,c
 11885  00D528  0E00               	movlw	0
 11886  00D52A  6E02               	movwf	?__tdiv_to_l_+1,c
 11887  00D52C  0E00               	movlw	0
 11888  00D52E  6E03               	movwf	?__tdiv_to_l_+2,c
 11889  00D530  0E00               	movlw	0
 11890  00D532  6E04               	movwf	?__tdiv_to_l_+3,c
 11891  00D534  0012               	return	
 11892  00D536  D007               	goto	l3862
 11893  00D538                     l3860:
 11894  00D538  90D8               	bcf	status,0,c
 11895  00D53A  360A               	rlcf	__tdiv_to_l_@quot,f,c
 11896  00D53C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 11897  00D53E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 11898  00D540  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 11899  00D542  060F               	decf	__tdiv_to_l_@exp1,f,c
 11900  00D544  D000               	goto	l3862
 11901  00D546                     l3862:
 11902  00D546  500F               	movf	__tdiv_to_l_@exp1,w,c
 11903  00D548  A4D8               	btfss	status,2,c
 11904  00D54A  D7F6               	goto	l3860
 11905  00D54C                     l1140:
 11906  00D54C  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 11907  00D550  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 11908  00D554  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 11909  00D558  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 11910  00D55C  0012               	return		;funcret
 11911  00D55E                     __end_of__tdiv_to_l_:
 11912                           	opt stack 0
 11913                           tblptru	equ	0xFF8
 11914                           tblptrh	equ	0xFF7
 11915                           tblptrl	equ	0xFF6
 11916                           tablat	equ	0xFF5
 11917                           prodh	equ	0xFF4
 11918                           prodl	equ	0xFF3
 11919                           intcon	equ	0xFF2
 11920                           indf0	equ	0xFEF
 11921                           postinc0	equ	0xFEE
 11922                           fsr0h	equ	0xFEA
 11923                           fsr0l	equ	0xFE9
 11924                           wreg	equ	0xFE8
 11925                           postdec1	equ	0xFE5
 11926                           fsr1l	equ	0xFE1
 11927                           indf2	equ	0xFDF
 11928                           postinc2	equ	0xFDE
 11929                           postdec2	equ	0xFDD
 11930                           fsr2h	equ	0xFDA
 11931                           fsr2l	equ	0xFD9
 11932                           status	equ	0xFD8
 11933                           
 11934 ;; *************** function __div_to_l_ *****************
 11935 ;; Defined at:
 11936 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 11937 ;; Parameters:    Size  Location     Type
 11938 ;;  f1              3    0[COMRAM] unsigned long 
 11939 ;;  f2              3    3[COMRAM] unsigned long 
 11940 ;; Auto vars:     Size  Location     Type
 11941 ;;  quot            4    6[COMRAM] unsigned long 
 11942 ;;  exp1            1   11[COMRAM] unsigned char 
 11943 ;;  cntr            1   10[COMRAM] unsigned char 
 11944 ;; Return value:  Size  Location     Type
 11945 ;;                  4    0[COMRAM] unsigned long 
 11946 ;; Registers used:
 11947 ;;		wreg, status,2, status,0
 11948 ;; Tracked objects:
 11949 ;;		On entry : 0/0
 11950 ;;		On exit  : 0/0
 11951 ;;		Unchanged: 0/0
 11952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11953 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11954 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11956 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11957 ;;Total ram usage:       12 bytes
 11958 ;; Hardware stack levels used:    1
 11959 ;; This function calls:
 11960 ;;		Nothing
 11961 ;; This function is called by:
 11962 ;;		_sprintf
 11963 ;; This function uses a non-reentrant model
 11964 ;;
 11965                           
 11966                           	psect	text36
 11967  00D2F0                     __ptext36:
 11968                           	opt stack 0
 11969  00D2F0                     __div_to_l_:
 11970                           	opt stack 28
 11971                           
 11972                           ;incstack = 0
 11973  00D2F0  3403               	rlcf	__div_to_l_@f1+2,w,c
 11974  00D2F2  3404               	rlcf	__div_to_l_@f1+3,w,c
 11975  00D2F4  6E0C               	movwf	__div_to_l_@exp1,c
 11976  00D2F6  500C               	movf	__div_to_l_@exp1,w,c
 11977  00D2F8  A4D8               	btfss	status,2,c
 11978  00D2FA  D009               	goto	l3870
 11979  00D2FC  0E00               	movlw	0
 11980  00D2FE  6E01               	movwf	?__div_to_l_,c
 11981  00D300  0E00               	movlw	0
 11982  00D302  6E02               	movwf	?__div_to_l_+1,c
 11983  00D304  0E00               	movlw	0
 11984  00D306  6E03               	movwf	?__div_to_l_+2,c
 11985  00D308  0E00               	movlw	0
 11986  00D30A  6E04               	movwf	?__div_to_l_+3,c
 11987  00D30C  0012               	return	
 11988  00D30E                     l3870:
 11989  00D30E  3406               	rlcf	__div_to_l_@f2+2,w,c
 11990  00D310  3407               	rlcf	__div_to_l_@f2+3,w,c
 11991  00D312  6E0B               	movwf	__div_to_l_@cntr,c
 11992  00D314  500B               	movf	__div_to_l_@cntr,w,c
 11993  00D316  A4D8               	btfss	status,2,c
 11994  00D318  D009               	goto	l3876
 11995  00D31A  0E00               	movlw	0
 11996  00D31C  6E01               	movwf	?__div_to_l_,c
 11997  00D31E  0E00               	movlw	0
 11998  00D320  6E02               	movwf	?__div_to_l_+1,c
 11999  00D322  0E00               	movlw	0
 12000  00D324  6E03               	movwf	?__div_to_l_+2,c
 12001  00D326  0E00               	movlw	0
 12002  00D328  6E04               	movwf	?__div_to_l_+3,c
 12003  00D32A  0012               	return	
 12004  00D32C                     l3876:
 12005  00D32C  8E03               	bsf	__div_to_l_@f1+2,7,c
 12006  00D32E  0EFF               	movlw	255
 12007  00D330  1601               	andwf	__div_to_l_@f1,f,c
 12008  00D332  0EFF               	movlw	255
 12009  00D334  1602               	andwf	__div_to_l_@f1+1,f,c
 12010  00D336  0EFF               	movlw	255
 12011  00D338  1603               	andwf	__div_to_l_@f1+2,f,c
 12012  00D33A  0E00               	movlw	0
 12013  00D33C  1604               	andwf	__div_to_l_@f1+3,f,c
 12014  00D33E  8E06               	bsf	__div_to_l_@f2+2,7,c
 12015  00D340  0EFF               	movlw	255
 12016  00D342  1604               	andwf	__div_to_l_@f2,f,c
 12017  00D344  0EFF               	movlw	255
 12018  00D346  1605               	andwf	__div_to_l_@f2+1,f,c
 12019  00D348  0EFF               	movlw	255
 12020  00D34A  1606               	andwf	__div_to_l_@f2+2,f,c
 12021  00D34C  0E00               	movlw	0
 12022  00D34E  1607               	andwf	__div_to_l_@f2+3,f,c
 12023  00D350  0E00               	movlw	0
 12024  00D352  6E07               	movwf	__div_to_l_@quot,c
 12025  00D354  0E00               	movlw	0
 12026  00D356  6E08               	movwf	__div_to_l_@quot+1,c
 12027  00D358  0E00               	movlw	0
 12028  00D35A  6E09               	movwf	__div_to_l_@quot+2,c
 12029  00D35C  0E00               	movlw	0
 12030  00D35E  6E0A               	movwf	__div_to_l_@quot+3,c
 12031  00D360  0E7F               	movlw	127
 12032  00D362  5E0C               	subwf	__div_to_l_@exp1,f,c
 12033  00D364  500B               	movf	__div_to_l_@cntr,w,c
 12034  00D366  0FA0               	addlw	160
 12035  00D368  5E0C               	subwf	__div_to_l_@exp1,f,c
 12036  00D36A  0E20               	movlw	32
 12037  00D36C  6E0B               	movwf	__div_to_l_@cntr,c
 12038  00D36E  D000               	goto	l3890
 12039  00D370                     l3890:
 12040  00D370  90D8               	bcf	status,0,c
 12041  00D372  3607               	rlcf	__div_to_l_@quot,f,c
 12042  00D374  3608               	rlcf	__div_to_l_@quot+1,f,c
 12043  00D376  3609               	rlcf	__div_to_l_@quot+2,f,c
 12044  00D378  360A               	rlcf	__div_to_l_@quot+3,f,c
 12045  00D37A  5004               	movf	__div_to_l_@f2,w,c
 12046  00D37C  5C01               	subwf	__div_to_l_@f1,w,c
 12047  00D37E  5005               	movf	__div_to_l_@f2+1,w,c
 12048  00D380  5802               	subwfb	__div_to_l_@f1+1,w,c
 12049  00D382  5006               	movf	__div_to_l_@f2+2,w,c
 12050  00D384  5803               	subwfb	__div_to_l_@f1+2,w,c
 12051  00D386  5007               	movf	__div_to_l_@f2+3,w,c
 12052  00D388  5804               	subwfb	__div_to_l_@f1+3,w,c
 12053  00D38A  A0D8               	btfss	status,0,c
 12054  00D38C  D00A               	goto	l3898
 12055  00D38E  5004               	movf	__div_to_l_@f2,w,c
 12056  00D390  5E01               	subwf	__div_to_l_@f1,f,c
 12057  00D392  5005               	movf	__div_to_l_@f2+1,w,c
 12058  00D394  5A02               	subwfb	__div_to_l_@f1+1,f,c
 12059  00D396  5006               	movf	__div_to_l_@f2+2,w,c
 12060  00D398  5A03               	subwfb	__div_to_l_@f1+2,f,c
 12061  00D39A  5007               	movf	__div_to_l_@f2+3,w,c
 12062  00D39C  5A04               	subwfb	__div_to_l_@f1+3,f,c
 12063  00D39E  8007               	bsf	__div_to_l_@quot,0,c
 12064  00D3A0  D000               	goto	l3898
 12065  00D3A2                     l3898:
 12066  00D3A2  90D8               	bcf	status,0,c
 12067  00D3A4  3601               	rlcf	__div_to_l_@f1,f,c
 12068  00D3A6  3602               	rlcf	__div_to_l_@f1+1,f,c
 12069  00D3A8  3603               	rlcf	__div_to_l_@f1+2,f,c
 12070  00D3AA  3604               	rlcf	__div_to_l_@f1+3,f,c
 12071  00D3AC  2E0B               	decfsz	__div_to_l_@cntr,f,c
 12072  00D3AE  D7E0               	goto	l3890
 12073  00D3B0  D000               	goto	l3902
 12074  00D3B2                     l3902:
 12075  00D3B2  AE0C               	btfss	__div_to_l_@exp1,7,c
 12076  00D3B4  D017               	goto	l3914
 12077  00D3B6  500C               	movf	__div_to_l_@exp1,w,c
 12078  00D3B8  0A80               	xorlw	128
 12079  00D3BA  0F9F               	addlw	159
 12080  00D3BC  B0D8               	btfsc	status,0,c
 12081  00D3BE  D00A               	goto	l3910
 12082  00D3C0  0E00               	movlw	0
 12083  00D3C2  6E01               	movwf	?__div_to_l_,c
 12084  00D3C4  0E00               	movlw	0
 12085  00D3C6  6E02               	movwf	?__div_to_l_+1,c
 12086  00D3C8  0E00               	movlw	0
 12087  00D3CA  6E03               	movwf	?__div_to_l_+2,c
 12088  00D3CC  0E00               	movlw	0
 12089  00D3CE  6E04               	movwf	?__div_to_l_+3,c
 12090  00D3D0  0012               	return	
 12091  00D3D2  D000               	goto	l3910
 12092  00D3D4                     l3910:
 12093  00D3D4  90D8               	bcf	status,0,c
 12094  00D3D6  320A               	rrcf	__div_to_l_@quot+3,f,c
 12095  00D3D8  3209               	rrcf	__div_to_l_@quot+2,f,c
 12096  00D3DA  3208               	rrcf	__div_to_l_@quot+1,f,c
 12097  00D3DC  3207               	rrcf	__div_to_l_@quot,f,c
 12098  00D3DE  3E0C               	incfsz	__div_to_l_@exp1,f,c
 12099  00D3E0  D7F9               	goto	l3910
 12100  00D3E2  D017               	goto	l1019
 12101  00D3E4                     l3914:
 12102  00D3E4  0E1F               	movlw	31
 12103  00D3E6  640C               	cpfsgt	__div_to_l_@exp1,c
 12104  00D3E8  D011               	goto	l3922
 12105  00D3EA  0E00               	movlw	0
 12106  00D3EC  6E01               	movwf	?__div_to_l_,c
 12107  00D3EE  0E00               	movlw	0
 12108  00D3F0  6E02               	movwf	?__div_to_l_+1,c
 12109  00D3F2  0E00               	movlw	0
 12110  00D3F4  6E03               	movwf	?__div_to_l_+2,c
 12111  00D3F6  0E00               	movlw	0
 12112  00D3F8  6E04               	movwf	?__div_to_l_+3,c
 12113  00D3FA  0012               	return	
 12114  00D3FC  D007               	goto	l3922
 12115  00D3FE                     l3920:
 12116  00D3FE  90D8               	bcf	status,0,c
 12117  00D400  3607               	rlcf	__div_to_l_@quot,f,c
 12118  00D402  3608               	rlcf	__div_to_l_@quot+1,f,c
 12119  00D404  3609               	rlcf	__div_to_l_@quot+2,f,c
 12120  00D406  360A               	rlcf	__div_to_l_@quot+3,f,c
 12121  00D408  060C               	decf	__div_to_l_@exp1,f,c
 12122  00D40A  D000               	goto	l3922
 12123  00D40C                     l3922:
 12124  00D40C  500C               	movf	__div_to_l_@exp1,w,c
 12125  00D40E  A4D8               	btfss	status,2,c
 12126  00D410  D7F6               	goto	l3920
 12127  00D412                     l1019:
 12128  00D412  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
 12129  00D416  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 12130  00D41A  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 12131  00D41E  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 12132  00D422  0012               	return		;funcret
 12133  00D424                     __end_of__div_to_l_:
 12134                           	opt stack 0
 12135                           tblptru	equ	0xFF8
 12136                           tblptrh	equ	0xFF7
 12137                           tblptrl	equ	0xFF6
 12138                           tablat	equ	0xFF5
 12139                           prodh	equ	0xFF4
 12140                           prodl	equ	0xFF3
 12141                           intcon	equ	0xFF2
 12142                           indf0	equ	0xFEF
 12143                           postinc0	equ	0xFEE
 12144                           fsr0h	equ	0xFEA
 12145                           fsr0l	equ	0xFE9
 12146                           wreg	equ	0xFE8
 12147                           postdec1	equ	0xFE5
 12148                           fsr1l	equ	0xFE1
 12149                           indf2	equ	0xFDF
 12150                           postinc2	equ	0xFDE
 12151                           postdec2	equ	0xFDD
 12152                           fsr2h	equ	0xFDA
 12153                           fsr2l	equ	0xFD9
 12154                           status	equ	0xFD8
 12155                           
 12156 ;; *************** function ___lltoft *****************
 12157 ;; Defined at:
 12158 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 12159 ;; Parameters:    Size  Location     Type
 12160 ;;  c               4    8[COMRAM] unsigned long 
 12161 ;; Auto vars:     Size  Location     Type
 12162 ;;  exp             1   16[COMRAM] unsigned char 
 12163 ;; Return value:  Size  Location     Type
 12164 ;;                  3    8[COMRAM] float 
 12165 ;; Registers used:
 12166 ;;		wreg, status,2, status,0, cstack
 12167 ;; Tracked objects:
 12168 ;;		On entry : 0/0
 12169 ;;		On exit  : 0/0
 12170 ;;		Unchanged: 0/0
 12171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12172 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12174 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12175 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12176 ;;Total ram usage:        9 bytes
 12177 ;; Hardware stack levels used:    1
 12178 ;; Hardware stack levels required when called:    1
 12179 ;; This function calls:
 12180 ;;		___ftpack
 12181 ;; This function is called by:
 12182 ;;		_sprintf
 12183 ;; This function uses a non-reentrant model
 12184 ;;
 12185                           
 12186                           	psect	text37
 12187  00C03E                     __ptext37:
 12188                           	opt stack 0
 12189  00C03E                     ___lltoft:
 12190                           	opt stack 27
 12191                           
 12192                           ;incstack = 0
 12193  00C03E  0E8E               	movlw	142
 12194  00C040  6E11               	movwf	___lltoft@exp,c
 12195  00C042  D007               	goto	l4042
 12196  00C044                     l4040:
 12197  00C044  90D8               	bcf	status,0,c
 12198  00C046  320C               	rrcf	___lltoft@c+3,f,c
 12199  00C048  320B               	rrcf	___lltoft@c+2,f,c
 12200  00C04A  320A               	rrcf	___lltoft@c+1,f,c
 12201  00C04C  3209               	rrcf	___lltoft@c,f,c
 12202  00C04E  2A11               	incf	___lltoft@exp,f,c
 12203  00C050  D000               	goto	l4042
 12204  00C052                     l4042:
 12205  00C052  0E00               	movlw	0
 12206  00C054  1409               	andwf	___lltoft@c,w,c
 12207  00C056  6E0D               	movwf	??___lltoft& (0+255),c
 12208  00C058  0E00               	movlw	0
 12209  00C05A  140A               	andwf	___lltoft@c+1,w,c
 12210  00C05C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12211  00C05E  0E00               	movlw	0
 12212  00C060  140B               	andwf	___lltoft@c+2,w,c
 12213  00C062  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12214  00C064  0EFF               	movlw	255
 12215  00C066  140C               	andwf	___lltoft@c+3,w,c
 12216  00C068  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12217  00C06A  500D               	movf	??___lltoft,w,c
 12218  00C06C  100E               	iorwf	??___lltoft+1,w,c
 12219  00C06E  100F               	iorwf	??___lltoft+2,w,c
 12220  00C070  1010               	iorwf	??___lltoft+3,w,c
 12221  00C072  A4D8               	btfss	status,2,c
 12222  00C074  D7E7               	goto	l4040
 12223  00C076  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12224  00C07A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12225  00C07E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12226  00C082  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12227  00C086  0E00               	movlw	0
 12228  00C088  6E05               	movwf	___ftpack@sign,c
 12229  00C08A  ECBE  F063         	call	___ftpack	;wreg free
 12230  00C08E  C001  F009         	movff	?___ftpack,?___lltoft
 12231  00C092  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12232  00C096  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12233  00C09A  0012               	return	
 12234  00C09C  0012               	return		;funcret
 12235  00C09E                     __end_of___lltoft:
 12236                           	opt stack 0
 12237                           tblptru	equ	0xFF8
 12238                           tblptrh	equ	0xFF7
 12239                           tblptrl	equ	0xFF6
 12240                           tablat	equ	0xFF5
 12241                           prodh	equ	0xFF4
 12242                           prodl	equ	0xFF3
 12243                           intcon	equ	0xFF2
 12244                           indf0	equ	0xFEF
 12245                           postinc0	equ	0xFEE
 12246                           fsr0h	equ	0xFEA
 12247                           fsr0l	equ	0xFE9
 12248                           wreg	equ	0xFE8
 12249                           postdec1	equ	0xFE5
 12250                           fsr1l	equ	0xFE1
 12251                           indf2	equ	0xFDF
 12252                           postinc2	equ	0xFDE
 12253                           postdec2	equ	0xFDD
 12254                           fsr2h	equ	0xFDA
 12255                           fsr2l	equ	0xFD9
 12256                           status	equ	0xFD8
 12257                           
 12258 ;; *************** function ___llmod *****************
 12259 ;; Defined at:
 12260 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 12261 ;; Parameters:    Size  Location     Type
 12262 ;;  dividend        4   13[COMRAM] unsigned long 
 12263 ;;  divisor         4   17[COMRAM] unsigned long 
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;  counter         1   21[COMRAM] unsigned char 
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  4   13[COMRAM] unsigned long 
 12268 ;; Registers used:
 12269 ;;		wreg, status,2, status,0
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12275 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12276 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12278 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12279 ;;Total ram usage:        9 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; This function calls:
 12282 ;;		Nothing
 12283 ;; This function is called by:
 12284 ;;		_sprintf
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288                           	psect	text38
 12289  00C10C                     __ptext38:
 12290                           	opt stack 0
 12291  00C10C                     ___llmod:
 12292                           	opt stack 28
 12293                           
 12294                           ;incstack = 0
 12295  00C10C  5012               	movf	___llmod@divisor,w,c
 12296  00C10E  1013               	iorwf	___llmod@divisor+1,w,c
 12297  00C110  1014               	iorwf	___llmod@divisor+2,w,c
 12298  00C112  1015               	iorwf	___llmod@divisor+3,w,c
 12299  00C114  B4D8               	btfsc	status,2,c
 12300  00C116  D029               	goto	l1230
 12301  00C118  0E01               	movlw	1
 12302  00C11A  6E16               	movwf	___llmod@counter,c
 12303  00C11C  D007               	goto	l4028
 12304  00C11E                     l4026:
 12305  00C11E  90D8               	bcf	status,0,c
 12306  00C120  3612               	rlcf	___llmod@divisor,f,c
 12307  00C122  3613               	rlcf	___llmod@divisor+1,f,c
 12308  00C124  3614               	rlcf	___llmod@divisor+2,f,c
 12309  00C126  3615               	rlcf	___llmod@divisor+3,f,c
 12310  00C128  2A16               	incf	___llmod@counter,f,c
 12311  00C12A  D000               	goto	l4028
 12312  00C12C                     l4028:
 12313  00C12C  BE15               	btfsc	___llmod@divisor+3,7,c
 12314  00C12E  D002               	goto	l4030
 12315  00C130  D7F6               	goto	l4026
 12316  00C132  D000               	goto	l4030
 12317  00C134                     l4030:
 12318  00C134  5012               	movf	___llmod@divisor,w,c
 12319  00C136  5C0E               	subwf	___llmod@dividend,w,c
 12320  00C138  5013               	movf	___llmod@divisor+1,w,c
 12321  00C13A  580F               	subwfb	___llmod@dividend+1,w,c
 12322  00C13C  5014               	movf	___llmod@divisor+2,w,c
 12323  00C13E  5810               	subwfb	___llmod@dividend+2,w,c
 12324  00C140  5015               	movf	___llmod@divisor+3,w,c
 12325  00C142  5811               	subwfb	___llmod@dividend+3,w,c
 12326  00C144  A0D8               	btfss	status,0,c
 12327  00C146  D009               	goto	l4034
 12328  00C148  5012               	movf	___llmod@divisor,w,c
 12329  00C14A  5E0E               	subwf	___llmod@dividend,f,c
 12330  00C14C  5013               	movf	___llmod@divisor+1,w,c
 12331  00C14E  5A0F               	subwfb	___llmod@dividend+1,f,c
 12332  00C150  5014               	movf	___llmod@divisor+2,w,c
 12333  00C152  5A10               	subwfb	___llmod@dividend+2,f,c
 12334  00C154  5015               	movf	___llmod@divisor+3,w,c
 12335  00C156  5A11               	subwfb	___llmod@dividend+3,f,c
 12336  00C158  D000               	goto	l4034
 12337  00C15A                     l4034:
 12338  00C15A  90D8               	bcf	status,0,c
 12339  00C15C  3215               	rrcf	___llmod@divisor+3,f,c
 12340  00C15E  3214               	rrcf	___llmod@divisor+2,f,c
 12341  00C160  3213               	rrcf	___llmod@divisor+1,f,c
 12342  00C162  3212               	rrcf	___llmod@divisor,f,c
 12343  00C164  2E16               	decfsz	___llmod@counter,f,c
 12344  00C166  D7E6               	goto	l4030
 12345  00C168  D000               	goto	l1230
 12346  00C16A                     l1230:
 12347  00C16A  C00E  F00E         	movff	___llmod@dividend,?___llmod
 12348  00C16E  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
 12349  00C172  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
 12350  00C176  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
 12351  00C17A  0012               	return		;funcret
 12352  00C17C                     __end_of___llmod:
 12353                           	opt stack 0
 12354                           tblptru	equ	0xFF8
 12355                           tblptrh	equ	0xFF7
 12356                           tblptrl	equ	0xFF6
 12357                           tablat	equ	0xFF5
 12358                           prodh	equ	0xFF4
 12359                           prodl	equ	0xFF3
 12360                           intcon	equ	0xFF2
 12361                           indf0	equ	0xFEF
 12362                           postinc0	equ	0xFEE
 12363                           fsr0h	equ	0xFEA
 12364                           fsr0l	equ	0xFE9
 12365                           wreg	equ	0xFE8
 12366                           postdec1	equ	0xFE5
 12367                           fsr1l	equ	0xFE1
 12368                           indf2	equ	0xFDF
 12369                           postinc2	equ	0xFDE
 12370                           postdec2	equ	0xFDD
 12371                           fsr2h	equ	0xFDA
 12372                           fsr2l	equ	0xFD9
 12373                           status	equ	0xFD8
 12374                           
 12375 ;; *************** function ___lldiv *****************
 12376 ;; Defined at:
 12377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 12378 ;; Parameters:    Size  Location     Type
 12379 ;;  dividend        4    0[COMRAM] unsigned long 
 12380 ;;  divisor         4    4[COMRAM] unsigned long 
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;  quotient        4    8[COMRAM] unsigned long 
 12383 ;;  counter         1   12[COMRAM] unsigned char 
 12384 ;; Return value:  Size  Location     Type
 12385 ;;                  4    0[COMRAM] unsigned long 
 12386 ;; Registers used:
 12387 ;;		wreg, status,2, status,0
 12388 ;; Tracked objects:
 12389 ;;		On entry : 0/0
 12390 ;;		On exit  : 0/0
 12391 ;;		Unchanged: 0/0
 12392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12393 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12394 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12396 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12397 ;;Total ram usage:       13 bytes
 12398 ;; Hardware stack levels used:    1
 12399 ;; This function calls:
 12400 ;;		Nothing
 12401 ;; This function is called by:
 12402 ;;		_sprintf
 12403 ;; This function uses a non-reentrant model
 12404 ;;
 12405                           
 12406                           	psect	text39
 12407  00C27C                     __ptext39:
 12408                           	opt stack 0
 12409  00C27C                     ___lldiv:
 12410                           	opt stack 28
 12411                           
 12412                           ;incstack = 0
 12413  00C27C  0E00               	movlw	0
 12414  00C27E  6E09               	movwf	___lldiv@quotient,c
 12415  00C280  0E00               	movlw	0
 12416  00C282  6E0A               	movwf	___lldiv@quotient+1,c
 12417  00C284  0E00               	movlw	0
 12418  00C286  6E0B               	movwf	___lldiv@quotient+2,c
 12419  00C288  0E00               	movlw	0
 12420  00C28A  6E0C               	movwf	___lldiv@quotient+3,c
 12421  00C28C  5005               	movf	___lldiv@divisor,w,c
 12422  00C28E  1006               	iorwf	___lldiv@divisor+1,w,c
 12423  00C290  1007               	iorwf	___lldiv@divisor+2,w,c
 12424  00C292  1008               	iorwf	___lldiv@divisor+3,w,c
 12425  00C294  B4D8               	btfsc	status,2,c
 12426  00C296  D02F               	goto	l1220
 12427  00C298  0E01               	movlw	1
 12428  00C29A  6E0D               	movwf	___lldiv@counter,c
 12429  00C29C  D007               	goto	l4008
 12430  00C29E                     l4006:
 12431  00C29E  90D8               	bcf	status,0,c
 12432  00C2A0  3605               	rlcf	___lldiv@divisor,f,c
 12433  00C2A2  3606               	rlcf	___lldiv@divisor+1,f,c
 12434  00C2A4  3607               	rlcf	___lldiv@divisor+2,f,c
 12435  00C2A6  3608               	rlcf	___lldiv@divisor+3,f,c
 12436  00C2A8  2A0D               	incf	___lldiv@counter,f,c
 12437  00C2AA  D000               	goto	l4008
 12438  00C2AC                     l4008:
 12439  00C2AC  BE08               	btfsc	___lldiv@divisor+3,7,c
 12440  00C2AE  D002               	goto	l4010
 12441  00C2B0  D7F6               	goto	l4006
 12442  00C2B2  D000               	goto	l4010
 12443  00C2B4                     l4010:
 12444  00C2B4  90D8               	bcf	status,0,c
 12445  00C2B6  3609               	rlcf	___lldiv@quotient,f,c
 12446  00C2B8  360A               	rlcf	___lldiv@quotient+1,f,c
 12447  00C2BA  360B               	rlcf	___lldiv@quotient+2,f,c
 12448  00C2BC  360C               	rlcf	___lldiv@quotient+3,f,c
 12449  00C2BE  5005               	movf	___lldiv@divisor,w,c
 12450  00C2C0  5C01               	subwf	___lldiv@dividend,w,c
 12451  00C2C2  5006               	movf	___lldiv@divisor+1,w,c
 12452  00C2C4  5802               	subwfb	___lldiv@dividend+1,w,c
 12453  00C2C6  5007               	movf	___lldiv@divisor+2,w,c
 12454  00C2C8  5803               	subwfb	___lldiv@dividend+2,w,c
 12455  00C2CA  5008               	movf	___lldiv@divisor+3,w,c
 12456  00C2CC  5804               	subwfb	___lldiv@dividend+3,w,c
 12457  00C2CE  A0D8               	btfss	status,0,c
 12458  00C2D0  D00A               	goto	l4018
 12459  00C2D2  5005               	movf	___lldiv@divisor,w,c
 12460  00C2D4  5E01               	subwf	___lldiv@dividend,f,c
 12461  00C2D6  5006               	movf	___lldiv@divisor+1,w,c
 12462  00C2D8  5A02               	subwfb	___lldiv@dividend+1,f,c
 12463  00C2DA  5007               	movf	___lldiv@divisor+2,w,c
 12464  00C2DC  5A03               	subwfb	___lldiv@dividend+2,f,c
 12465  00C2DE  5008               	movf	___lldiv@divisor+3,w,c
 12466  00C2E0  5A04               	subwfb	___lldiv@dividend+3,f,c
 12467  00C2E2  8009               	bsf	___lldiv@quotient,0,c
 12468  00C2E4  D000               	goto	l4018
 12469  00C2E6                     l4018:
 12470  00C2E6  90D8               	bcf	status,0,c
 12471  00C2E8  3208               	rrcf	___lldiv@divisor+3,f,c
 12472  00C2EA  3207               	rrcf	___lldiv@divisor+2,f,c
 12473  00C2EC  3206               	rrcf	___lldiv@divisor+1,f,c
 12474  00C2EE  3205               	rrcf	___lldiv@divisor,f,c
 12475  00C2F0  2E0D               	decfsz	___lldiv@counter,f,c
 12476  00C2F2  D7E0               	goto	l4010
 12477  00C2F4  D000               	goto	l1220
 12478  00C2F6                     l1220:
 12479  00C2F6  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12480  00C2FA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12481  00C2FE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12482  00C302  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12483  00C306  0012               	return		;funcret
 12484  00C308                     __end_of___lldiv:
 12485                           	opt stack 0
 12486                           tblptru	equ	0xFF8
 12487                           tblptrh	equ	0xFF7
 12488                           tblptrl	equ	0xFF6
 12489                           tablat	equ	0xFF5
 12490                           prodh	equ	0xFF4
 12491                           prodl	equ	0xFF3
 12492                           intcon	equ	0xFF2
 12493                           indf0	equ	0xFEF
 12494                           postinc0	equ	0xFEE
 12495                           fsr0h	equ	0xFEA
 12496                           fsr0l	equ	0xFE9
 12497                           wreg	equ	0xFE8
 12498                           postdec1	equ	0xFE5
 12499                           fsr1l	equ	0xFE1
 12500                           indf2	equ	0xFDF
 12501                           postinc2	equ	0xFDE
 12502                           postdec2	equ	0xFDD
 12503                           fsr2h	equ	0xFDA
 12504                           fsr2l	equ	0xFD9
 12505                           status	equ	0xFD8
 12506                           
 12507 ;; *************** function ___fttol *****************
 12508 ;; Defined at:
 12509 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 12510 ;; Parameters:    Size  Location     Type
 12511 ;;  f1              3   42[COMRAM] float 
 12512 ;; Auto vars:     Size  Location     Type
 12513 ;;  lval            4   52[COMRAM] unsigned long 
 12514 ;;  exp1            1   56[COMRAM] unsigned char 
 12515 ;;  sign1           1   51[COMRAM] unsigned char 
 12516 ;; Return value:  Size  Location     Type
 12517 ;;                  4   42[COMRAM] long 
 12518 ;; Registers used:
 12519 ;;		wreg, status,2, status,0
 12520 ;; Tracked objects:
 12521 ;;		On entry : 0/0
 12522 ;;		On exit  : 0/0
 12523 ;;		Unchanged: 0/0
 12524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12525 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12526 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12527 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12528 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12529 ;;Total ram usage:       15 bytes
 12530 ;; Hardware stack levels used:    1
 12531 ;; This function calls:
 12532 ;;		Nothing
 12533 ;; This function is called by:
 12534 ;;		_sprintf
 12535 ;; This function uses a non-reentrant model
 12536 ;;
 12537                           
 12538                           	psect	text40
 12539  00CA14                     __ptext40:
 12540                           	opt stack 0
 12541  00CA14                     ___fttol:
 12542                           	opt stack 28
 12543                           
 12544                           ;incstack = 0
 12545  00CA14  C02D  F02F         	movff	___fttol@f1+2,??___fttol
 12546  00CA18  6A30               	clrf	(??___fttol+1)& (0+255),c
 12547  00CA1A  6A31               	clrf	(??___fttol+2)& (0+255),c
 12548  00CA1C  342C               	rlcf	___fttol@f1+1,w,c
 12549  00CA1E  362F               	rlcf	??___fttol& (0+255),f,c
 12550  00CA20  E301               	bnc	u4021
 12551  00CA22  8030               	bsf	(??___fttol+1)& (0+255),0,c
 12552  00CA24                     u4021:
 12553  00CA24  502F               	movf	??___fttol,w,c
 12554  00CA26  6E39               	movwf	___fttol@exp1,c
 12555  00CA28  5039               	movf	___fttol@exp1,w,c
 12556  00CA2A  A4D8               	btfss	status,2,c
 12557  00CA2C  D009               	goto	l3960
 12558  00CA2E  0E00               	movlw	0
 12559  00CA30  6E2B               	movwf	?___fttol,c
 12560  00CA32  0E00               	movlw	0
 12561  00CA34  6E2C               	movwf	?___fttol+1,c
 12562  00CA36  0E00               	movlw	0
 12563  00CA38  6E2D               	movwf	?___fttol+2,c
 12564  00CA3A  0E00               	movlw	0
 12565  00CA3C  6E2E               	movwf	?___fttol+3,c
 12566  00CA3E  0012               	return	
 12567  00CA40                     l3960:
 12568  00CA40  0E17               	movlw	23
 12569  00CA42  6E2F               	movwf	??___fttol& (0+255),c
 12570  00CA44  C02B  F030         	movff	___fttol@f1,??___fttol+1
 12571  00CA48  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
 12572  00CA4C  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
 12573  00CA50  282F               	incf	??___fttol,w,c
 12574  00CA52  6E33               	movwf	(??___fttol+4)& (0+255),c
 12575  00CA54  D004               	goto	u4040
 12576  00CA56                     u4045:
 12577  00CA56  90D8               	bcf	status,0,c
 12578  00CA58  3232               	rrcf	??___fttol+3,f,c
 12579  00CA5A  3231               	rrcf	??___fttol+2,f,c
 12580  00CA5C  3230               	rrcf	??___fttol+1,f,c
 12581  00CA5E                     u4040:
 12582  00CA5E  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
 12583  00CA60  D7FA               	goto	u4045
 12584  00CA62  5030               	movf	??___fttol+1,w,c
 12585  00CA64  6E34               	movwf	___fttol@sign1,c
 12586  00CA66  8E2C               	bsf	___fttol@f1+1,7,c
 12587  00CA68  0EFF               	movlw	255
 12588  00CA6A  162B               	andwf	___fttol@f1,f,c
 12589  00CA6C  0EFF               	movlw	255
 12590  00CA6E  162C               	andwf	___fttol@f1+1,f,c
 12591  00CA70  0E00               	movlw	0
 12592  00CA72  162D               	andwf	___fttol@f1+2,f,c
 12593  00CA74  502B               	movf	___fttol@f1,w,c
 12594  00CA76  6E35               	movwf	___fttol@lval,c
 12595  00CA78  502C               	movf	___fttol@f1+1,w,c
 12596  00CA7A  6E36               	movwf	___fttol@lval+1,c
 12597  00CA7C  502D               	movf	___fttol@f1+2,w,c
 12598  00CA7E  6E37               	movwf	___fttol@lval+2,c
 12599  00CA80  6A38               	clrf	___fttol@lval+3,c
 12600  00CA82  0E8E               	movlw	142
 12601  00CA84  5E39               	subwf	___fttol@exp1,f,c
 12602  00CA86  AE39               	btfss	___fttol@exp1,7,c
 12603  00CA88  D017               	goto	l3982
 12604  00CA8A  5039               	movf	___fttol@exp1,w,c
 12605  00CA8C  0A80               	xorlw	128
 12606  00CA8E  0F8F               	addlw	143
 12607  00CA90  B0D8               	btfsc	status,0,c
 12608  00CA92  D00A               	goto	l3978
 12609  00CA94  0E00               	movlw	0
 12610  00CA96  6E2B               	movwf	?___fttol,c
 12611  00CA98  0E00               	movlw	0
 12612  00CA9A  6E2C               	movwf	?___fttol+1,c
 12613  00CA9C  0E00               	movlw	0
 12614  00CA9E  6E2D               	movwf	?___fttol+2,c
 12615  00CAA0  0E00               	movlw	0
 12616  00CAA2  6E2E               	movwf	?___fttol+3,c
 12617  00CAA4  0012               	return	
 12618  00CAA6  D000               	goto	l3978
 12619  00CAA8                     l3978:
 12620  00CAA8  90D8               	bcf	status,0,c
 12621  00CAAA  3238               	rrcf	___fttol@lval+3,f,c
 12622  00CAAC  3237               	rrcf	___fttol@lval+2,f,c
 12623  00CAAE  3236               	rrcf	___fttol@lval+1,f,c
 12624  00CAB0  3235               	rrcf	___fttol@lval,f,c
 12625  00CAB2  3E39               	incfsz	___fttol@exp1,f,c
 12626  00CAB4  D7F9               	goto	l3978
 12627  00CAB6  D019               	goto	l3992
 12628  00CAB8                     l3982:
 12629  00CAB8  0E17               	movlw	23
 12630  00CABA  6439               	cpfsgt	___fttol@exp1,c
 12631  00CABC  D011               	goto	l3990
 12632  00CABE  0E00               	movlw	0
 12633  00CAC0  6E2B               	movwf	?___fttol,c
 12634  00CAC2  0E00               	movlw	0
 12635  00CAC4  6E2C               	movwf	?___fttol+1,c
 12636  00CAC6  0E00               	movlw	0
 12637  00CAC8  6E2D               	movwf	?___fttol+2,c
 12638  00CACA  0E00               	movlw	0
 12639  00CACC  6E2E               	movwf	?___fttol+3,c
 12640  00CACE  0012               	return	
 12641  00CAD0  D007               	goto	l3990
 12642  00CAD2                     l3988:
 12643  00CAD2  90D8               	bcf	status,0,c
 12644  00CAD4  3635               	rlcf	___fttol@lval,f,c
 12645  00CAD6  3636               	rlcf	___fttol@lval+1,f,c
 12646  00CAD8  3637               	rlcf	___fttol@lval+2,f,c
 12647  00CADA  3638               	rlcf	___fttol@lval+3,f,c
 12648  00CADC  0639               	decf	___fttol@exp1,f,c
 12649  00CADE  D000               	goto	l3990
 12650  00CAE0                     l3990:
 12651  00CAE0  5039               	movf	___fttol@exp1,w,c
 12652  00CAE2  B4D8               	btfsc	status,2,c
 12653  00CAE4  D002               	goto	l3992
 12654  00CAE6  D7F5               	goto	l3988
 12655  00CAE8  D000               	goto	l3992
 12656  00CAEA                     l3992:
 12657  00CAEA  5034               	movf	___fttol@sign1,w,c
 12658  00CAEC  B4D8               	btfsc	status,2,c
 12659  00CAEE  D009               	goto	l3996
 12660  00CAF0  1E38               	comf	___fttol@lval+3,f,c
 12661  00CAF2  1E37               	comf	___fttol@lval+2,f,c
 12662  00CAF4  1E36               	comf	___fttol@lval+1,f,c
 12663  00CAF6  6C35               	negf	___fttol@lval,c
 12664  00CAF8  0E00               	movlw	0
 12665  00CAFA  2236               	addwfc	___fttol@lval+1,f,c
 12666  00CAFC  2237               	addwfc	___fttol@lval+2,f,c
 12667  00CAFE  2238               	addwfc	___fttol@lval+3,f,c
 12668  00CB00  D000               	goto	l3996
 12669  00CB02                     l3996:
 12670  00CB02  C035  F02B         	movff	___fttol@lval,?___fttol
 12671  00CB06  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
 12672  00CB0A  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
 12673  00CB0E  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
 12674  00CB12  0012               	return	
 12675  00CB14  0012               	return		;funcret
 12676  00CB16                     __end_of___fttol:
 12677                           	opt stack 0
 12678                           tblptru	equ	0xFF8
 12679                           tblptrh	equ	0xFF7
 12680                           tblptrl	equ	0xFF6
 12681                           tablat	equ	0xFF5
 12682                           prodh	equ	0xFF4
 12683                           prodl	equ	0xFF3
 12684                           intcon	equ	0xFF2
 12685                           indf0	equ	0xFEF
 12686                           postinc0	equ	0xFEE
 12687                           fsr0h	equ	0xFEA
 12688                           fsr0l	equ	0xFE9
 12689                           wreg	equ	0xFE8
 12690                           postdec1	equ	0xFE5
 12691                           fsr1l	equ	0xFE1
 12692                           indf2	equ	0xFDF
 12693                           postinc2	equ	0xFDE
 12694                           postdec2	equ	0xFDD
 12695                           fsr2h	equ	0xFDA
 12696                           fsr2l	equ	0xFD9
 12697                           status	equ	0xFD8
 12698                           
 12699 ;; *************** function ___ftsub *****************
 12700 ;; Defined at:
 12701 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 12702 ;; Parameters:    Size  Location     Type
 12703 ;;  f1              3   57[COMRAM] float 
 12704 ;;  f2              3   60[COMRAM] float 
 12705 ;; Auto vars:     Size  Location     Type
 12706 ;;		None
 12707 ;; Return value:  Size  Location     Type
 12708 ;;                  3   57[COMRAM] float 
 12709 ;; Registers used:
 12710 ;;		wreg, status,2, status,0, cstack
 12711 ;; Tracked objects:
 12712 ;;		On entry : 0/0
 12713 ;;		On exit  : 0/0
 12714 ;;		Unchanged: 0/0
 12715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12716 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12719 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12720 ;;Total ram usage:        6 bytes
 12721 ;; Hardware stack levels used:    1
 12722 ;; Hardware stack levels required when called:    2
 12723 ;; This function calls:
 12724 ;;		___ftadd
 12725 ;; This function is called by:
 12726 ;;		_sprintf
 12727 ;; This function uses a non-reentrant model
 12728 ;;
 12729                           
 12730                           	psect	text41
 12731  00BFFA                     __ptext41:
 12732                           	opt stack 0
 12733  00BFFA                     ___ftsub:
 12734                           	opt stack 26
 12735                           
 12736                           ;incstack = 0
 12737  00BFFA  503D               	movf	___ftsub@f2,w,c
 12738  00BFFC  103E               	iorwf	___ftsub@f2+1,w,c
 12739  00BFFE  103F               	iorwf	___ftsub@f2+2,w,c
 12740  00C000  B4D8               	btfsc	status,2,c
 12741  00C002  D007               	goto	l3928
 12742  00C004  0E00               	movlw	0
 12743  00C006  1A3D               	xorwf	___ftsub@f2,f,c
 12744  00C008  0E00               	movlw	0
 12745  00C00A  1A3E               	xorwf	___ftsub@f2+1,f,c
 12746  00C00C  0E80               	movlw	128
 12747  00C00E  1A3F               	xorwf	___ftsub@f2+2,f,c
 12748  00C010  D000               	goto	l3928
 12749  00C012                     l3928:
 12750  00C012  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
 12751  00C016  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
 12752  00C01A  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
 12753  00C01E  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
 12754  00C022  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
 12755  00C026  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
 12756  00C02A  EC46  F06E         	call	___ftadd	;wreg free
 12757  00C02E  C02E  F03A         	movff	?___ftadd,?___ftsub
 12758  00C032  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
 12759  00C036  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
 12760  00C03A  0012               	return	
 12761  00C03C  0012               	return		;funcret
 12762  00C03E                     __end_of___ftsub:
 12763                           	opt stack 0
 12764                           tblptru	equ	0xFF8
 12765                           tblptrh	equ	0xFF7
 12766                           tblptrl	equ	0xFF6
 12767                           tablat	equ	0xFF5
 12768                           prodh	equ	0xFF4
 12769                           prodl	equ	0xFF3
 12770                           intcon	equ	0xFF2
 12771                           indf0	equ	0xFEF
 12772                           postinc0	equ	0xFEE
 12773                           fsr0h	equ	0xFEA
 12774                           fsr0l	equ	0xFE9
 12775                           wreg	equ	0xFE8
 12776                           postdec1	equ	0xFE5
 12777                           fsr1l	equ	0xFE1
 12778                           indf2	equ	0xFDF
 12779                           postinc2	equ	0xFDE
 12780                           postdec2	equ	0xFDD
 12781                           fsr2h	equ	0xFDA
 12782                           fsr2l	equ	0xFD9
 12783                           status	equ	0xFD8
 12784                           
 12785 ;; *************** function ___ftadd *****************
 12786 ;; Defined at:
 12787 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 12788 ;; Parameters:    Size  Location     Type
 12789 ;;  f1              3   45[COMRAM] float 
 12790 ;;  f2              3   48[COMRAM] float 
 12791 ;; Auto vars:     Size  Location     Type
 12792 ;;  exp1            1   56[COMRAM] unsigned char 
 12793 ;;  exp2            1   55[COMRAM] unsigned char 
 12794 ;;  sign            1   54[COMRAM] unsigned char 
 12795 ;; Return value:  Size  Location     Type
 12796 ;;                  3   45[COMRAM] float 
 12797 ;; Registers used:
 12798 ;;		wreg, status,2, status,0, cstack
 12799 ;; Tracked objects:
 12800 ;;		On entry : 0/0
 12801 ;;		On exit  : 0/0
 12802 ;;		Unchanged: 0/0
 12803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12804 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12805 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12806 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12807 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12808 ;;Total ram usage:       12 bytes
 12809 ;; Hardware stack levels used:    1
 12810 ;; Hardware stack levels required when called:    1
 12811 ;; This function calls:
 12812 ;;		___ftpack
 12813 ;; This function is called by:
 12814 ;;		_Encender_Aire_Calefaccion
 12815 ;;		_sprintf
 12816 ;;		___ftsub
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           	psect	text42
 12821  00DC8C                     __ptext42:
 12822                           	opt stack 0
 12823  00DC8C                     ___ftadd:
 12824                           	opt stack 26
 12825                           
 12826                           ;incstack = 0
 12827  00DC8C  C030  F034         	movff	___ftadd@f1+2,??___ftadd
 12828  00DC90  6A35               	clrf	(??___ftadd+1)& (0+255),c
 12829  00DC92  6A36               	clrf	(??___ftadd+2)& (0+255),c
 12830  00DC94  342F               	rlcf	___ftadd@f1+1,w,c
 12831  00DC96  3634               	rlcf	??___ftadd& (0+255),f,c
 12832  00DC98  E301               	bnc	u3271
 12833  00DC9A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 12834  00DC9C                     u3271:
 12835  00DC9C  5034               	movf	??___ftadd,w,c
 12836  00DC9E  6E39               	movwf	___ftadd@exp1,c
 12837  00DCA0  C033  F034         	movff	___ftadd@f2+2,??___ftadd
 12838  00DCA4  6A35               	clrf	(??___ftadd+1)& (0+255),c
 12839  00DCA6  6A36               	clrf	(??___ftadd+2)& (0+255),c
 12840  00DCA8  3432               	rlcf	___ftadd@f2+1,w,c
 12841  00DCAA  3634               	rlcf	??___ftadd& (0+255),f,c
 12842  00DCAC  E301               	bnc	u3281
 12843  00DCAE  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 12844  00DCB0                     u3281:
 12845  00DCB0  5034               	movf	??___ftadd,w,c
 12846  00DCB2  6E38               	movwf	___ftadd@exp2,c
 12847  00DCB4  5039               	movf	___ftadd@exp1,w,c
 12848  00DCB6  B4D8               	btfsc	status,2,c
 12849  00DCB8  D00B               	goto	l1091
 12850  00DCBA  5038               	movf	___ftadd@exp2,w,c
 12851  00DCBC  5C39               	subwf	___ftadd@exp1,w,c
 12852  00DCBE  B0D8               	btfsc	status,0,c
 12853  00DCC0  D00E               	goto	l3476
 12854  00DCC2  5039               	movf	___ftadd@exp1,w,c
 12855  00DCC4  0800               	sublw	0
 12856  00DCC6  2438               	addwf	___ftadd@exp2,w,c
 12857  00DCC8  6E34               	movwf	??___ftadd& (0+255),c
 12858  00DCCA  0E18               	movlw	24
 12859  00DCCC  6434               	cpfsgt	??___ftadd,c
 12860  00DCCE  D007               	goto	l3476
 12861  00DCD0                     l1091:
 12862  00DCD0  C031  F02E         	movff	___ftadd@f2,?___ftadd
 12863  00DCD4  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
 12864  00DCD8  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
 12865  00DCDC  0012               	return	
 12866  00DCDE                     l3476:
 12867  00DCDE  5038               	movf	___ftadd@exp2,w,c
 12868  00DCE0  B4D8               	btfsc	status,2,c
 12869  00DCE2  D00B               	goto	l1095
 12870  00DCE4  5039               	movf	___ftadd@exp1,w,c
 12871  00DCE6  5C38               	subwf	___ftadd@exp2,w,c
 12872  00DCE8  B0D8               	btfsc	status,0,c
 12873  00DCEA  D00E               	goto	l3482
 12874  00DCEC  5038               	movf	___ftadd@exp2,w,c
 12875  00DCEE  0800               	sublw	0
 12876  00DCF0  2439               	addwf	___ftadd@exp1,w,c
 12877  00DCF2  6E34               	movwf	??___ftadd& (0+255),c
 12878  00DCF4  0E18               	movlw	24
 12879  00DCF6  6434               	cpfsgt	??___ftadd,c
 12880  00DCF8  D007               	goto	l3482
 12881  00DCFA                     l1095:
 12882  00DCFA  C02E  F02E         	movff	___ftadd@f1,?___ftadd
 12883  00DCFE  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
 12884  00DD02  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
 12885  00DD06  0012               	return	
 12886  00DD08                     l3482:
 12887  00DD08  0E06               	movlw	6
 12888  00DD0A  6E37               	movwf	___ftadd@sign,c
 12889  00DD0C  AE30               	btfss	___ftadd@f1+2,7,c
 12890  00DD0E  D002               	goto	l3488
 12891  00DD10  8E37               	bsf	___ftadd@sign,7,c
 12892  00DD12  D000               	goto	l3488
 12893  00DD14                     l3488:
 12894  00DD14  BE33               	btfsc	___ftadd@f2+2,7,c
 12895  00DD16  8C37               	bsf	___ftadd@sign,6,c
 12896  00DD18  8E2F               	bsf	___ftadd@f1+1,7,c
 12897  00DD1A  0EFF               	movlw	255
 12898  00DD1C  162E               	andwf	___ftadd@f1,f,c
 12899  00DD1E  0EFF               	movlw	255
 12900  00DD20  162F               	andwf	___ftadd@f1+1,f,c
 12901  00DD22  0E00               	movlw	0
 12902  00DD24  1630               	andwf	___ftadd@f1+2,f,c
 12903  00DD26  8E32               	bsf	___ftadd@f2+1,7,c
 12904  00DD28  0EFF               	movlw	255
 12905  00DD2A  1631               	andwf	___ftadd@f2,f,c
 12906  00DD2C  0EFF               	movlw	255
 12907  00DD2E  1632               	andwf	___ftadd@f2+1,f,c
 12908  00DD30  0E00               	movlw	0
 12909  00DD32  1633               	andwf	___ftadd@f2+2,f,c
 12910  00DD34  5038               	movf	___ftadd@exp2,w,c
 12911  00DD36  5C39               	subwf	___ftadd@exp1,w,c
 12912  00DD38  B0D8               	btfsc	status,0,c
 12913  00DD3A  D01E               	goto	l3508
 12914  00DD3C                     l3498:
 12915  00DD3C  90D8               	bcf	status,0,c
 12916  00DD3E  3631               	rlcf	___ftadd@f2,f,c
 12917  00DD40  3632               	rlcf	___ftadd@f2+1,f,c
 12918  00DD42  3633               	rlcf	___ftadd@f2+2,f,c
 12919  00DD44  0638               	decf	___ftadd@exp2,f,c
 12920  00DD46  5039               	movf	___ftadd@exp1,w,c
 12921  00DD48  1838               	xorwf	___ftadd@exp2,w,c
 12922  00DD4A  B4D8               	btfsc	status,2,c
 12923  00DD4C  D00F               	goto	l3506
 12924  00DD4E  0637               	decf	___ftadd@sign,f,c
 12925  00DD50  C037  F034         	movff	___ftadd@sign,??___ftadd
 12926  00DD54  0E07               	movlw	7
 12927  00DD56  1634               	andwf	??___ftadd,f,c
 12928  00DD58  B4D8               	btfsc	status,2,c
 12929  00DD5A  D008               	goto	l3506
 12930  00DD5C  D7EF               	goto	l3498
 12931  00DD5E  D006               	goto	l3506
 12932  00DD60                     l3504:
 12933  00DD60  90D8               	bcf	status,0,c
 12934  00DD62  3230               	rrcf	___ftadd@f1+2,f,c
 12935  00DD64  322F               	rrcf	___ftadd@f1+1,f,c
 12936  00DD66  322E               	rrcf	___ftadd@f1,f,c
 12937  00DD68  2A39               	incf	___ftadd@exp1,f,c
 12938  00DD6A  D000               	goto	l3506
 12939  00DD6C                     l3506:
 12940  00DD6C  5038               	movf	___ftadd@exp2,w,c
 12941  00DD6E  1839               	xorwf	___ftadd@exp1,w,c
 12942  00DD70  B4D8               	btfsc	status,2,c
 12943  00DD72  D024               	goto	l1106
 12944  00DD74  D7F5               	goto	l3504
 12945  00DD76  D022               	goto	l1106
 12946  00DD78                     l3508:
 12947  00DD78  5039               	movf	___ftadd@exp1,w,c
 12948  00DD7A  5C38               	subwf	___ftadd@exp2,w,c
 12949  00DD7C  B0D8               	btfsc	status,0,c
 12950  00DD7E  D01E               	goto	l1106
 12951  00DD80                     l3510:
 12952  00DD80  90D8               	bcf	status,0,c
 12953  00DD82  362E               	rlcf	___ftadd@f1,f,c
 12954  00DD84  362F               	rlcf	___ftadd@f1+1,f,c
 12955  00DD86  3630               	rlcf	___ftadd@f1+2,f,c
 12956  00DD88  0639               	decf	___ftadd@exp1,f,c
 12957  00DD8A  5039               	movf	___ftadd@exp1,w,c
 12958  00DD8C  1838               	xorwf	___ftadd@exp2,w,c
 12959  00DD8E  B4D8               	btfsc	status,2,c
 12960  00DD90  D00F               	goto	l3518
 12961  00DD92  0637               	decf	___ftadd@sign,f,c
 12962  00DD94  C037  F034         	movff	___ftadd@sign,??___ftadd
 12963  00DD98  0E07               	movlw	7
 12964  00DD9A  1634               	andwf	??___ftadd,f,c
 12965  00DD9C  B4D8               	btfsc	status,2,c
 12966  00DD9E  D008               	goto	l3518
 12967  00DDA0  D7EF               	goto	l3510
 12968  00DDA2  D006               	goto	l3518
 12969  00DDA4                     l3516:
 12970  00DDA4  90D8               	bcf	status,0,c
 12971  00DDA6  3233               	rrcf	___ftadd@f2+2,f,c
 12972  00DDA8  3232               	rrcf	___ftadd@f2+1,f,c
 12973  00DDAA  3231               	rrcf	___ftadd@f2,f,c
 12974  00DDAC  2A38               	incf	___ftadd@exp2,f,c
 12975  00DDAE  D000               	goto	l3518
 12976  00DDB0                     l3518:
 12977  00DDB0  5038               	movf	___ftadd@exp2,w,c
 12978  00DDB2  1839               	xorwf	___ftadd@exp1,w,c
 12979  00DDB4  B4D8               	btfsc	status,2,c
 12980  00DDB6  D002               	goto	l1106
 12981  00DDB8  D7F5               	goto	l3516
 12982  00DDBA  D000               	goto	l1106
 12983  00DDBC                     l1106:
 12984  00DDBC  AE37               	btfss	___ftadd@sign,7,c
 12985  00DDBE  D00C               	goto	l1115
 12986  00DDC0  0EFF               	movlw	255
 12987  00DDC2  1A2E               	xorwf	___ftadd@f1,f,c
 12988  00DDC4  0EFF               	movlw	255
 12989  00DDC6  1A2F               	xorwf	___ftadd@f1+1,f,c
 12990  00DDC8  0EFF               	movlw	255
 12991  00DDCA  1A30               	xorwf	___ftadd@f1+2,f,c
 12992  00DDCC  0E01               	movlw	1
 12993  00DDCE  262E               	addwf	___ftadd@f1,f,c
 12994  00DDD0  0E00               	movlw	0
 12995  00DDD2  222F               	addwfc	___ftadd@f1+1,f,c
 12996  00DDD4  0E00               	movlw	0
 12997  00DDD6  2230               	addwfc	___ftadd@f1+2,f,c
 12998  00DDD8                     l1115:
 12999  00DDD8  AC37               	btfss	___ftadd@sign,6,c
 13000  00DDDA  D00D               	goto	l3524
 13001  00DDDC  0EFF               	movlw	255
 13002  00DDDE  1A31               	xorwf	___ftadd@f2,f,c
 13003  00DDE0  0EFF               	movlw	255
 13004  00DDE2  1A32               	xorwf	___ftadd@f2+1,f,c
 13005  00DDE4  0EFF               	movlw	255
 13006  00DDE6  1A33               	xorwf	___ftadd@f2+2,f,c
 13007  00DDE8  0E01               	movlw	1
 13008  00DDEA  2631               	addwf	___ftadd@f2,f,c
 13009  00DDEC  0E00               	movlw	0
 13010  00DDEE  2232               	addwfc	___ftadd@f2+1,f,c
 13011  00DDF0  0E00               	movlw	0
 13012  00DDF2  2233               	addwfc	___ftadd@f2+2,f,c
 13013  00DDF4  D000               	goto	l3524
 13014  00DDF6                     l3524:
 13015  00DDF6  0E00               	movlw	0
 13016  00DDF8  6E37               	movwf	___ftadd@sign,c
 13017  00DDFA  502E               	movf	___ftadd@f1,w,c
 13018  00DDFC  2631               	addwf	___ftadd@f2,f,c
 13019  00DDFE  502F               	movf	___ftadd@f1+1,w,c
 13020  00DE00  2232               	addwfc	___ftadd@f2+1,f,c
 13021  00DE02  5030               	movf	___ftadd@f1+2,w,c
 13022  00DE04  2233               	addwfc	___ftadd@f2+2,f,c
 13023  00DE06  AE33               	btfss	___ftadd@f2+2,7,c
 13024  00DE08  D00F               	goto	l3534
 13025  00DE0A  0EFF               	movlw	255
 13026  00DE0C  1A31               	xorwf	___ftadd@f2,f,c
 13027  00DE0E  0EFF               	movlw	255
 13028  00DE10  1A32               	xorwf	___ftadd@f2+1,f,c
 13029  00DE12  0EFF               	movlw	255
 13030  00DE14  1A33               	xorwf	___ftadd@f2+2,f,c
 13031  00DE16  0E01               	movlw	1
 13032  00DE18  2631               	addwf	___ftadd@f2,f,c
 13033  00DE1A  0E00               	movlw	0
 13034  00DE1C  2232               	addwfc	___ftadd@f2+1,f,c
 13035  00DE1E  0E00               	movlw	0
 13036  00DE20  2233               	addwfc	___ftadd@f2+2,f,c
 13037  00DE22  0E01               	movlw	1
 13038  00DE24  6E37               	movwf	___ftadd@sign,c
 13039  00DE26  D000               	goto	l3534
 13040  00DE28                     l3534:
 13041  00DE28  C031  F001         	movff	___ftadd@f2,___ftpack@arg
 13042  00DE2C  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 13043  00DE30  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 13044  00DE34  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
 13045  00DE38  C037  F005         	movff	___ftadd@sign,___ftpack@sign
 13046  00DE3C  ECBE  F063         	call	___ftpack	;wreg free
 13047  00DE40  C001  F02E         	movff	?___ftpack,?___ftadd
 13048  00DE44  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
 13049  00DE48  C003  F030         	movff	?___ftpack+2,?___ftadd+2
 13050  00DE4C  0012               	return	
 13051  00DE4E  0012               	return		;funcret
 13052  00DE50                     __end_of___ftadd:
 13053                           	opt stack 0
 13054                           tblptru	equ	0xFF8
 13055                           tblptrh	equ	0xFF7
 13056                           tblptrl	equ	0xFF6
 13057                           tablat	equ	0xFF5
 13058                           prodh	equ	0xFF4
 13059                           prodl	equ	0xFF3
 13060                           intcon	equ	0xFF2
 13061                           indf0	equ	0xFEF
 13062                           postinc0	equ	0xFEE
 13063                           fsr0h	equ	0xFEA
 13064                           fsr0l	equ	0xFE9
 13065                           wreg	equ	0xFE8
 13066                           postdec1	equ	0xFE5
 13067                           fsr1l	equ	0xFE1
 13068                           indf2	equ	0xFDF
 13069                           postinc2	equ	0xFDE
 13070                           postdec2	equ	0xFDD
 13071                           fsr2h	equ	0xFDA
 13072                           fsr2l	equ	0xFD9
 13073                           status	equ	0xFD8
 13074                           
 13075 ;; *************** function ___ftpack *****************
 13076 ;; Defined at:
 13077 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 13078 ;; Parameters:    Size  Location     Type
 13079 ;;  arg             3    0[COMRAM] unsigned um
 13080 ;;  exp             1    3[COMRAM] unsigned char 
 13081 ;;  sign            1    4[COMRAM] unsigned char 
 13082 ;; Auto vars:     Size  Location     Type
 13083 ;;		None
 13084 ;; Return value:  Size  Location     Type
 13085 ;;                  3    0[COMRAM] float 
 13086 ;; Registers used:
 13087 ;;		wreg, status,2, status,0
 13088 ;; Tracked objects:
 13089 ;;		On entry : 0/0
 13090 ;;		On exit  : 0/0
 13091 ;;		Unchanged: 0/0
 13092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13093 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13095 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13096 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13097 ;;Total ram usage:        8 bytes
 13098 ;; Hardware stack levels used:    1
 13099 ;; This function calls:
 13100 ;;		Nothing
 13101 ;; This function is called by:
 13102 ;;		___awtoft
 13103 ;;		___ftadd
 13104 ;;		___ftmul
 13105 ;;		___lbtoft
 13106 ;;		___lltoft
 13107 ;; This function uses a non-reentrant model
 13108 ;;
 13109                           
 13110                           	psect	text43
 13111  00C77C                     __ptext43:
 13112                           	opt stack 0
 13113  00C77C                     ___ftpack:
 13114                           	opt stack 26
 13115                           
 13116                           ;incstack = 0
 13117  00C77C  5004               	movf	___ftpack@exp,w,c
 13118  00C77E  B4D8               	btfsc	status,2,c
 13119  00C780  D005               	goto	l3430
 13120  00C782  5001               	movf	___ftpack@arg,w,c
 13121  00C784  1002               	iorwf	___ftpack@arg+1,w,c
 13122  00C786  1003               	iorwf	___ftpack@arg+2,w,c
 13123  00C788  A4D8               	btfss	status,2,c
 13124  00C78A  D00E               	goto	l3436
 13125  00C78C                     l3430:
 13126  00C78C  0E00               	movlw	0
 13127  00C78E  6E01               	movwf	?___ftpack,c
 13128  00C790  0E00               	movlw	0
 13129  00C792  6E02               	movwf	?___ftpack+1,c
 13130  00C794  0E00               	movlw	0
 13131  00C796  6E03               	movwf	?___ftpack+2,c
 13132  00C798  0012               	return	
 13133  00C79A  D006               	goto	l3436
 13134  00C79C                     l3434:
 13135  00C79C  2A04               	incf	___ftpack@exp,f,c
 13136  00C79E  90D8               	bcf	status,0,c
 13137  00C7A0  3203               	rrcf	___ftpack@arg+2,f,c
 13138  00C7A2  3202               	rrcf	___ftpack@arg+1,f,c
 13139  00C7A4  3201               	rrcf	___ftpack@arg,f,c
 13140  00C7A6  D000               	goto	l3436
 13141  00C7A8                     l3436:
 13142  00C7A8  0E00               	movlw	0
 13143  00C7AA  1401               	andwf	___ftpack@arg,w,c
 13144  00C7AC  6E06               	movwf	??___ftpack& (0+255),c
 13145  00C7AE  0E00               	movlw	0
 13146  00C7B0  1402               	andwf	___ftpack@arg+1,w,c
 13147  00C7B2  6E07               	movwf	(??___ftpack+1)& (0+255),c
 13148  00C7B4  0EFE               	movlw	254
 13149  00C7B6  1403               	andwf	___ftpack@arg+2,w,c
 13150  00C7B8  6E08               	movwf	(??___ftpack+2)& (0+255),c
 13151  00C7BA  5006               	movf	??___ftpack,w,c
 13152  00C7BC  1007               	iorwf	??___ftpack+1,w,c
 13153  00C7BE  1008               	iorwf	??___ftpack+2,w,c
 13154  00C7C0  B4D8               	btfsc	status,2,c
 13155  00C7C2  D00E               	goto	l3442
 13156  00C7C4  D7EB               	goto	l3434
 13157  00C7C6  D00C               	goto	l3442
 13158  00C7C8                     l3438:
 13159  00C7C8  2A04               	incf	___ftpack@exp,f,c
 13160  00C7CA  0E01               	movlw	1
 13161  00C7CC  2601               	addwf	___ftpack@arg,f,c
 13162  00C7CE  0E00               	movlw	0
 13163  00C7D0  2202               	addwfc	___ftpack@arg+1,f,c
 13164  00C7D2  0E00               	movlw	0
 13165  00C7D4  2203               	addwfc	___ftpack@arg+2,f,c
 13166  00C7D6  90D8               	bcf	status,0,c
 13167  00C7D8  3203               	rrcf	___ftpack@arg+2,f,c
 13168  00C7DA  3202               	rrcf	___ftpack@arg+1,f,c
 13169  00C7DC  3201               	rrcf	___ftpack@arg,f,c
 13170  00C7DE  D000               	goto	l3442
 13171  00C7E0                     l3442:
 13172  00C7E0  0E00               	movlw	0
 13173  00C7E2  1401               	andwf	___ftpack@arg,w,c
 13174  00C7E4  6E06               	movwf	??___ftpack& (0+255),c
 13175  00C7E6  0E00               	movlw	0
 13176  00C7E8  1402               	andwf	___ftpack@arg+1,w,c
 13177  00C7EA  6E07               	movwf	(??___ftpack+1)& (0+255),c
 13178  00C7EC  0EFF               	movlw	255
 13179  00C7EE  1403               	andwf	___ftpack@arg+2,w,c
 13180  00C7F0  6E08               	movwf	(??___ftpack+2)& (0+255),c
 13181  00C7F2  5006               	movf	??___ftpack,w,c
 13182  00C7F4  1007               	iorwf	??___ftpack+1,w,c
 13183  00C7F6  1008               	iorwf	??___ftpack+2,w,c
 13184  00C7F8  B4D8               	btfsc	status,2,c
 13185  00C7FA  D008               	goto	l3446
 13186  00C7FC  D7E5               	goto	l3438
 13187  00C7FE  D006               	goto	l3446
 13188  00C800                     l3444:
 13189  00C800  0604               	decf	___ftpack@exp,f,c
 13190  00C802  90D8               	bcf	status,0,c
 13191  00C804  3601               	rlcf	___ftpack@arg,f,c
 13192  00C806  3602               	rlcf	___ftpack@arg+1,f,c
 13193  00C808  3603               	rlcf	___ftpack@arg+2,f,c
 13194  00C80A  D000               	goto	l3446
 13195  00C80C                     l3446:
 13196  00C80C  BE02               	btfsc	___ftpack@arg+1,7,c
 13197  00C80E  D004               	goto	l1062
 13198  00C810  0E02               	movlw	2
 13199  00C812  6004               	cpfslt	___ftpack@exp,c
 13200  00C814  D7F5               	goto	l3444
 13201  00C816  D000               	goto	l1062
 13202  00C818                     l1062:
 13203  00C818  B004               	btfsc	___ftpack@exp,0,c
 13204  00C81A  D002               	goto	l3452
 13205  00C81C  9E02               	bcf	___ftpack@arg+1,7,c
 13206  00C81E  D000               	goto	l3452
 13207  00C820                     l3452:
 13208  00C820  90D8               	bcf	status,0,c
 13209  00C822  3204               	rrcf	___ftpack@exp,f,c
 13210  00C824  5004               	movf	___ftpack@exp,w,c
 13211  00C826  1203               	iorwf	___ftpack@arg+2,f,c
 13212  00C828  5005               	movf	___ftpack@sign,w,c
 13213  00C82A  B4D8               	btfsc	status,2,c
 13214  00C82C  D002               	goto	l3458
 13215  00C82E  8E03               	bsf	___ftpack@arg+2,7,c
 13216  00C830  D000               	goto	l3458
 13217  00C832                     l3458:
 13218  00C832  C001  F001         	movff	___ftpack@arg,?___ftpack
 13219  00C836  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 13220  00C83A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 13221  00C83E  0012               	return	
 13222  00C840  0012               	return		;funcret
 13223  00C842                     __end_of___ftpack:
 13224                           	opt stack 0
 13225                           tblptru	equ	0xFF8
 13226                           tblptrh	equ	0xFF7
 13227                           tblptrl	equ	0xFF6
 13228                           tablat	equ	0xFF5
 13229                           prodh	equ	0xFF4
 13230                           prodl	equ	0xFF3
 13231                           intcon	equ	0xFF2
 13232                           indf0	equ	0xFEF
 13233                           postinc0	equ	0xFEE
 13234                           fsr0h	equ	0xFEA
 13235                           fsr0l	equ	0xFE9
 13236                           wreg	equ	0xFE8
 13237                           postdec1	equ	0xFE5
 13238                           fsr1l	equ	0xFE1
 13239                           indf2	equ	0xFDF
 13240                           postinc2	equ	0xFDE
 13241                           postdec2	equ	0xFDD
 13242                           fsr2h	equ	0xFDA
 13243                           fsr2l	equ	0xFD9
 13244                           status	equ	0xFD8
 13245                           
 13246 ;; *************** function ___ftneg *****************
 13247 ;; Defined at:
 13248 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 13249 ;; Parameters:    Size  Location     Type
 13250 ;;  f1              3    0[COMRAM] float 
 13251 ;; Auto vars:     Size  Location     Type
 13252 ;;		None
 13253 ;; Return value:  Size  Location     Type
 13254 ;;                  3    0[COMRAM] float 
 13255 ;; Registers used:
 13256 ;;		wreg, status,2, status,0
 13257 ;; Tracked objects:
 13258 ;;		On entry : 0/0
 13259 ;;		On exit  : 0/0
 13260 ;;		Unchanged: 0/0
 13261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13262 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13265 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13266 ;;Total ram usage:        3 bytes
 13267 ;; Hardware stack levels used:    1
 13268 ;; This function calls:
 13269 ;;		Nothing
 13270 ;; This function is called by:
 13271 ;;		_sprintf
 13272 ;; This function uses a non-reentrant model
 13273 ;;
 13274                           
 13275                           	psect	text44
 13276  00BEDE                     __ptext44:
 13277                           	opt stack 0
 13278  00BEDE                     ___ftneg:
 13279                           	opt stack 28
 13280                           
 13281                           ;incstack = 0
 13282  00BEDE  5001               	movf	___ftneg@f1,w,c
 13283  00BEE0  1002               	iorwf	___ftneg@f1+1,w,c
 13284  00BEE2  1003               	iorwf	___ftneg@f1+2,w,c
 13285  00BEE4  B4D8               	btfsc	status,2,c
 13286  00BEE6  D006               	goto	l1165
 13287  00BEE8  0E00               	movlw	0
 13288  00BEEA  1A01               	xorwf	___ftneg@f1,f,c
 13289  00BEEC  0E00               	movlw	0
 13290  00BEEE  1A02               	xorwf	___ftneg@f1+1,f,c
 13291  00BEF0  0E80               	movlw	128
 13292  00BEF2  1A03               	xorwf	___ftneg@f1+2,f,c
 13293  00BEF4                     l1165:
 13294  00BEF4  C001  F001         	movff	___ftneg@f1,?___ftneg
 13295  00BEF8  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 13296  00BEFC  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 13297  00BF00  0012               	return		;funcret
 13298  00BF02                     __end_of___ftneg:
 13299                           	opt stack 0
 13300                           tblptru	equ	0xFF8
 13301                           tblptrh	equ	0xFF7
 13302                           tblptrl	equ	0xFF6
 13303                           tablat	equ	0xFF5
 13304                           prodh	equ	0xFF4
 13305                           prodl	equ	0xFF3
 13306                           intcon	equ	0xFF2
 13307                           indf0	equ	0xFEF
 13308                           postinc0	equ	0xFEE
 13309                           fsr0h	equ	0xFEA
 13310                           fsr0l	equ	0xFE9
 13311                           wreg	equ	0xFE8
 13312                           postdec1	equ	0xFE5
 13313                           fsr1l	equ	0xFE1
 13314                           indf2	equ	0xFDF
 13315                           postinc2	equ	0xFDE
 13316                           postdec2	equ	0xFDD
 13317                           fsr2h	equ	0xFDA
 13318                           fsr2l	equ	0xFD9
 13319                           status	equ	0xFD8
 13320                           
 13321 ;; *************** function ___ftge *****************
 13322 ;; Defined at:
 13323 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 13324 ;; Parameters:    Size  Location     Type
 13325 ;;  ff1             3   57[COMRAM] float 
 13326 ;;  ff2             3   60[COMRAM] float 
 13327 ;; Auto vars:     Size  Location     Type
 13328 ;;		None
 13329 ;; Return value:  Size  Location     Type
 13330 ;;		None               void
 13331 ;; Registers used:
 13332 ;;		wreg, status,2, status,0
 13333 ;; Tracked objects:
 13334 ;;		On entry : 0/0
 13335 ;;		On exit  : 0/0
 13336 ;;		Unchanged: 0/0
 13337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13338 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13340 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13341 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13342 ;;Total ram usage:        9 bytes
 13343 ;; Hardware stack levels used:    1
 13344 ;; This function calls:
 13345 ;;		Nothing
 13346 ;; This function is called by:
 13347 ;;		_Encender_Aire_Calefaccion
 13348 ;;		_sprintf
 13349 ;; This function uses a non-reentrant model
 13350 ;;
 13351                           
 13352                           	psect	text45
 13353  00C42A                     __ptext45:
 13354                           	opt stack 0
 13355  00C42A                     ___ftge:
 13356                           	opt stack 28
 13357                           
 13358                           ;incstack = 0
 13359  00C42A  AE3C               	btfss	___ftge@ff1+2,7,c
 13360  00C42C  D017               	goto	l3936
 13361  00C42E  C03A  F040         	movff	___ftge@ff1,??___ftge
 13362  00C432  C03B  F041         	movff	___ftge@ff1+1,??___ftge+1
 13363  00C436  C03C  F042         	movff	___ftge@ff1+2,??___ftge+2
 13364  00C43A  1E40               	comf	??___ftge,f,c
 13365  00C43C  1E41               	comf	??___ftge+1,f,c
 13366  00C43E  1E42               	comf	??___ftge+2,f,c
 13367  00C440  2A40               	incf	??___ftge,f,c
 13368  00C442  0E00               	movlw	0
 13369  00C444  2241               	addwfc	??___ftge+1,f,c
 13370  00C446  2242               	addwfc	??___ftge+2,f,c
 13371  00C448  0E00               	movlw	0
 13372  00C44A  2440               	addwf	??___ftge,w,c
 13373  00C44C  6E3A               	movwf	___ftge@ff1,c
 13374  00C44E  0E00               	movlw	0
 13375  00C450  2041               	addwfc	??___ftge+1,w,c
 13376  00C452  6E3B               	movwf	___ftge@ff1+1,c
 13377  00C454  0E80               	movlw	128
 13378  00C456  2042               	addwfc	??___ftge+2,w,c
 13379  00C458  6E3C               	movwf	___ftge@ff1+2,c
 13380  00C45A  D000               	goto	l3936
 13381  00C45C                     l3936:
 13382  00C45C  AE3F               	btfss	___ftge@ff2+2,7,c
 13383  00C45E  D017               	goto	l3940
 13384  00C460  C03D  F040         	movff	___ftge@ff2,??___ftge
 13385  00C464  C03E  F041         	movff	___ftge@ff2+1,??___ftge+1
 13386  00C468  C03F  F042         	movff	___ftge@ff2+2,??___ftge+2
 13387  00C46C  1E40               	comf	??___ftge,f,c
 13388  00C46E  1E41               	comf	??___ftge+1,f,c
 13389  00C470  1E42               	comf	??___ftge+2,f,c
 13390  00C472  2A40               	incf	??___ftge,f,c
 13391  00C474  0E00               	movlw	0
 13392  00C476  2241               	addwfc	??___ftge+1,f,c
 13393  00C478  2242               	addwfc	??___ftge+2,f,c
 13394  00C47A  0E00               	movlw	0
 13395  00C47C  2440               	addwf	??___ftge,w,c
 13396  00C47E  6E3D               	movwf	___ftge@ff2,c
 13397  00C480  0E00               	movlw	0
 13398  00C482  2041               	addwfc	??___ftge+1,w,c
 13399  00C484  6E3E               	movwf	___ftge@ff2+1,c
 13400  00C486  0E80               	movlw	128
 13401  00C488  2042               	addwfc	??___ftge+2,w,c
 13402  00C48A  6E3F               	movwf	___ftge@ff2+2,c
 13403  00C48C  D000               	goto	l3940
 13404  00C48E                     l3940:
 13405  00C48E  0E00               	movlw	0
 13406  00C490  1A3A               	xorwf	___ftge@ff1,f,c
 13407  00C492  0E00               	movlw	0
 13408  00C494  1A3B               	xorwf	___ftge@ff1+1,f,c
 13409  00C496  0E80               	movlw	128
 13410  00C498  1A3C               	xorwf	___ftge@ff1+2,f,c
 13411  00C49A  0E00               	movlw	0
 13412  00C49C  1A3D               	xorwf	___ftge@ff2,f,c
 13413  00C49E  0E00               	movlw	0
 13414  00C4A0  1A3E               	xorwf	___ftge@ff2+1,f,c
 13415  00C4A2  0E80               	movlw	128
 13416  00C4A4  1A3F               	xorwf	___ftge@ff2+2,f,c
 13417  00C4A6  503D               	movf	___ftge@ff2,w,c
 13418  00C4A8  5C3A               	subwf	___ftge@ff1,w,c
 13419  00C4AA  503E               	movf	___ftge@ff2+1,w,c
 13420  00C4AC  583B               	subwfb	___ftge@ff1+1,w,c
 13421  00C4AE  503F               	movf	___ftge@ff2+2,w,c
 13422  00C4B0  583C               	subwfb	___ftge@ff1+2,w,c
 13423  00C4B2  B0D8               	btfsc	status,0,c
 13424  00C4B4  D002               	goto	l3946
 13425  00C4B6  90D8               	bcf	status,0,c
 13426  00C4B8  0012               	return	
 13427  00C4BA                     l3946:
 13428  00C4BA  80D8               	bsf	status,0,c
 13429  00C4BC  0012               	return	
 13430  00C4BE  0012               	return		;funcret
 13431  00C4C0                     __end_of___ftge:
 13432                           	opt stack 0
 13433                           tblptru	equ	0xFF8
 13434                           tblptrh	equ	0xFF7
 13435                           tblptrl	equ	0xFF6
 13436                           tablat	equ	0xFF5
 13437                           prodh	equ	0xFF4
 13438                           prodl	equ	0xFF3
 13439                           intcon	equ	0xFF2
 13440                           indf0	equ	0xFEF
 13441                           postinc0	equ	0xFEE
 13442                           fsr0h	equ	0xFEA
 13443                           fsr0l	equ	0xFE9
 13444                           wreg	equ	0xFE8
 13445                           postdec1	equ	0xFE5
 13446                           fsr1l	equ	0xFE1
 13447                           indf2	equ	0xFDF
 13448                           postinc2	equ	0xFDE
 13449                           postdec2	equ	0xFDD
 13450                           fsr2h	equ	0xFDA
 13451                           fsr2l	equ	0xFD9
 13452                           status	equ	0xFD8
 13453                           
 13454 ;; *************** function _Lcd_Out *****************
 13455 ;; Defined at:
 13456 ;;		line 84 in file "../lcd.h"
 13457 ;; Parameters:    Size  Location     Type
 13458 ;;  y               1    wreg     unsigned char 
 13459 ;;  x               1    3[COMRAM] unsigned char 
 13460 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
 13461 ;;		 -> STR_46(1), STR_45(1), STR_44(1), STR_43(1), 
 13462 ;;		 -> STR_31(1), STR_29(1), STR_27(1), STR_26(1), 
 13463 ;;		 -> STR_25(1), STR_24(1), STR_23(1), STR_22(1), 
 13464 ;;		 -> STR_21(1), STR_20(1), STR_19(1), STR_18(1), 
 13465 ;;		 -> STR_13(20), buffer1(20), 
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  y               1    6[COMRAM] unsigned char 
 13468 ;;  data            1    7[COMRAM] unsigned char 
 13469 ;; Return value:  Size  Location     Type
 13470 ;;		None               void
 13471 ;; Registers used:
 13472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13473 ;; Tracked objects:
 13474 ;;		On entry : 0/0
 13475 ;;		On exit  : 0/0
 13476 ;;		Unchanged: 0/0
 13477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13478 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13481 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13482 ;;Total ram usage:        5 bytes
 13483 ;; Hardware stack levels used:    1
 13484 ;; Hardware stack levels required when called:    1
 13485 ;; This function calls:
 13486 ;;		_Lcd_Chr_CP
 13487 ;;		_Lcd_Cmd
 13488 ;; This function is called by:
 13489 ;;		_Iniciar_Display
 13490 ;;		_Mostrar_DiaYfecha
 13491 ;;		_Configurar_Pantalla
 13492 ;;		_Configurar_Dia
 13493 ;;		_Configurar_Fecha
 13494 ;;		_Configurar_Hora
 13495 ;;		_Seleccionar_Dato
 13496 ;;		_Conseguir_Dia
 13497 ;;		_Programar_Temperatura
 13498 ;;		_Configurar_Hora_Grl
 13499 ;; This function uses a non-reentrant model
 13500 ;;
 13501                           
 13502                           	psect	text46
 13503  00C396                     __ptext46:
 13504                           	opt stack 0
 13505  00C396                     _Lcd_Out:
 13506                           	opt stack 27
 13507                           
 13508                           ;incstack = 0
 13509                           ;Lcd_Out@y stored from wreg
 13510  00C396  6E07               	movwf	Lcd_Out@y,c
 13511                           
 13512                           ;lcd.h: 86: unsigned char data;
 13513                           ;lcd.h: 87: switch (y)
 13514  00C398  D00D               	goto	l4060
 13515  00C39A                     l4050:
 13516  00C39A  5004               	movf	Lcd_Out@x,w,c
 13517  00C39C  0F80               	addlw	128
 13518  00C39E  D008               	goto	L9
 13519  00C3A0                     l4052:
 13520  00C3A0  5004               	movf	Lcd_Out@x,w,c
 13521  00C3A2  0FC0               	addlw	192
 13522  00C3A4  D005               	goto	L9
 13523  00C3A6                     l4054:
 13524  00C3A6  5004               	movf	Lcd_Out@x,w,c
 13525  00C3A8  0F94               	addlw	148
 13526  00C3AA  D002               	goto	L9
 13527  00C3AC                     l4056:
 13528  00C3AC  5004               	movf	Lcd_Out@x,w,c
 13529  00C3AE  0FD4               	addlw	212
 13530  00C3B0                     L9:
 13531  00C3B0  6E08               	movwf	Lcd_Out@data,c
 13532                           
 13533                           ;lcd.h: 94: }
 13534                           
 13535                           ;lcd.h: 93: default: break;
 13536  00C3B2  D00E               	goto	l4062
 13537  00C3B4                     l4060:
 13538  00C3B4  5007               	movf	Lcd_Out@y,w,c
 13539                           
 13540                           ; Switch size 1, requested type "space"
 13541                           ; Number of cases is 4, Range of values is 1 to 4
 13542                           ; switch strategies available:
 13543                           ; Name         Instructions Cycles
 13544                           ; simple_byte           13     7 (average)
 13545                           ;	Chosen strategy is simple_byte
 13546  00C3B6  0A01               	xorlw	1	; case 1
 13547  00C3B8  B4D8               	btfsc	status,2,c
 13548  00C3BA  D7EF               	goto	l4050
 13549  00C3BC  0A03               	xorlw	3	; case 2
 13550  00C3BE  B4D8               	btfsc	status,2,c
 13551  00C3C0  D7EF               	goto	l4052
 13552  00C3C2  0A01               	xorlw	1	; case 3
 13553  00C3C4  B4D8               	btfsc	status,2,c
 13554  00C3C6  D7EF               	goto	l4054
 13555  00C3C8  0A07               	xorlw	7	; case 4
 13556  00C3CA  B4D8               	btfsc	status,2,c
 13557  00C3CC  D7EF               	goto	l4056
 13558  00C3CE  D000               	goto	l4062
 13559  00C3D0                     l4062:
 13560                           
 13561                           ;lcd.h: 95: Lcd_Cmd(data);
 13562  00C3D0  5008               	movf	Lcd_Out@data,w,c
 13563  00C3D2  EC92  F066         	call	_Lcd_Cmd
 13564                           
 13565                           ;lcd.h: 96: while(*buffer)
 13566  00C3D6  D015               	goto	l4068
 13567  00C3D8                     l4064:
 13568                           
 13569                           ;lcd.h: 97: {
 13570                           ;lcd.h: 98: Lcd_Chr_CP(*buffer);
 13571  00C3D8  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
 13572  00C3DC  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
 13573  00C3E0  6AF8               	clrf	tblptru,c
 13574  00C3E2  0E0E               	movlw	(high __ramtop+-1)
 13575  00C3E4  64F7               	cpfsgt	tblptrh,c
 13576  00C3E6  D003               	bra	u4177
 13577  00C3E8  0008               	tblrd		*
 13578  00C3EA  50F5               	movf	tablat,w,c
 13579  00C3EC  D005               	bra	u4170
 13580  00C3EE                     u4177:
 13581  00C3EE  CFF6 FFE9          	movff	tblptrl,fsr0l
 13582  00C3F2  CFF7 FFEA          	movff	tblptrh,fsr0h
 13583  00C3F6  50EF               	movf	indf0,w,c
 13584  00C3F8                     u4170:
 13585  00C3F8  EC21  F067         	call	_Lcd_Chr_CP
 13586                           
 13587                           ;lcd.h: 99: buffer++;
 13588  00C3FC  4A05               	infsnz	Lcd_Out@buffer,f,c
 13589  00C3FE  2A06               	incf	Lcd_Out@buffer+1,f,c
 13590  00C400  D000               	goto	l4068
 13591  00C402                     l4068:
 13592  00C402  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
 13593  00C406  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
 13594  00C40A  6AF8               	clrf	tblptru,c
 13595  00C40C  0E0E               	movlw	(high __ramtop+-1)
 13596  00C40E  64F7               	cpfsgt	tblptrh,c
 13597  00C410  D003               	bra	u4187
 13598  00C412  0008               	tblrd		*
 13599  00C414  50F5               	movf	tablat,w,c
 13600  00C416  D005               	bra	u4180
 13601  00C418                     u4187:
 13602  00C418  CFF6 FFE9          	movff	tblptrl,fsr0l
 13603  00C41C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13604  00C420  50EF               	movf	indf0,w,c
 13605  00C422                     u4180:
 13606  00C422  0900               	iorlw	0
 13607  00C424  A4D8               	btfss	status,2,c
 13608  00C426  D7D8               	goto	l4064
 13609                           
 13610                           ;lcd.h: 100: }
 13611                           ;lcd.h: 101: return;
 13612  00C428  0012               	return		;funcret
 13613  00C42A                     __end_of_Lcd_Out:
 13614                           	opt stack 0
 13615                           tblptru	equ	0xFF8
 13616                           tblptrh	equ	0xFF7
 13617                           tblptrl	equ	0xFF6
 13618                           tablat	equ	0xFF5
 13619                           prodh	equ	0xFF4
 13620                           prodl	equ	0xFF3
 13621                           intcon	equ	0xFF2
 13622                           indf0	equ	0xFEF
 13623                           postinc0	equ	0xFEE
 13624                           fsr0h	equ	0xFEA
 13625                           fsr0l	equ	0xFE9
 13626                           wreg	equ	0xFE8
 13627                           postdec1	equ	0xFE5
 13628                           fsr1l	equ	0xFE1
 13629                           indf2	equ	0xFDF
 13630                           postinc2	equ	0xFDE
 13631                           postdec2	equ	0xFDD
 13632                           fsr2h	equ	0xFDA
 13633                           fsr2l	equ	0xFD9
 13634                           status	equ	0xFD8
 13635                           
 13636 ;; *************** function _Lcd_Cmd *****************
 13637 ;; Defined at:
 13638 ;;		line 140 in file "../lcd.h"
 13639 ;; Parameters:    Size  Location     Type
 13640 ;;  data            1    wreg     unsigned char 
 13641 ;; Auto vars:     Size  Location     Type
 13642 ;;  data            1    2[COMRAM] unsigned char 
 13643 ;; Return value:  Size  Location     Type
 13644 ;;		None               void
 13645 ;; Registers used:
 13646 ;;		wreg, status,2, status,0
 13647 ;; Tracked objects:
 13648 ;;		On entry : 0/0
 13649 ;;		On exit  : 0/0
 13650 ;;		Unchanged: 0/0
 13651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13655 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13656 ;;Total ram usage:        3 bytes
 13657 ;; Hardware stack levels used:    1
 13658 ;; This function calls:
 13659 ;;		Nothing
 13660 ;; This function is called by:
 13661 ;;		_Lcd_Init
 13662 ;;		_Lcd_Out
 13663 ;;		_main
 13664 ;;		_Configurar_Pantalla
 13665 ;;		_Configurar_Dia
 13666 ;;		_Configurar_Hora
 13667 ;;		_Seleccionar_Dato
 13668 ;;		_Configurar_Hora_Grl
 13669 ;;		_Lcd_Out2
 13670 ;; This function uses a non-reentrant model
 13671 ;;
 13672                           
 13673                           	psect	text47
 13674  00CD24                     __ptext47:
 13675                           	opt stack 0
 13676  00CD24                     _Lcd_Cmd:
 13677                           	opt stack 29
 13678                           
 13679                           ;incstack = 0
 13680                           ;Lcd_Cmd@data stored from wreg
 13681  00CD24  6E03               	movwf	Lcd_Cmd@data,c
 13682                           
 13683                           ;lcd.h: 141: LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
 13684  00CD26  988A               	bcf	3978,4,c	;volatile
 13685  00CD28  9A8A               	bcf	3978,5,c	;volatile
 13686                           
 13687                           ;lcd.h: 142: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
 13688  00CD2A  6A01               	clrf	??_Lcd_Cmd& (0+255),c
 13689  00CD2C  AE03               	btfss	Lcd_Cmd@data,7,c
 13690  00CD2E  D001               	bra	u3665
 13691  00CD30  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
 13692  00CD32                     u3665:
 13693  00CD32  0E01               	movlw	1
 13694  00CD34  1601               	andwf	??_Lcd_Cmd,f,c
 13695  00CD36  508A               	movf	3978,w,c	;volatile
 13696  00CD38  1801               	xorwf	??_Lcd_Cmd,w,c
 13697  00CD3A  0BFE               	andlw	-2
 13698  00CD3C  1801               	xorwf	??_Lcd_Cmd,w,c
 13699  00CD3E  6E8A               	movwf	3978,c	;volatile
 13700  00CD40  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 13701  00CD44  0E06               	movlw	6
 13702  00CD46  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
 13703  00CD48                     u3675:
 13704  00CD48  90D8               	bcf	status,0,c
 13705  00CD4A  3201               	rrcf	??_Lcd_Cmd,f,c
 13706  00CD4C  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
 13707  00CD4E  D7FC               	goto	u3675
 13708  00CD50  0E01               	movlw	1
 13709  00CD52  1601               	andwf	??_Lcd_Cmd,f,c
 13710  00CD54  4601               	rlncf	??_Lcd_Cmd,f,c
 13711  00CD56  508A               	movf	3978,w,c	;volatile
 13712  00CD58  1801               	xorwf	??_Lcd_Cmd,w,c
 13713  00CD5A  0BFD               	andlw	-3
 13714  00CD5C  1801               	xorwf	??_Lcd_Cmd,w,c
 13715  00CD5E  6E8A               	movwf	3978,c	;volatile
 13716                           
 13717                           ;lcd.h: 143: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
 13718  00CD60  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 13719  00CD64  0E05               	movlw	5
 13720  00CD66  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
 13721  00CD68                     u3685:
 13722  00CD68  90D8               	bcf	status,0,c
 13723  00CD6A  3201               	rrcf	??_Lcd_Cmd,f,c
 13724  00CD6C  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
 13725  00CD6E  D7FC               	goto	u3685
 13726  00CD70  0E01               	movlw	1
 13727  00CD72  1601               	andwf	??_Lcd_Cmd,f,c
 13728  00CD74  4601               	rlncf	??_Lcd_Cmd,f,c
 13729  00CD76  4601               	rlncf	??_Lcd_Cmd,f,c
 13730  00CD78  508A               	movf	3978,w,c	;volatile
 13731  00CD7A  1801               	xorwf	??_Lcd_Cmd,w,c
 13732  00CD7C  0BFB               	andlw	-5
 13733  00CD7E  1801               	xorwf	??_Lcd_Cmd,w,c
 13734  00CD80  6E8A               	movwf	3978,c	;volatile
 13735  00CD82  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 13736  00CD86  3A01               	swapf	??_Lcd_Cmd,f,c
 13737  00CD88  0E0F               	movlw	15
 13738  00CD8A  1601               	andwf	??_Lcd_Cmd,f,c
 13739  00CD8C  0E01               	movlw	1
 13740  00CD8E  1601               	andwf	??_Lcd_Cmd,f,c
 13741  00CD90  4601               	rlncf	??_Lcd_Cmd,f,c
 13742  00CD92  4601               	rlncf	??_Lcd_Cmd,f,c
 13743  00CD94  4601               	rlncf	??_Lcd_Cmd,f,c
 13744  00CD96  508A               	movf	3978,w,c	;volatile
 13745  00CD98  1801               	xorwf	??_Lcd_Cmd,w,c
 13746  00CD9A  0BF7               	andlw	-9
 13747  00CD9C  1801               	xorwf	??_Lcd_Cmd,w,c
 13748  00CD9E  6E8A               	movwf	3978,c	;volatile
 13749                           
 13750                           ;lcd.h: 144: _delay(10);
 13751  00CDA0  0E03               	movlw	3
 13752  00CDA2                     u6477:
 13753  00CDA2  2EE8               	decfsz	wreg,f,c
 13754  00CDA4  D7FE               	goto	u6477
 13755  00CDA6  F000               	nop	
 13756                           
 13757                           ;lcd.h: 145: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(4000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
 13758  00CDA8  888A               	bsf	3978,4,c	;volatile
 13759  00CDAA  F000               	nop	
 13760  00CDAC  D000               	nop2		;2 cycle nop
 13761  00CDAE  D000               	nop2		;2 cycle nop
 13762  00CDB0  988A               	bcf	3978,4,c	;volatile
 13763                           
 13764                           ;lcd.h: 146: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
 13765  00CDB2  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 13766  00CDB6  90D8               	bcf	status,0,c
 13767  00CDB8  3201               	rrcf	??_Lcd_Cmd,f,c
 13768  00CDBA  90D8               	bcf	status,0,c
 13769  00CDBC  3201               	rrcf	??_Lcd_Cmd,f,c
 13770  00CDBE  90D8               	bcf	status,0,c
 13771  00CDC0  3201               	rrcf	??_Lcd_Cmd,f,c
 13772  00CDC2  0E01               	movlw	1
 13773  00CDC4  1601               	andwf	??_Lcd_Cmd,f,c
 13774  00CDC6  508A               	movf	3978,w,c	;volatile
 13775  00CDC8  1801               	xorwf	??_Lcd_Cmd,w,c
 13776  00CDCA  0BFE               	andlw	-2
 13777  00CDCC  1801               	xorwf	??_Lcd_Cmd,w,c
 13778  00CDCE  6E8A               	movwf	3978,c	;volatile
 13779  00CDD0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 13780  00CDD4  90D8               	bcf	status,0,c
 13781  00CDD6  3201               	rrcf	??_Lcd_Cmd,f,c
 13782  00CDD8  90D8               	bcf	status,0,c
 13783  00CDDA  3201               	rrcf	??_Lcd_Cmd,f,c
 13784  00CDDC  0E01               	movlw	1
 13785  00CDDE  1601               	andwf	??_Lcd_Cmd,f,c
 13786  00CDE0  4601               	rlncf	??_Lcd_Cmd,f,c
 13787  00CDE2  508A               	movf	3978,w,c	;volatile
 13788  00CDE4  1801               	xorwf	??_Lcd_Cmd,w,c
 13789  00CDE6  0BFD               	andlw	-3
 13790  00CDE8  1801               	xorwf	??_Lcd_Cmd,w,c
 13791  00CDEA  6E8A               	movwf	3978,c	;volatile
 13792                           
 13793                           ;lcd.h: 147: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
 13794  00CDEC  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 13795  00CDF0  90D8               	bcf	status,0,c
 13796  00CDF2  3201               	rrcf	??_Lcd_Cmd,f,c
 13797  00CDF4  0E01               	movlw	1
 13798  00CDF6  1601               	andwf	??_Lcd_Cmd,f,c
 13799  00CDF8  4601               	rlncf	??_Lcd_Cmd,f,c
 13800  00CDFA  4601               	rlncf	??_Lcd_Cmd,f,c
 13801  00CDFC  508A               	movf	3978,w,c	;volatile
 13802  00CDFE  1801               	xorwf	??_Lcd_Cmd,w,c
 13803  00CE00  0BFB               	andlw	-5
 13804  00CE02  1801               	xorwf	??_Lcd_Cmd,w,c
 13805  00CE04  6E8A               	movwf	3978,c	;volatile
 13806  00CE06  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 13807  00CE0A  0E01               	movlw	1
 13808  00CE0C  1601               	andwf	??_Lcd_Cmd,f,c
 13809  00CE0E  4601               	rlncf	??_Lcd_Cmd,f,c
 13810  00CE10  4601               	rlncf	??_Lcd_Cmd,f,c
 13811  00CE12  4601               	rlncf	??_Lcd_Cmd,f,c
 13812  00CE14  508A               	movf	3978,w,c	;volatile
 13813  00CE16  1801               	xorwf	??_Lcd_Cmd,w,c
 13814  00CE18  0BF7               	andlw	-9
 13815  00CE1A  1801               	xorwf	??_Lcd_Cmd,w,c
 13816  00CE1C  6E8A               	movwf	3978,c	;volatile
 13817                           
 13818                           ;lcd.h: 148: _delay(10);
 13819  00CE1E  0E03               	movlw	3
 13820  00CE20                     u6487:
 13821  00CE20  2EE8               	decfsz	wreg,f,c
 13822  00CE22  D7FE               	goto	u6487
 13823  00CE24  F000               	nop	
 13824                           
 13825                           ;lcd.h: 149: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(4000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
 13826  00CE26  888A               	bsf	3978,4,c	;volatile
 13827  00CE28  F000               	nop	
 13828  00CE2A  D000               	nop2		;2 cycle nop
 13829  00CE2C  D000               	nop2		;2 cycle nop
 13830  00CE2E  988A               	bcf	3978,4,c	;volatile
 13831                           
 13832                           ;lcd.h: 150: _delay((unsigned long)((5500)*(4000000/4000000.0)));
 13833  00CE30  0E08               	movlw	8
 13834  00CE32  6E01               	movwf	??_Lcd_Cmd& (0+255),c
 13835  00CE34  0E23               	movlw	35
 13836  00CE36                     u6497:
 13837  00CE36  2EE8               	decfsz	wreg,f,c
 13838  00CE38  D7FE               	goto	u6497
 13839  00CE3A  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
 13840  00CE3C  D7FC               	goto	u6497
 13841  00CE3E  F000               	nop	
 13842  00CE40  0012               	return		;funcret
 13843  00CE42                     __end_of_Lcd_Cmd:
 13844                           	opt stack 0
 13845                           tblptru	equ	0xFF8
 13846                           tblptrh	equ	0xFF7
 13847                           tblptrl	equ	0xFF6
 13848                           tablat	equ	0xFF5
 13849                           prodh	equ	0xFF4
 13850                           prodl	equ	0xFF3
 13851                           intcon	equ	0xFF2
 13852                           indf0	equ	0xFEF
 13853                           postinc0	equ	0xFEE
 13854                           fsr0h	equ	0xFEA
 13855                           fsr0l	equ	0xFE9
 13856                           wreg	equ	0xFE8
 13857                           postdec1	equ	0xFE5
 13858                           fsr1l	equ	0xFE1
 13859                           indf2	equ	0xFDF
 13860                           postinc2	equ	0xFDE
 13861                           postdec2	equ	0xFDD
 13862                           fsr2h	equ	0xFDA
 13863                           fsr2l	equ	0xFD9
 13864                           status	equ	0xFD8
 13865                           
 13866 ;; *************** function _Lcd_Chr_CP *****************
 13867 ;; Defined at:
 13868 ;;		line 126 in file "../lcd.h"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;  data            1    wreg     unsigned char 
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;  data            1    2[COMRAM] unsigned char 
 13873 ;; Return value:  Size  Location     Type
 13874 ;;		None               void
 13875 ;; Registers used:
 13876 ;;		wreg, status,2, status,0
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13883 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13884 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13885 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13886 ;;Total ram usage:        3 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; This function calls:
 13889 ;;		Nothing
 13890 ;; This function is called by:
 13891 ;;		_Lcd_Out
 13892 ;;		_Lcd_Out2
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           	psect	text48
 13897  00CE42                     __ptext48:
 13898                           	opt stack 0
 13899  00CE42                     _Lcd_Chr_CP:
 13900                           	opt stack 27
 13901                           
 13902                           ;incstack = 0
 13903                           ;Lcd_Chr_CP@data stored from wreg
 13904  00CE42  6E03               	movwf	Lcd_Chr_CP@data,c
 13905                           
 13906                           ;lcd.h: 127: LATBbits.LATB4 = 0; LATBbits.LATB5 = 1;
 13907  00CE44  988A               	bcf	3978,4,c	;volatile
 13908  00CE46  8A8A               	bsf	3978,5,c	;volatile
 13909                           
 13910                           ;lcd.h: 128: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
 13911  00CE48  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
 13912  00CE4A  AE03               	btfss	Lcd_Chr_CP@data,7,c
 13913  00CE4C  D001               	bra	u3695
 13914  00CE4E  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
 13915  00CE50                     u3695:
 13916  00CE50  0E01               	movlw	1
 13917  00CE52  1601               	andwf	??_Lcd_Chr_CP,f,c
 13918  00CE54  508A               	movf	3978,w,c	;volatile
 13919  00CE56  1801               	xorwf	??_Lcd_Chr_CP,w,c
 13920  00CE58  0BFE               	andlw	-2
 13921  00CE5A  1801               	xorwf	??_Lcd_Chr_CP,w,c
 13922  00CE5C  6E8A               	movwf	3978,c	;volatile
 13923  00CE5E  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
 13924  00CE62  0E06               	movlw	6
 13925  00CE64  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
 13926  00CE66                     u3705:
 13927  00CE66  90D8               	bcf	status,0,c
 13928  00CE68  3201               	rrcf	??_Lcd_Chr_CP,f,c
 13929  00CE6A  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
 13930  00CE6C  D7FC               	goto	u3705
 13931  00CE6E  0E01               	movlw	1
 13932  00CE70  1601               	andwf	??_Lcd_Chr_CP,f,c
 13933  00CE72  4601               	rlncf	??_Lcd_Chr_CP,f,c
 13934  00CE74  508A               	movf	3978,w,c	;volatile
 13935  00CE76  1801               	xorwf	??_Lcd_Chr_CP,w,c
 13936  00CE78  0BFD               	andlw	-3
 13937  00CE7A  1801               	xorwf	??_Lcd_Chr_CP,w,c
 13938  00CE7C  6E8A               	movwf	3978,c	;volatile
 13939                           
 13940                           ;lcd.h: 129: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
 13941  00CE7E  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
 13942  00CE82  0E05               	movlw	5
 13943  00CE84  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
 13944  00CE86                     u3715:
 13945  00CE86  90D8               	bcf	status,0,c
 13946  00CE88  3201               	rrcf	??_Lcd_Chr_CP,f,c
 13947  00CE8A  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
 13948  00CE8C  D7FC               	goto	u3715
 13949  00CE8E  0E01               	movlw	1
 13950  00CE90  1601               	andwf	??_Lcd_Chr_CP,f,c
 13951  00CE92  4601               	rlncf	??_Lcd_Chr_CP,f,c
 13952  00CE94  4601               	rlncf	??_Lcd_Chr_CP,f,c
 13953  00CE96  508A               	movf	3978,w,c	;volatile
 13954  00CE98  1801               	xorwf	??_Lcd_Chr_CP,w,c
 13955  00CE9A  0BFB               	andlw	-5
 13956  00CE9C  1801               	xorwf	??_Lcd_Chr_CP,w,c
 13957  00CE9E  6E8A               	movwf	3978,c	;volatile
 13958  00CEA0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
 13959  00CEA4  3A01               	swapf	??_Lcd_Chr_CP,f,c
 13960  00CEA6  0E0F               	movlw	15
 13961  00CEA8  1601               	andwf	??_Lcd_Chr_CP,f,c
 13962  00CEAA  0E01               	movlw	1
 13963  00CEAC  1601               	andwf	??_Lcd_Chr_CP,f,c
 13964  00CEAE  4601               	rlncf	??_Lcd_Chr_CP,f,c
 13965  00CEB0  4601               	rlncf	??_Lcd_Chr_CP,f,c
 13966  00CEB2  4601               	rlncf	??_Lcd_Chr_CP,f,c
 13967  00CEB4  508A               	movf	3978,w,c	;volatile
 13968  00CEB6  1801               	xorwf	??_Lcd_Chr_CP,w,c
 13969  00CEB8  0BF7               	andlw	-9
 13970  00CEBA  1801               	xorwf	??_Lcd_Chr_CP,w,c
 13971  00CEBC  6E8A               	movwf	3978,c	;volatile
 13972                           
 13973                           ;lcd.h: 130: _delay(10);
 13974  00CEBE  0E03               	movlw	3
 13975  00CEC0                     u6507:
 13976  00CEC0  2EE8               	decfsz	wreg,f,c
 13977  00CEC2  D7FE               	goto	u6507
 13978  00CEC4  F000               	nop	
 13979                           
 13980                           ;lcd.h: 131: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(4000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
 13981  00CEC6  888A               	bsf	3978,4,c	;volatile
 13982  00CEC8  F000               	nop	
 13983  00CECA  D000               	nop2		;2 cycle nop
 13984  00CECC  D000               	nop2		;2 cycle nop
 13985  00CECE  988A               	bcf	3978,4,c	;volatile
 13986                           
 13987                           ;lcd.h: 132: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
 13988  00CED0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
 13989  00CED4  90D8               	bcf	status,0,c
 13990  00CED6  3201               	rrcf	??_Lcd_Chr_CP,f,c
 13991  00CED8  90D8               	bcf	status,0,c
 13992  00CEDA  3201               	rrcf	??_Lcd_Chr_CP,f,c
 13993  00CEDC  90D8               	bcf	status,0,c
 13994  00CEDE  3201               	rrcf	??_Lcd_Chr_CP,f,c
 13995  00CEE0  0E01               	movlw	1
 13996  00CEE2  1601               	andwf	??_Lcd_Chr_CP,f,c
 13997  00CEE4  508A               	movf	3978,w,c	;volatile
 13998  00CEE6  1801               	xorwf	??_Lcd_Chr_CP,w,c
 13999  00CEE8  0BFE               	andlw	-2
 14000  00CEEA  1801               	xorwf	??_Lcd_Chr_CP,w,c
 14001  00CEEC  6E8A               	movwf	3978,c	;volatile
 14002  00CEEE  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
 14003  00CEF2  90D8               	bcf	status,0,c
 14004  00CEF4  3201               	rrcf	??_Lcd_Chr_CP,f,c
 14005  00CEF6  90D8               	bcf	status,0,c
 14006  00CEF8  3201               	rrcf	??_Lcd_Chr_CP,f,c
 14007  00CEFA  0E01               	movlw	1
 14008  00CEFC  1601               	andwf	??_Lcd_Chr_CP,f,c
 14009  00CEFE  4601               	rlncf	??_Lcd_Chr_CP,f,c
 14010  00CF00  508A               	movf	3978,w,c	;volatile
 14011  00CF02  1801               	xorwf	??_Lcd_Chr_CP,w,c
 14012  00CF04  0BFD               	andlw	-3
 14013  00CF06  1801               	xorwf	??_Lcd_Chr_CP,w,c
 14014  00CF08  6E8A               	movwf	3978,c	;volatile
 14015                           
 14016                           ;lcd.h: 133: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
 14017  00CF0A  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
 14018  00CF0E  90D8               	bcf	status,0,c
 14019  00CF10  3201               	rrcf	??_Lcd_Chr_CP,f,c
 14020  00CF12  0E01               	movlw	1
 14021  00CF14  1601               	andwf	??_Lcd_Chr_CP,f,c
 14022  00CF16  4601               	rlncf	??_Lcd_Chr_CP,f,c
 14023  00CF18  4601               	rlncf	??_Lcd_Chr_CP,f,c
 14024  00CF1A  508A               	movf	3978,w,c	;volatile
 14025  00CF1C  1801               	xorwf	??_Lcd_Chr_CP,w,c
 14026  00CF1E  0BFB               	andlw	-5
 14027  00CF20  1801               	xorwf	??_Lcd_Chr_CP,w,c
 14028  00CF22  6E8A               	movwf	3978,c	;volatile
 14029  00CF24  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
 14030  00CF28  0E01               	movlw	1
 14031  00CF2A  1601               	andwf	??_Lcd_Chr_CP,f,c
 14032  00CF2C  4601               	rlncf	??_Lcd_Chr_CP,f,c
 14033  00CF2E  4601               	rlncf	??_Lcd_Chr_CP,f,c
 14034  00CF30  4601               	rlncf	??_Lcd_Chr_CP,f,c
 14035  00CF32  508A               	movf	3978,w,c	;volatile
 14036  00CF34  1801               	xorwf	??_Lcd_Chr_CP,w,c
 14037  00CF36  0BF7               	andlw	-9
 14038  00CF38  1801               	xorwf	??_Lcd_Chr_CP,w,c
 14039  00CF3A  6E8A               	movwf	3978,c	;volatile
 14040                           
 14041                           ;lcd.h: 134: _delay(10);
 14042  00CF3C  0E03               	movlw	3
 14043  00CF3E                     u6517:
 14044  00CF3E  2EE8               	decfsz	wreg,f,c
 14045  00CF40  D7FE               	goto	u6517
 14046  00CF42  F000               	nop	
 14047                           
 14048                           ;lcd.h: 135: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(4000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
 14049  00CF44  888A               	bsf	3978,4,c	;volatile
 14050  00CF46  F000               	nop	
 14051  00CF48  D000               	nop2		;2 cycle nop
 14052  00CF4A  D000               	nop2		;2 cycle nop
 14053  00CF4C  988A               	bcf	3978,4,c	;volatile
 14054                           
 14055                           ;lcd.h: 136: _delay((unsigned long)((5)*(4000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(4000000/4000000.0)));
 14056  00CF4E  F000               	nop	
 14057  00CF50  D000               	nop2		;2 cycle nop
 14058  00CF52  D000               	nop2		;2 cycle nop
 14059  00CF54  0E08               	movlw	8
 14060  00CF56  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
 14061  00CF58  0E23               	movlw	35
 14062  00CF5A                     u6527:
 14063  00CF5A  2EE8               	decfsz	wreg,f,c
 14064  00CF5C  D7FE               	goto	u6527
 14065  00CF5E  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
 14066  00CF60  D7FC               	goto	u6527
 14067  00CF62  F000               	nop	
 14068  00CF64  0012               	return		;funcret
 14069  00CF66                     __end_of_Lcd_Chr_CP:
 14070                           	opt stack 0
 14071                           tblptru	equ	0xFF8
 14072                           tblptrh	equ	0xFF7
 14073                           tblptrl	equ	0xFF6
 14074                           tablat	equ	0xFF5
 14075                           prodh	equ	0xFF4
 14076                           prodl	equ	0xFF3
 14077                           intcon	equ	0xFF2
 14078                           indf0	equ	0xFEF
 14079                           postinc0	equ	0xFEE
 14080                           fsr0h	equ	0xFEA
 14081                           fsr0l	equ	0xFE9
 14082                           wreg	equ	0xFE8
 14083                           postdec1	equ	0xFE5
 14084                           fsr1l	equ	0xFE1
 14085                           indf2	equ	0xFDF
 14086                           postinc2	equ	0xFDE
 14087                           postdec2	equ	0xFDD
 14088                           fsr2h	equ	0xFDA
 14089                           fsr2l	equ	0xFD9
 14090                           status	equ	0xFD8
 14091                           tblptru	equ	0xFF8
 14092                           tblptrh	equ	0xFF7
 14093                           tblptrl	equ	0xFF6
 14094                           tablat	equ	0xFF5
 14095                           prodh	equ	0xFF4
 14096                           prodl	equ	0xFF3
 14097                           intcon	equ	0xFF2
 14098                           indf0	equ	0xFEF
 14099                           postinc0	equ	0xFEE
 14100                           fsr0h	equ	0xFEA
 14101                           fsr0l	equ	0xFE9
 14102                           wreg	equ	0xFE8
 14103                           postdec1	equ	0xFE5
 14104                           fsr1l	equ	0xFE1
 14105                           indf2	equ	0xFDF
 14106                           postinc2	equ	0xFDE
 14107                           postdec2	equ	0xFDD
 14108                           fsr2h	equ	0xFDA
 14109                           fsr2l	equ	0xFD9
 14110                           status	equ	0xFD8
 14111                           
 14112                           	psect	rparam
 14113  0000                     tblptru	equ	0xFF8
 14114                           tblptrh	equ	0xFF7
 14115                           tblptrl	equ	0xFF6
 14116                           tablat	equ	0xFF5
 14117                           prodh	equ	0xFF4
 14118                           prodl	equ	0xFF3
 14119                           intcon	equ	0xFF2
 14120                           indf0	equ	0xFEF
 14121                           postinc0	equ	0xFEE
 14122                           fsr0h	equ	0xFEA
 14123                           fsr0l	equ	0xFE9
 14124                           wreg	equ	0xFE8
 14125                           postdec1	equ	0xFE5
 14126                           fsr1l	equ	0xFE1
 14127                           indf2	equ	0xFDF
 14128                           postinc2	equ	0xFDE
 14129                           postdec2	equ	0xFDD
 14130                           fsr2h	equ	0xFDA
 14131                           fsr2l	equ	0xFD9
 14132                           status	equ	0xFD8


Data Sizes:
    Strings     344
    Constant    118
    Data        23
    BSS         74
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     60     154
    BANK1           256      0      16
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), STR_47(CODE[7]), STR_42(CODE[9]), STR_41(CODE[7]), 
		 -> STR_40(CODE[7]), STR_39(CODE[7]), lectura_temp(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 29
		 -> STR_38(CODE[10]), STR_37(CODE[10]), STR_36(CODE[10]), STR_35(CODE[10]), 
		 -> STR_34(CODE[10]), STR_33(CODE[9]), STR_32(CODE[10]), STR_30(CODE[5]), 
		 -> STR_28(CODE[5]), STR_17(CODE[29]), STR_16(CODE[14]), STR_15(CODE[11]), 
		 -> STR_14(CODE[15]), STR_12(CODE[22]), STR_11(CODE[23]), STR_10(CODE[22]), 
		 -> STR_9(CODE[25]), STR_8(CODE[22]), STR_7(CODE[21]), STR_6(CODE[23]), 
		 -> STR_5(CODE[29]), STR_4(CODE[11]), STR_3(CODE[14]), STR_2(CODE[4]), 
		 -> STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    estacion	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), STR_42(CODE[9]), STR_41(CODE[7]), STR_40(CODE[7]), 
		 -> STR_39(CODE[7]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_46(CODE[1]), STR_45(CODE[1]), STR_44(CODE[1]), STR_43(CODE[1]), 
		 -> STR_31(CODE[1]), STR_29(CODE[1]), STR_27(CODE[1]), STR_26(CODE[1]), 
		 -> STR_25(CODE[1]), STR_24(CODE[1]), STR_23(CODE[1]), STR_22(CODE[1]), 
		 -> STR_21(CODE[1]), STR_20(CODE[1]), STR_19(CODE[1]), STR_18(CODE[1]), 
		 -> STR_13(CODE[20]), buffer1(BANK0[20]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _Iniciar_Display->_Mostrar_DiaYfecha
    ___lbtoft->___ftpack
    _Mostrar_DiaYfecha->_sprintf
    _Actualiza_datos->_Encender_Aire_Calefaccion
    _Encender_Aire_Calefaccion->___ftge
    ___awtoft->___ftpack
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _Programar_Temperatura->_Seleccionar_Dato
    _Configurar_Hora_Grl->_Seleccionar_Dato
    _Configurar_Hora->_Seleccionar_Dato
    _Configurar_Fecha->_Seleccionar_Dato
    _Seleccionar_Dato->_sprintf
    _Configurar_Dia->_Conseguir_Dia
    _Write_RTC->___awdiv
    _Conseguir_Dia->_sprintf
    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___ftadd
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_Configurar_Pantalla
    _Iniciar_Display->_sprintf
    _Mostrar_DiaYfecha->_sprintf
    _Configurar_Pantalla->_Configurar_Fecha
    _Configurar_Pantalla->_Configurar_Hora_Grl
    _Programar_Temperatura->_Seleccionar_Dato
    _Configurar_Hora_Grl->_Seleccionar_Dato
    _Configurar_Hora->_Seleccionar_Dato
    _Configurar_Fecha->_Seleccionar_Dato
    _Seleccionar_Dato->_sprintf
    _Conseguir_Dia->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  528110
                                             59 BANK0      1     1      0
                _Configurar_Pantalla
                    _Iniciar_Display
                            _Lcd_Cmd
                           _Lcd_Init
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Iniciar_Display                                      0     0      0  133378
                    _Actualiza_datos
          _Encender_Aire_Calefaccion
                    _Encender_Alarma
                  _Encender_vidriera
                            _Lcd_Out
                  _Mostrar_DiaYfecha
                            ___ftmul
                           ___lbtoft
                 _conseguir_estacion
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _conseguir_estacion                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2131
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Mostrar_DiaYfecha                                    6     2      4   56037
                                             84 COMRAM     6     2      4
                            _Lcd_Out
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _Encender_vidriera                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Encender_Alarma                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Actualiza_datos                                      2     2      0    7940
                                             69 COMRAM     2     2      0
          _Encender_Aire_Calefaccion
                           _Read_RTC
                            _lee_ADC
 ---------------------------------------------------------------------------------
 (3) _lee_ADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Encender_Aire_Calefaccion                            3     3      0    6948
                                             66 COMRAM     3     3      0
                           ___awtoft
                            ___ftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _Configurar_Pantalla                                  4     4      0  390685
                                             55 BANK0      4     4      0
                     _Configurar_Dia
                   _Configurar_Fecha
                    _Configurar_Hora
                _Configurar_Hora_Grl
                            _Lcd_Cmd
                            _Lcd_Out
              _Programar_Temperatura
                           _Read_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (4) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (4) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _Programar_Temperatura                                2     2      0   64084
                                             31 BANK0      2     2      0
                            _Lcd_Out
                   _Seleccionar_Dato
 ---------------------------------------------------------------------------------
 (2) _Configurar_Hora_Grl                                 24    14     10   69135
                                             31 BANK0     24    14     10
                            _Lcd_Cmd
                            _Lcd_Out
                   _Seleccionar_Dato
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (2) _Configurar_Hora                                     18    14      4   68227
                                             31 BANK0     18    14      4
                            _Lcd_Cmd
                            _Lcd_Out
                   _Seleccionar_Dato
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (2) _Configurar_Fecha                                    24    20      4   68188
                                             31 BANK0     24    20      4
                            _Lcd_Out
                   _Seleccionar_Dato
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (3) _Seleccionar_Dato                                    13     3     10   59686
                                             84 COMRAM    11     1     10
                                             29 BANK0      2     2      0
                            _Lcd_Cmd
                            _Lcd_Out
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _Configurar_Dia                                       2     2      0   63996
                                             86 COMRAM     2     2      0
                      _Conseguir_Dia
                            _Lcd_Cmd
                            _Lcd_Out
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                            0     0      0    3557
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (2) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (3) _Conseguir_Dia                                        2     2      0   55865
                                             84 COMRAM     2     2      0
                            _Lcd_Out
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             48    36     12   51492
                                             66 COMRAM    18     6     12
                                              0 BANK0     29    29      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11205
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   11007
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4457
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2348
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3860
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3563
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1032
                                             57 COMRAM     9     3      6
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (3) _Lcd_Out                                              5     2      3    4373
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configurar_Pantalla
     _Configurar_Dia
       _Conseguir_Dia
         _Lcd_Out
           _Lcd_Chr_CP
           _Lcd_Cmd
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Lcd_Cmd
       _Lcd_Out
         _Lcd_Chr_CP
         _Lcd_Cmd
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
           ___awmod (ARG)
     _Configurar_Fecha
       _Lcd_Out
         _Lcd_Chr_CP
         _Lcd_Cmd
       _Seleccionar_Dato
         _Lcd_Cmd
         _Lcd_Out
           _Lcd_Chr_CP
           _Lcd_Cmd
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
           ___awmod (ARG)
     _Configurar_Hora
       _Lcd_Cmd
       _Lcd_Out
         _Lcd_Chr_CP
         _Lcd_Cmd
       _Seleccionar_Dato
         _Lcd_Cmd
         _Lcd_Out
           _Lcd_Chr_CP
           _Lcd_Cmd
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
           ___awmod (ARG)
     _Configurar_Hora_Grl
       _Lcd_Cmd
       _Lcd_Out
         _Lcd_Chr_CP
         _Lcd_Cmd
       _Seleccionar_Dato
         _Lcd_Cmd
         _Lcd_Out
           _Lcd_Chr_CP
           _Lcd_Cmd
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
           ___awmod (ARG)
     _Lcd_Cmd
     _Lcd_Out
       _Lcd_Chr_CP
       _Lcd_Cmd
     _Programar_Temperatura
       _Lcd_Out
         _Lcd_Chr_CP
         _Lcd_Cmd
       _Seleccionar_Dato
         _Lcd_Cmd
         _Lcd_Out
           _Lcd_Chr_CP
           _Lcd_Cmd
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _Read_RTC
       _RtccReadDate
       _RtccReadTime
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Iniciar_Display
     _Actualiza_datos
       _Encender_Aire_Calefaccion
         ___awtoft
           ___ftpack
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _Read_RTC
         _RtccReadDate
         _RtccReadTime
       _lee_ADC
     _Encender_Aire_Calefaccion
       ___awtoft
         ___ftpack
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _Encender_Alarma
     _Encender_vidriera
     _Lcd_Out
       _Lcd_Chr_CP
       _Lcd_Cmd
     _Mostrar_DiaYfecha
       _Lcd_Out
         _Lcd_Chr_CP
         _Lcd_Cmd
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
     _conseguir_estacion
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
       ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      10       8        6.3%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      9A       5       96.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     109       6        0.0%
DATA                 0      0     109       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 23 17:22:44 2021

                  ?_Actualiza_datos 0001                                  l95 CFE6  
                                l96 D028                        ___awdiv@sign 000C  
               ___wmul@multiplicand 0011                        __CFG_CP0$OFF 000000  
                      ___ftadd@exp1 0039                        ___ftadd@exp2 0038  
                      ___ftadd@sign 0037                                 l310 EC1C  
                               l311 EC18                                 l303 EB1E  
                               l401 C5EE                                 l315 EC3C  
                               l260 D14A                                 l340 E274  
                               l253 D0BC                                 l341 E270  
                               l333 E198                                 l270 D1A2  
                               l262 D146                                 l254 D106  
                               l422 E6E4                                 l246 E5CC  
                               l327 E0FA                                 l423 E6E0  
                               l360 D252                                 l344 E2B4  
                               l328 E164                                 l440 E88C  
                               l265 D17E                                 l257 D102  
                               l345 E2B0                                 l329 E160  
                               l433 E77E                                 l266 D17A  
                               l282 E9D0                                 l442 E888  
                               l363 D2E6                                 l283 E9CC  
                               l339 E212                                 l427 E714  
                               l419 E628                                 l436 E832  
                               l357 D256                                 l349 E2E4  
                               l437 E82E                                 l366 D2E2  
                               l294 EAD6                                 l446 E8C6  
                               l462 C774                                 l454 C6F8  
                               l295 EAD2                                 l287 E9F6  
                               l464 C77A                                 l456 C6F2  
                               l385 C640                                 l298 EAFE  
                               l386 C670                                 l299 EAFA  
                               l459 C736                                 l396 C5D8  
                               l397 C5D4                                 l478 BEA8  
                               l598 F948                                 _dia 00DB  
                               _mes 00E5                        ___awmod@sign 0006  
                               wreg 000FE8                     RtccReadDate@pDt 0001  
                 ?_Seleccionar_Dato 0055                  ??_Seleccionar_Dato 005F  
                              l1106 DDBC                                l1115 DDD8  
                              l1019 D412                                l1220 C2F6  
                              l1140 D54C                                l1133 D4B6  
                              l1062 C818                                l1230 C16A  
                              l1134 D4DE                                l1091 DCD0  
                              l1165 BEF4                                l1095 DCFA  
                              l4010 C2B4                                l4006 C29E  
                              l4030 C134                                l4110 F1D2  
                              l4008 C2AC                                l4040 C044  
                              l4104 F17E                                l4050 C39A  
                              l4018 C2E6                                l4034 C15A  
                              l4026 C11E                                l4042 C052  
                              l4210 F566                                l4202 F4F6  
                              l4114 F1E6                                l5010 EB3E  
                              l4052 C3A0                                l4060 C3B4  
                              l4028 C12C                                l4212 F57C  
                              l4140 F2BE                                l4124 F220  
                              l4116 F1EC                                l4108 F1BA  
                              l4054 C3A6                                l4062 C3D0  
                              l3430 C78C                                l3510 DD80  
                              l4310 F94E                                l4230 F666  
                              l4222 F5E8                                l4206 F51E  
                              l4142 F2CA                                l4126 F22C  
                              l5022 EB98                                l4064 C3D8  
                              l4056 C3AC                                l3504 DD60  
                              l3600 C4E8                                l4304 F916  
                              l4224 F5F4                                l4232 F67A  
                              l4208 F534                                l4136 F298  
                              l4128 F234                                l4160 F352  
                              l4080 F0B2                                l4072 F07E  
                              l5008 EB26                                l5200 E734  
                              l3442 C7E0                                l3434 C79C  
                              l3506 DD6C                                l3610 C510  
                              l4402 FCC4                                l4410 FCF8  
                              l4322 F9D0                                l4306 F92A  
                              l4250 F736                                l4242 F6F6  
                              l4218 F5C2                                l4154 F32C  
                              l4146 F2DC                                l4162 F386  
                              l4090 F0F4                                l5042 EC44  
                              l5130 E304                                l4068 C402  
                              l3452 C820                                l3444 C800  
                              l3436 C7A8                                l3524 DDF6  
                              l3516 DDA4                                l3508 DD78  
                              l4412 FD04                                l4404 FCD0  
                              l4340 FAE0                                l4332 FAB6  
                              l4236 F6E2                                l4228 F638  
                              l4156 F34A                                l4148 F2F6  
                              l4084 F0BE                                l5044 EC5C  
                              l5052 E0AE                                l5220 E814  
                              l5140 C58A                                l3446 C80C  
                              l3438 C7C8                                l3534 DE28  
                              l3518 DDB0                                l3606 C4FE  
                              l3622 C53A                                l3550 CB66  
                              l4430 FDDE                                l4334 FAC6  
                              l4318 F97E                                l4254 F77A  
                              l4246 F730                                l4238 F6E8  
                              l4342 FAF0                                l4086 F0D4  
                              l4078 F09C                                l3608 C508  
                              l3544 CB3E                                l4424 FD54  
                              l4352 FB40                                l4272 F7E6  
                              l4280 F81A                                l4168 F3A2  
                              l4432 FDF8                                l4520 D5FA  
                              l5128 E2EC                                l5232 E870  
                              l5216 E7D0                                l5160 E5EC  
                              l5152 C5F6                                l4600 C308  
                              l3458 C832                                l3482 DD08  
                              l3626 C54A                                l3618 C52E  
                              l3650 C23E                                l3642 C21E  
                              l4418 FD2C                                l4370 FBB8  
                              l4362 FB8E                                l4354 FB46  
                              l4282 F82E                                l4274 F800  
                              l4266 F7CC                                l4258 F79C  
                              l4194 F48E                                l4178 F3EA  
                              l4434 FE18                                l4098 F158  
                              l4530 D62A                                l4514 D5C0  
                              l5250 E8E6                                l3476 DCDE  
                              l3820 D47C                                l3572 CBC2  
                              l3564 CB9A                                l3804 BED4  
                              l4428 FDD8                                l4380 FC14  
                              l4524 D60E                                l4452 CC80  
                              l5252 E900                                l5180 E6BE  
                              l5332 E37E                                l3910 D3D4  
                              l3902 D3B2                                l3814 D450  
                              l3662 C270                                l3654 C254  
                              l3646 C22C                                l3638 C210  
                              l3582 CBF0                                l3574 CBC8  
                              l4374 FBE6                                l4366 FB94  
                              l4358 FB54                                l4286 F852  
                              l4462 CCB0                                l4446 CC56  
                              l5086 E1A0                                l4702 C8BE  
                              l3488 DD14                                l3920 D3FE  
                              l3648 C236                                l3568 CBAC  
                              l4392 FC88                                l4288 F858  
                              l4296 F8EC                                l4456 CC94  
                              l5088 E1B8                                l5248 E8CE  
                              l5176 E67A                                l5328 E35C  
                              l4640 BF92                                l3498 DD3C  
                              l3922 D40C                                l3914 D3E4  
                              l3850 D50E                                l3842 D4EC  
                              l3594 C4D6                                l3658 C260  
                              l3578 CBDA                                l3754 E05C  
                              l3746 DF98                                l4394 FC94  
                              l4386 FC48                                l4298 F8FC  
                              l4570 D698                                l4562 D680  
                              l4490 CD00                                l4810 D2DA  
                              l5370 E4F0                                l5362 E4B8  
                              l4706 C900                                l5426 C1D2  
                              l3940 C48E                                l3860 D538  
                              l4388 FC54                                l3870 D30E  
                              l3862 D546                                l3854 D51E  
                              l3774 EE4E                                l4566 D68C  
                              l4494 CD0C                                l5198 E71C  
                              l4574 C09E                                l5382 E5A4  
                              l5366 E4DC                                l5358 E494  
                              l3936 C45C                                l3928 C012  
                              l3960 CA40                                l3792 F048  
                              l3768 EDA6                                l4760 C96A  
                              l4920 D120                                l4912 D0E2  
                              l5376 E54A                                l4840 D9E6  
                              l3946 C4BA                                l3890 D370  
                              l3786 EFA0                                l3778 EE72  
                              l4762 C980                                l4754 C928  
                              l4770 C9C2                                l4498 CD18  
                              l4914 D0E8                                l4842 DA14  
                              l4834 D95C                                l4850 DA9E  
                              l3876 D32C                                l4764 C996  
                              l4756 C93E                                l4772 CA00  
                              l4940 D1B8                                l4924 D12C  
                              l4844 DA42                                l4836 D98A  
                              l4852 DADC                                l3990 CAE0  
                              l3982 CAB8                                l4766 C9AC  
                              l4758 C954                                l4846 DA70  
                              l4838 D9B8                                l4870 C664  
                              l3992 CAEA                                l4872 C686  
                              l3978 CAA8                                l3898 D3A2  
                              l4938 D1AA                                l4794 D248  
                              l4946 E916                                l4698 C89A  
                              l4882 C6FE                                l4874 C69C  
                              l3996 CB02                                l3988 CAD2  
                              l4876 C6AA                                l4990 EA70  
                              l4958 E962                                l4976 E9FE  
                              l4888 C73C                                l4978 EA16  
                              STR_1 FF6E                                STR_2 FFF3  
                              STR_3 FF7E                                STR_4 FF8C  
                              STR_5 FE9F                                STR_6 FED5  
                              STR_7 FF45                                STR_8 FF19  
                              STR_9 FEBC                                u4021 CA24  
                              u4040 CA5E                                u4045 CA56  
                              u3501 CB4E                                u3271 DC9C  
                              u4320 F31E                                u3281 DCB0  
                              u4170 C3F8                                u4180 C422  
                              u4260 F268                                u4327 F314  
                              u4600 F940                                u3705 CE66  
                              u4177 C3EE                                u3481 CB26  
                              u6201 E8E2                                u5410 D0D4  
                              u5250 BF6C                                u3715 CE86  
                              u4187 C418                                u3811 D434  
                              u4267 F25E                                u4380 F42A  
                              u3831 D460                                u3665 CD32  
                              u4385 F420                                u6330 E5BA  
                              u6250 E350                                u5290 C634  
                              u3675 CD48                                u6260 E372  
                              u3685 CD68                                u3695 CE50  
                              u6407 CFA4                                u6417 CFB4  
                              u6507 CEC0                                u6427 CFC4  
                              u6517 CF3E                                u6437 CFD4  
                              u6527 CF5A                                u6447 D016  
                              u6457 D058                                u6377 C1EC  
                              u6467 BEAE                                u6387 CF84  
                              u6477 CDA2                                u6397 CF94  
                              u6487 CE20                                u6497 CE36  
                 _Encender_vidriera C6BA                                _anio 00D9  
                              _fila 00B2                                _main C17C  
                              _hora 00DF                        ___ftpack@arg 0001  
                      ___ftpack@exp 0004                                fsr0h 000FEA  
                              indf0 000FEF                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                     __CFG_T1DIG$ON 000000                  ?_Encender_vidriera 0001  
                   _Iniciar_Display D7EA                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                     __CFG_IESO$OFF 000000        Configurar_Hora_Grl@columna_i 0085  
                  RtccReadDate@rTD0 000B                    RtccReadDate@rTD1 0003  
                   ??_Conseguir_Dia 0055                     __end_of_Lcd_Cmd CE42  
                      _sprintf$2567 0060                     __end_of_Lcd_Out C42A  
                      ___ftmul@cntr 0022                        ___param_bank 000010  
                      ___ftmul@sign 0023                     RtccReadTime@pTm 0001  
         __size_of_Configurar_Fecha 036A                          _Lcd_Chr_CP CE42  
               ??_Encender_vidriera 0001          ?_Encender_Aire_Calefaccion 0001  
                      ___fttol@exp1 0039                        ___fttol@lval 0035  
                     __CFG_PLLDIV$1 000000          __end_of_conseguir_estacion C6BA  
                             ?_main 0001                     __end_of___awdiv C556  
                   __end_of___ftadd DE50                               STR_10 FF2F  
                             STR_11 FEEC                               STR_20 FFA0  
                             STR_12 FF03                               STR_21 FFA0  
                             STR_13 FF5A                               STR_22 FFA0  
                             STR_30 FF14                               STR_14 FF0A  
                             STR_31 FFA0                               STR_23 FFA0  
                             STR_15 FF73                               STR_24 FFA0  
                             STR_16 FF7E                               STR_40 FFEC  
                             STR_32 FFB5                               STR_25 FFA0  
                             STR_41 FFEC                               STR_17 FE9F  
                             STR_33 FFD3                               STR_26 FFA0  
                             STR_18 FFA0                               STR_42 FFDC  
                             STR_34 FFA1                               STR_43 FFA0  
                             STR_27 FFA0                               STR_19 FFA0  
                             STR_35 FFC9                               STR_44 FFA0  
                             STR_28 FF14                               STR_36 FFAB  
                   __end_of___awmod C27C                               STR_45 FFA0  
                             STR_29 FFA0                               STR_37 FFBF  
                             STR_46 FFA0                               STR_38 FF97  
                             STR_39 FFEC                               STR_47 FFE5  
                   __end_of___ftneg BF02                     __end_of___lldiv C308  
                   __end_of___ftmul CC18                     ___awdiv@divisor 0009  
                   __end_of___llmod C17C                     __end_of___ftsub C03E  
                   __end_of___fttol CB16                     ___awdiv@counter 000B  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                     __end_of_lee_ADC BEBC  
                      ___lltoft@exp 0011                      __CFG_FCMEN$OFF 000000  
                     ___awtoft@sign 000C                     __end_of_dpowers FE51  
                             _mes_d 00F4                               _mes_u 00F5  
                             _scale EC70                     __end_of_isdigit BEDE  
         __end_of_Encender_vidriera C77C                       ___ftpack@sign 0005  
                             tablat 000FF5                               status 000FD8  
      Configurar_Hora_Grl@tipo_hora 0087                     __end_of_sprintf FE28  
                  __end_of_Lcd_Init D08C             __CFG_DSWDTOSC$INTOSCREF 000000  
                   __initialization BFB8                     _Configurar_Hora E09E  
                      __end_of_main C1FA                    RtccReadTime@rTD0 000B  
                  RtccReadTime@rTD1 0003                    __end_of_Read_RTC D7EA  
 __end_of_Encender_Aire_Calefaccion C926                              ??_main 009B  
                     ___fttol@sign1 0034                       __activetblptr 000002  
              __size_of__tdiv_to_l_ 013A                    __end_of_RtccWrOn BE8A  
                  Actualiza_datos@i 0046                              _ADCON0 000FC2  
                            _ADCON1 000FC1                    ___llmod@dividend 000E  
                            ?_scale 0024                              _ADRESH 000FC4  
           __end_of_Iniciar_Display D95A                              _EECON2 000FA7  
                            _ANCON0 000F48                              _ANCON1 000F49  
                  ___awdiv@dividend 0007                    __end_of___awtoft BFB8  
                  __end_of___ftpack C842                    __end_of___lbtoft BF28  
                  __end_of___lltoft C09E                      __CFG_WDTEN$OFF 000000  
                         ??_Lcd_Cmd 0001                    RtccWriteDate@pDt 0001  
                            _RTCCFG 000F3F                           ??_Lcd_Out 0007  
               _Configurar_Hora_Grl E5D6                      __CFG_WPCFG$OFF 000000  
             _Programar_Temperatura C556                      __CFG_WPDIS$OFF 000000  
               _Configurar_Pantalla E318                Configurar_Dia@estado 0057  
                    __CFG_XINST$OFF 000000                    __end_of__powers_ FE9F  
                            ___ftge C42A                         ?_Lcd_Chr_CP 0001  
                            ___wmul BF28                           ??___awdiv 000B  
                         ??___ftadd 0034                      __CFG_STVREN$ON 000000  
                         ??___awmod 0005                           ??___ftneg 0004  
                         ??___lldiv 0009                              _diasem 00DD  
                         ??___ftmul 001B                              _anio_d 00ED  
                         ??___llmod 0016                           ??___ftsub 0040  
                         ??___fttol 002F                              _anio_u 00EE  
                            _config 00AE                              _grados 00D6  
                            _hora_d 00F2                              _hora_u 00F3  
                            _fround DE50                              clear_0 BFBE  
                            clear_1 BFCA                    ___awdiv@quotient 000D  
                            _minuto 00E7                     ___awmod@divisor 0003  
                         ??_lee_ADC 0001                ?_Configurar_Hora_Grl 007F  
                   ___awmod@counter 0005               __end_of_RtccWriteDate D6A4  
    Configurar_Hora_Grl@config_hora 008B               __end_of_RtccWriteTime CD24  
             ___ftmul@f3_as_product 001F                    RtccWriteTime@pTm 0001  
              ?_Configurar_Pantalla 0001                           ??_isdigit 0001  
                      __mediumconst FE28                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
             Mostrar_DiaYfecha@fila 0055                           ??_sprintf 004F  
        __size_of_Encender_vidriera 00C2                          __accesstop 0060  
           __end_of__initialization BFF0             __end_of_Configurar_Hora E318  
                        ___ftadd@f1 002E                          ___ftadd@f2 0031  
                __size_of_Write_RTC 019C                          ___ftge@ff1 003A  
                        ___ftge@ff2 003D                       ___rparam_used 000001  
                        ___ftneg@f1 0001                          ___awtoft@c 0009  
                        ___lbtoft@c 000C                          ___ftmul@f1 0015  
                        ___ftmul@f2 0018                          ___ftsub@f1 003A  
                        ___ftsub@f2 003D                          ___fttol@f1 002B  
                    __pcstackCOMRAM 0001                    _Configurar_Fecha E906  
                      __pidataBANK0 BE8B                          ___lltoft@c 0009  
    Configurar_Hora_Grl@inicio_1257 0093                       __end_of_scale F06E  
                   __CFG_DSWDTPS$G2 000000               ??_Configurar_Hora_Grl 0060  
    Configurar_Hora_Grl@estado_1256 008D               ??_Configurar_Pantalla 0060  
                        __div_to_l_ D2F0                     __CFG_OSC$INTOSC 000000  
                         ?_Lcd_Init 0001                     __div_to_l_@exp1 000C  
                   __div_to_l_@cntr 000B                             ??_scale 0027  
       Programar_Temperatura@estado 007F                     __div_to_l_@quot 0007  
                      sprintf@width 0078                    ?_Iniciar_Display 0001  
               __size_of_Lcd_Chr_CP 0124                          __pbssBANK0 009C  
                        __pbssBANK1 0100                           ?_Read_RTC 0001  
            ?_Programar_Temperatura 0001      Configurar_Hora_Grl@limite_1258 0095  
                        _dia_semana 00EF           RtccWriteTime@tempHourWDay 000A  
 Encender_Aire_Calefaccion@aux_temp 0043                       __div_to_l_@f1 0001  
                     __div_to_l_@f2 0004           __size_of_Seleccionar_Dato 0132  
                         ?_RtccWrOn 0001                             ?___ftge 003A  
                           ?___wmul 000F            __size_of_Encender_Alarma 000C  
                     ?_RtccReadDate 0001         ??_Encender_Aire_Calefaccion 0043  
                     ?_RtccReadTime 0001                             ?_fround 0024  
                         ?___awtoft 0009                           ?___ftpack 0001  
                         ?___lbtoft 0009                           ?___lltoft 0009  
                 __end_of_Write_RTC DC8C            __size_of_Actualiza_datos 002C  
                        ??_Lcd_Init 0004             __size_of_Configurar_Dia 0132  
                           _RTCVALH 000F99                             _RTCVALL 000F98  
      Configurar_Fecha@config_fecha 0095                  _conseguir_estacion C604  
                        ??_Read_RTC 0013                             _Lcd_Cmd CD24  
                           _Lcd_Out C396                    ?_Configurar_Hora 007F  
               ?_conseguir_estacion 0001                   __end_of__npowers_ FE78  
                           __Hparam 0000                          _scale$2566 0027  
                           __Lparam 0000                          ??_RtccWrOn 0001  
             __end_of_Conseguir_Dia CA14                      ??_RtccReadDate 0003  
                   __size_of___ftge 0096                      ??_RtccReadTime 0003  
                           ___awdiv C4C0                             ___ftadd DC8C  
                           ___awmod C1FA                             ___ftneg BEDE  
                           ___lldiv C27C                     __size_of___wmul 0028  
                           ___ftmul CB16                             ___llmod C10C  
                           ___ftsub BFFA                             ___fttol CA14  
                        _hora_vdr_a 00E1                          _hora_vdr_c 00E3  
                       _RtccTimeVal 00A4                             __pcinit BFB8  
                           _fecha_d 00F0                             _fecha_u 00F1  
                        ??___awtoft 000C                          ??___ftpack 0006  
                        ??___lbtoft 000C                     __size_of_fround 024E  
                           __ramtop 0F00                             _lee_ADC BEA2  
                        ??___lltoft 000D                             __ptext0 C17C  
                           __ptext1 CF66                             __ptext2 D7EA  
                           __ptext3 C604                             __ptext4 BF02  
                           __ptext5 D95A                             __ptext6 C6BA  
                           __ptext7 BE6C                             __ptext8 BF50  
                           __ptext9 BEA2                             _buffer1 00B9  
                           _columna 00AC                           _T1CONbits 000FCD  
                       ?__div_to_l_ 0001                ??_conseguir_estacion 0001  
                           _lectura 00B8                             _dpowers FE29  
                           _isdigit BEBC             Configurar_Hora@aux_hora 0081  
                  ___awmod@dividend 0001                             _segundo 00B6  
         _Encender_Aire_Calefaccion C842                             _sprintf F06E  
              end_of_initialization BFF0                       __Lmediumconst FE28  
              Seleccionar_Dato@dato 007D                Seleccionar_Dato@fila 0057  
                   ___lldiv@divisor 0005                     ___lldiv@counter 000D  
                      ??_Lcd_Chr_CP 0001                             postdec1 000FE5  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc2 000FDE                      __tdiv_to_l_@f1 0001  
                    __tdiv_to_l_@f2 0004                       ??__tdiv_to_l_ 0007  
                         _PORTAbits 000F80                           _PORTCbits 000F82  
                  __CFG_DSBOREN$OFF 000000                   ??_Encender_Alarma 0001  
                  __CFG_CPUDIV$OSC1 000000                           _TRISBbits 000F93  
          __end_of_Configurar_Fecha EC70                   ??_Actualiza_datos 0046  
                __end_of_Lcd_Chr_CP CF66                    __CFG_IOL1WAY$OFF 000000  
         RtccWriteDate@tempDayMonth 000A                    _Seleccionar_Dato D1BE  
               __size_of__div_to_l_ 0134                 __CFG_MSSP7B_EN$MSK7 000000  
                       ___ftmul@exp 001E           Configurar_Hora_Grl@fila_i 0083  
         Configurar_Hora_Grl@inicio 008F           Configurar_Hora_Grl@estado 0089  
         Configurar_Hora_Grl@limite 0091           Configurar_Hora_Grl@opcion 007F  
                    __end_of___ftge C4C0                      __end_of___wmul BF50  
         RtccWriteDate@tempHourWDay 000C                      __end_of_fround E09E  
                  __CFG_DSWDTEN$OFF 000000          Configurar_Hora@config_hora 008F  
               start_initialization BFB8                 __end_of__tdiv_to_l_ D55E  
                    _Configurar_Dia D08C             ??_Programar_Temperatura 0060  
              __end_of_RtccReadDate C396                       Lcd_Out@buffer 0005  
              __end_of_RtccReadTime C10C                   __size_of_Lcd_Init 0126  
              RtccWriteTime@wasAlrm 0006                RtccWriteTime@wasWrEn 0007  
                   ___llmod@divisor 0012                     ___llmod@counter 0016  
            __size_of_RtccWriteDate 0146                     RtccWriteDate@di 0003  
            __size_of_RtccWriteTime 010C                   __size_of_Read_RTC 0146  
       __end_of_Configurar_Hora_Grl E906                        _lectura_temp 00D5  
                          ??___ftge 0040                            ??___wmul 0013  
       __end_of_Configurar_Pantalla E5D6               Configurar_Hora@inicio 0083  
             Configurar_Hora@estado 008B               Configurar_Hora@limite 0085  
                       __pdataBANK0 00D6               Configurar_Hora@opcion 007F  
                 __size_of_RtccWrOn 0012                     RtccWriteTime@di 0003  
                  __CFG_LPT1OSC$OFF 000000          Configurar_Hora@inicio_1204 0087  
                          ??_fround 0027                       sprintf@tmpval 006D  
                       _ALRMCFGbits 000F91                          fround@prec 002D  
        Configurar_Hora@estado_1203 008D                   __size_of___awtoft 003C  
                 __size_of___ftpack 00C6                   __size_of___lbtoft 0026  
            __end_of_Configurar_Dia D1BE                   __size_of___lltoft 0060  
                     __pcstackBANK0 0060                           _Write_RTC DAF0  
                      _isdigit$2330 0002             Seleccionar_Dato@columna 0059  
                          ?_Lcd_Cmd 0001                         sprintf@flag 0073  
                          ?_Lcd_Out 0004        Configurar_Pantalla@tipo_hora 0097  
                       sprintf@fval 0075                         sprintf@prec 007A  
                         __pnvBANK0 00ED          Configurar_Hora@limite_1205 0089  
__size_of_Encender_Aire_Calefaccion 00E4            __size_of_Iniciar_Display 0170  
                     __pmediumconst FE28                            ?___awdiv 0007  
                          ?___ftadd 002E                            ?___awmod 0001  
                          ?___ftneg 0001                            ?___lldiv 0001  
                          ?___ftmul 0015                            ?___llmod 000E  
                          ?___ftsub 003A                           __npowers_ FE51  
                          ?___fttol 002B             RtccWriteTime@tempMinSec 0008  
                          ?_lee_ADC 0001                         __tdiv_to_l_ D424  
                     _RtccWriteDate D55E                        ??__div_to_l_ 0007  
                 _Mostrar_DiaYfecha D95A                       _RtccWriteTime CC18  
                         _aux_fecha 00A8                     ?_Configurar_Dia 0001  
                          ?_isdigit 0001                __CFG_RTCOSC$T1OSCREF 000000  
                ?_Mostrar_DiaYfecha 0055                          ?_Write_RTC 0001  
                          ?_sprintf 0043                      __size_of_scale 03FE  
               ??_Mostrar_DiaYfecha 0059                    _RtccAlrmTimeDate 0100  
                    ___wmul@product 0013                            _LATAbits 000F89  
                          _LATBbits 000F8A                            _LATCbits 000F8B  
                          _PIE3bits 000FA3                           _segundo_d 00F8  
                         _segundo_u 00F9                  __end_of__div_to_l_ D424  
                   _Encender_Alarma BE6C                            Lcd_Out@x 0004  
                  __CFG_WDTPS$32768 000000                            Lcd_Out@y 0007  
       Configurar_Hora_Grl@aux_hora 0081                  RtccWriteDate@wasOn 0005  
          __size_of_Configurar_Hora 027A           __end_of_Mostrar_DiaYfecha DAF0  
                _Rtcc_read_TimeDate 0108                     _Actualiza_datos BF50  
                      Lcd_Init@data 0005                      ?_RtccWriteDate 0001  
                        _ADCON0bits 000FC2                   ___wmul@multiplier 000F  
                    ?_RtccWriteTime 0001         __size_of_conseguir_estacion 00B6  
             __size_of_RtccReadDate 008E            __end_of_Seleccionar_Dato D2F0  
             __size_of_RtccReadTime 006E                            _Lcd_Init CF66  
                 ?_Configurar_Fecha 007F              __size_of_Conseguir_Dia 00EE  
                         copy_data0 BFE4                  ??_Configurar_Fecha 0060  
                          _Read_RTC D6A4                    __size_of_Lcd_Cmd 011E  
                  __size_of_Lcd_Out 0094                            __Hrparam 0000  
                      _minuto_vdr_a 00E9                        _minuto_vdr_c 00B4  
                          _RtccDate 00CD                            __Lrparam 0000  
                          _RtccTime 00D1                            _RtccWrOn BE78  
                      _RtccReadDate C308                    __size_of___awdiv 0096  
                  __size_of___ftadd 01C4                    __size_of___awmod 0082  
                      _RtccReadTime C09E                    __size_of___ftneg 0024  
                  __size_of___lldiv 008C                   ??_Iniciar_Display 005B  
                  __size_of___ftmul 0102                    __size_of___llmod 0070  
                  __size_of___ftsub 0044                    __size_of___fttol 0102  
                          ___awtoft BF7C                            ___ftpack C77C  
                          ___lbtoft BF02                         _fround$2564 002A  
                       _fround$2565 0027                            ___lltoft C03E  
                  __size_of_lee_ADC 001A              Seleccionar_Dato@inicio 005B  
                      _RtccTimeDate 009C              Seleccionar_Dato@limite 005D  
                        sprintf@len 0067                          sprintf@exp 0071  
                        sprintf@val 0069                    __size_of_isdigit 0022  
                    Lcd_Chr_CP@data 0003                         ??_Write_RTC 000F  
         Configurar_Fecha@aux_fecha 0081                            __ptext10 C842  
                          __ptext11 BF7C                            __ptext20 D1BE  
                          __ptext12 E318                            __ptext21 D08C  
                          __ptext13 D6A4                            __ptext30 DE50  
                          __ptext22 DAF0                            __ptext14 C09E  
                          __ptext31 BF28                            __ptext23 CC18  
                          __ptext15 C308                            __ptext40 CA14  
                          __ptext32 CB16                            __ptext24 D55E  
                          __ptext16 C556                            __ptext41 BFFA  
                          __ptext33 C1FA                            __ptext25 BE78  
                          __ptext17 E5D6                            __ptext42 DC8C  
                          __ptext34 C4C0                            __ptext26 C926  
                          __ptext18 E09E                            __ptext43 C77C  
                          __ptext35 D424                            __ptext27 F06E  
                          __ptext19 E906                            __ptext44 BEDE  
                          __ptext36 D2F0                            __ptext28 EC70  
                          __ptext45 C42A                            __ptext37 C03E  
                          __ptext29 BEBC                            __ptext46 C396  
                          __ptext38 C10C                            __ptext47 CD24  
                          __ptext39 C27C                            __ptext48 CE42  
                          __powers_ FE78                    __size_of_sprintf 0DBA  
    __size_of_Programar_Temperatura 00AE                            _aux_hora 00AA  
     __end_of_Programar_Temperatura C604                         Lcd_Cmd@data 0003  
                          _estacion 00B0             __end_of_Encender_Alarma BE78  
                     __size_of_main 007E   Configurar_Pantalla@tipo_hora_1171 0099  
                          _minuto_d 00F6                            _minuto_u 00F7  
           __end_of_Actualiza_datos BF7C                       _Conseguir_Dia C926  
                   ??_RtccWriteDate 0004            Mostrar_DiaYfecha@columna 0057  
                   ??_RtccWriteTime 0004          __size_of_Mostrar_DiaYfecha 0196  
                 ??_Configurar_Hora 0060                         Lcd_Out@data 0008  
                       _OSCTUNEbits 000F9B                          _INTCONbits 000FF2  
                RtccWriteTime@wasOn 0005                            isdigit@c 0003  
                          scale@scl 002A              Configurar_Fecha@inicio 0083  
            Configurar_Fecha@estado 008F              Configurar_Fecha@limite 0085  
            Configurar_Fecha@opcion 007F               Seleccionar_Dato@datos 0055  
                         sprintf@ap 0065                           sprintf@cp 0063  
                  __tdiv_to_l_@exp1 000F                           sprintf@sp 0043  
                  __tdiv_to_l_@cntr 000E                    __tdiv_to_l_@quot 000A  
                  ___lldiv@dividend 0001                          _OSCCONbits 000FD3  
             RtccWriteDate@tempYear 0007                      ?_Conseguir_Dia 0001  
                  ??_Configurar_Dia 0057         Configurar_Fecha@inicio_1192 008B  
       Configurar_Fecha@inicio_1188 0087                        ?__tdiv_to_l_ 0001  
      __size_of_Configurar_Hora_Grl 0330                          _RTCCFGbits 000F3F  
                       _temperatura 00EB                            sprintf@c 007C  
                          sprintf@f 0045        __size_of_Configurar_Pantalla 02BE  
                  ___lldiv@quotient 0009         Configurar_Fecha@estado_1191 0091  
       Configurar_Fecha@estado_1187 0093                RtccWriteDate@wasAlrm 0006  
              RtccWriteDate@wasWrEn 0009                    ?_Encender_Alarma 0001  
       Configurar_Fecha@limite_1193 008D         Configurar_Fecha@limite_1189 0089  
